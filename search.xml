<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面向对象程序设计问答题OOP7构造和析构函数</title>
      <link href="/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop7-gou-zao-he-xi-gou-han-shu/"/>
      <url>/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop7-gou-zao-he-xi-gou-han-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数-default-constructor-？什么情况下，类中会有缺省构造函数？"><a href="#1-什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数-default-constructor-？什么情况下，类中会有缺省构造函数？" class="headerlink" title="1. 什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数(default constructor)？什么情况下，类中会有缺省构造函数？"></a>1. 什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数(default constructor)？什么情况下，类中会有缺省构造函数？</h4><ul><li><p>构造函数是一种特殊的函数，用来在<b><font color="red">对象实例化的时候初始化对象的成员变量</font></b></p></li><li><p>构造函数<b><font color="Blue">没有返回值</font></b></p><blockquote><p><strong>A constructor is a method whose name is the same as the class name.</strong></p></blockquote></li><li><p>构造函数必须<b><font color="Pink">与类名相同</font></b></p></li><li><p>构造函数<b><font color="Darkred">可以进行重载</font></b>,每个构造函数必须有不同的函数签名</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span><span class="token keyword">int</span>  d<span class="token punctuation">,</span> m<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> dd<span class="token punctuation">,</span> <span class="token keyword">int</span> mm<span class="token punctuation">,</span> <span class="token keyword">int</span> yy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> dd<span class="token punctuation">,</span> <span class="token keyword">int</span> mm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// today's year</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> dd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// today's month and year</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// default Date: today    </span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// date in string representation</span><span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>The default constructor is a constructor that can be invoked with no arguments.</strong></p></blockquote></li><li><p><strong>缺省构造函数</strong>: 缺省构造函数是可以不带参数调用的构造函数。一个类中，只能有一个缺省构造函数。</p><blockquote><p><strong>The compiler provides a public default constructor for a class with two exception:</strong></p><ul><li><strong>If a class explicitly declare any constructor, the complier does not provide a public default constructor. In this case, the programmer must provide a public default constructor if desired.</strong></li><li><strong>If a class declares a nonpublic default constructor, the complier does not provide a public default constructor.</strong></li></ul></blockquote></li><li><p>当<b><font color="DarkGreen">没有定义构造函数或者定义的构造函数没有参数</font></b>时，类中会有缺省构造函数。</p></li></ul><h4 id="2-构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？"><a href="#2-构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？" class="headerlink" title="2. 构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？"></a>2. 构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？</h4><ul><li><strong>作用</strong>: 用来在<b><font color="red">对象实例化的时候初始化对象的成员变量</font></b></li><li><strong>调用时间</strong>: 当<b><font color="Purple">类被创建时</font></b>,<b><font color="Grey">自动调用</font></b>构造函数</li><li><strong>执行顺序</strong>: 先执行<b><font color="Green">父类的构造函数</font></b>,再执行<b><font color="Blue">数据成员的初始化</font></b>（成员中有类，执行该类的构造函数）,最后执行<b><font color="Orange">子类的构造函数</font></b></li></ul><h4 id="3-为什么拷贝构造函数（copy-constructor）的参数必须是按引用传递-by-reference-而不能是按值传递-by-value-？"><a href="#3-为什么拷贝构造函数（copy-constructor）的参数必须是按引用传递-by-reference-而不能是按值传递-by-value-？" class="headerlink" title="3. 为什么拷贝构造函数（copy constructor）的参数必须是按引用传递(by reference)而不能是按值传递(by value)？"></a>3. 为什么拷贝构造函数（copy constructor）的参数必须是按引用传递(by reference)而不能是按值传递(by value)？</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//..</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Base A<span class="token punctuation">;</span>Base B<span class="token operator">=</span>A<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>值传递不可以原因</strong>: 以上述代码说明,当$B$需要调用其拷贝构造函数，需要将$A$进行值传递进入$B$的拷贝构造函数，而在进行值传递时，$B$的拷贝构造函数会生成一个该类的<b><font color="red">临时对象</font></b>（假设为$C$），会执行<code>Base C=A</code>（初始化形参，也就是初始化函数的局部变量），这又将调用$C$的拷贝构造函数，将$A$以值传递的方式传入,如此往复，每一次都会产生新的对象，<b><font color="Orange">无限递归调用拷贝构造函数</font></b>从而耗尽资源，产生错误.</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">const</span> Base<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//..</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Base A<span class="token punctuation">;</span>Base B<span class="token operator">=</span>A<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>引用传递可以的原因</strong>:当上述$B$调用拷贝构造函数时，会生成一个临时的引用变量，而不是对象，会执行<code>Base &amp;C=A</code>（同样是初始化形参，只不过是初始化一个引用），这不会产生新的对象，也就不会调用拷贝构造函数，只是<b><font color="blue">增加了一个指向A的临时引用</font></b>而已。</li></ul><h4 id="4-拷贝构造函数-复制构造函数-的作用是什么？什么是浅拷贝？什么是深拷贝？"><a href="#4-拷贝构造函数-复制构造函数-的作用是什么？什么是浅拷贝？什么是深拷贝？" class="headerlink" title="4. 拷贝构造函数(复制构造函数)的作用是什么？什么是浅拷贝？什么是深拷贝？"></a>4. 拷贝构造函数(复制构造函数)的作用是什么？什么是浅拷贝？什么是深拷贝？</h4><ul><li>拷贝构造函数是一种特殊的构造函数，函数的名称必须和类名称一致，它必须的一个参数是本类型的一个引用变量。</li><li><strong>作用</strong>: 用来复制对象，在使用这个对象的实例来初始化这个对象的一个新的实例。</li><li><strong>浅拷贝和深拷贝</strong>: 拷贝者和被拷贝者若是同一个地址，则为浅拷贝，反之为深拷贝，深拷贝会在<b><font color="red">堆内存中另外申请空间来储存数据</font></b>。默认的拷贝构造函数实现的是浅拷贝，数据成员中有指针时，必须要用深拷贝。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//深度拷贝</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//浅拷贝</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str1 <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-全局对象-Global-scope-objects-的构造函数、析构函数分别是什么时候被调用的？自动局部对象-Automatic-local-objects-的构造函数、析构函数分别是什么时候被调用的？静态局部对象-static-local-objects-的构造函数、析构函数分别是什么时候被调用的？"><a href="#5-全局对象-Global-scope-objects-的构造函数、析构函数分别是什么时候被调用的？自动局部对象-Automatic-local-objects-的构造函数、析构函数分别是什么时候被调用的？静态局部对象-static-local-objects-的构造函数、析构函数分别是什么时候被调用的？" class="headerlink" title="5. 全局对象(Global scope objects)的构造函数、析构函数分别是什么时候被调用的？自动局部对象(Automatic local objects)的构造函数、析构函数分别是什么时候被调用的？静态局部对象(static local objects)的构造函数、析构函数分别是什么时候被调用的？"></a>5. 全局对象(Global scope objects)的构造函数、析构函数分别是什么时候被调用的？自动局部对象(Automatic local objects)的构造函数、析构函数分别是什么时候被调用的？静态局部对象(static local objects)的构造函数、析构函数分别是什么时候被调用的？</h4><ul><li><strong>全局对象</strong>的构造函数<b><font color="red">在程序运行前被调用</font></b>，析构函数<b><font color="blue">在程序结束前最后被调用</font></b>；</li><li><strong>自动局部对象</strong>的构造函数<b><font color="red">在程序执行到对象定义时自动被调用</font></b>,析构函数<b><font color="blue">在对象离开范围时(离开定义对象的块时)被调用</font></b>；</li><li><strong>静态局部对象</strong>的构造函数<b><font color="red">在程序执行到对象定义时自动被调用</font></b>,析构函数<b><font color="blue">在程序结束前被调用</font></b>。</li></ul><h4 id="6-什么是初始化列表-Initialization-Sections-？它的作用是什么？（提示：一般数据成员的初始化、常成员的初始化，对象成员构选函数的选择、父类构造函数的选等）"><a href="#6-什么是初始化列表-Initialization-Sections-？它的作用是什么？（提示：一般数据成员的初始化、常成员的初始化，对象成员构选函数的选择、父类构造函数的选等）" class="headerlink" title="6. 什么是初始化列表(Initialization Sections)？它的作用是什么？（提示：一般数据成员的初始化、常成员的初始化，对象成员构选函数的选择、父类构造函数的选等）"></a>6. 什么是初始化列表(Initialization Sections)？它的作用是什么？（提示：一般数据成员的初始化、常成员的初始化，对象成员构选函数的选择、父类构造函数的选等）</h4><h4 id="7-什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？"><a href="#7-什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？" class="headerlink" title="7. 什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？"></a>7. 什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？</h4><h4 id="8-析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？"><a href="#8-析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？" class="headerlink" title="8. 析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？"></a>8. 析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？</h4><h4 id="9-如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。"><a href="#9-如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。" class="headerlink" title="9. 如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。"></a>9. 如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。</h4><h4 id="10-什么是C-中的三大函数-The-Big-Three-？"><a href="#10-什么是C-中的三大函数-The-Big-Three-？" class="headerlink" title="10. 什么是C++中的三大函数(The Big Three)？"></a>10. 什么是C++中的三大函数(The Big Three)？</h4>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计问答题OOP6this</title>
      <link href="/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop6this/"/>
      <url>/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop6this/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是this指针，其作用是什么？"><a href="#1-什么是this指针，其作用是什么？" class="headerlink" title="1. 什么是this指针，其作用是什么？"></a>1. 什么是this指针，其作用是什么？</h4><ul><li><strong>定义</strong>: $this$指针是C++实现封装的一种机制，它将对象和该对象调用的成员函数连接在一起，在外部看来，每一个对象 都拥有自己的函数成员。每个对象用有独立的数据。每个对象共享同一个方法。$this$是C++中的一个关键字，也是一个 $const$指针，它<b><font color="red">指向当前对象</font></b>，通过它可以访问当前对象的所有成员。当前对象指正在使用的对象。如：$ob.show()$,$ob$就是当前对象，$this$就指向$ob$。</li><li><strong>作用</strong>:</li></ul><ol><li>访问当前对象的<strong>所有成员</strong></li><li>在类的非静态成员函数中返回类对象本身的时候，直接使用$return$ $*this$，例如：实现对象的链式引用</li><li>当参数与成员变量名相同时，如<code>this-&gt;x=x</code>，不能写成<code>x=x</code></li><li>避免对同一对象进行赋值操作</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span> File<span class="token operator">&amp;</span> dest <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>dest <span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//……</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在一个类中，为什么静态成员函数（static-member-function）中不能使用this指针？"><a href="#2-在一个类中，为什么静态成员函数（static-member-function）中不能使用this指针？" class="headerlink" title="2. 在一个类中，为什么静态成员函数（static member function）中不能使用this指针？"></a>2. 在一个类中，为什么静态成员函数（static member function）中不能使用this指针？</h4><p>静态成员函数并不是针对某个类的实例对象，而是<b><font color="red">属于整个类的，为所有的对象实例所共有</font></b>。它在作用域的范围内是全局的，独立于类的对象之外的。它只对类内部的静态成员变量做操作。当实例化一个类的对象时候，里面不存在静态成员的。$this$指针是相当于一个类的实例的指针，$this$是用来操作对象实例的内容的，既然<strong>静态成员函数和变量都是独立于类的实例对象之外的</strong>，它就不能用$this$指针。也不能操作非静态成员。</p>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计问答题OOP5类</title>
      <link href="/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop5-lei/"/>
      <url>/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop5-lei/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。"><a href="#1-什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。" class="headerlink" title="1. 什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。"></a>1. 什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。</h4><ul><li><strong>定义</strong>: 类是<u><strong>逻辑上相关的函数与数据的封装</strong></u>，描述了所创建对象共同的属性和方法。</li><li><strong>内容</strong>: 类中声明或定义的变量和函数称为成员，类的成员包括<b><font color="Red">数据成员和成员函数/方法</font></b>，<u><strong>数据成员</strong></u>描述<b><font color="Blue">问题的属性</font></b>，<u><strong>成员函数/方法</strong></u>描述<b><font color="Orange">问题的行为</font></b>。</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//class+类名</span>    <span class="token keyword">public</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>访问控制    <span class="token comment" spellcheck="true">//成员函数/方法</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token function">getAge</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>访问控制    <span class="token comment" spellcheck="true">//数据成员</span>    <span class="token keyword">unsigned</span> age<span class="token punctuation">;</span>    <span class="token keyword">protected</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>访问控制    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处有分号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-什么是对象？什么是类？类与对象的关系是什么？"><a href="#2-什么是对象？什么是类？类与对象的关系是什么？" class="headerlink" title="2. 什么是对象？什么是类？类与对象的关系是什么？"></a>2. 什么是对象？什么是类？类与对象的关系是什么？</h4><ul><li><strong>定义</strong>: 类是<u><strong>逻辑上相关的函数与数据的封装</strong></u>，描述了所创建对象共同的属性和方法,对象是类的某一<strong>特定实体</strong>,例如将整个公司的雇员看成一个类，那么每一个雇员就是该类的一个特定实体，也就是一个对象</li><li><strong>关系</strong>: 类是对象的<u><strong>抽象</strong></u>，而对象是类的<u><strong>具体实例</strong></u>。类是抽象的，不占用内存，而对象是具体的，占用存储空间。</li></ul><h4 id="3-类中的成员可以用public-x2F-protected-x2F-private分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用public-x2F-protected-x2F-private修饰的成员，其可访问性是什么，结构体中没有用public-x2F-protected-x2F-private修饰的成员，其可访问性是什么？"><a href="#3-类中的成员可以用public-x2F-protected-x2F-private分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用public-x2F-protected-x2F-private修饰的成员，其可访问性是什么，结构体中没有用public-x2F-protected-x2F-private修饰的成员，其可访问性是什么？" class="headerlink" title="3. 类中的成员可以用public/protected/private分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用public/protected/private修饰的成员，其可访问性是什么，结构体中没有用public/protected/private修饰的成员，其可访问性是什么？"></a>3. 类中的成员可以用public/protected/private分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用public/protected/private修饰的成员，其可访问性是什么，结构体中没有用public/protected/private修饰的成员，其可访问性是什么？</h4><ul><li>$public$: 修饰的成员可以在任何地方被访问</li><li>$private$: 修饰的成员只能由<b><font color="Red">该类中的函数、其友元函数访问</font></b>,不能被任何其他访问，该类对象也不能访问</li><li>protected: 修饰的成员可以被<b><font color="Red">该类中函数</font></b>、<b><font color="Blue">子类函数</font></b>、<b><font color="Red">友元函数访问</font></b>；但不能被该类对象访问</li><li>在<strong>类</strong>中没有用$public/protected/private$修饰的成员，其可访问性默认是$private$</li><li>在<strong>结构体</strong>中没有用$public/protected/private$修饰的成员，其可访问性默认是$public$</li></ul><h4 id="4-什么是类作用域-Class-scope-、文件作用域-file-scope-、函数作用域（function-scope）？"><a href="#4-什么是类作用域-Class-scope-、文件作用域-file-scope-、函数作用域（function-scope）？" class="headerlink" title="4. 什么是类作用域(Class scope)、文件作用域(file scope)、函数作用域（function scope）？"></a>4. 什么是类作用域(Class scope)、文件作用域(file scope)、函数作用域（function scope）？</h4><ul><li><p><strong>类作用域</strong>: 类作用域是指<b><font color="green">类定义范围</font></b>（包括类的声明部分和相应成员函数实现整个范围）。在该范围内，类的成员函数对数据成员有完全访问权限。</p></li><li><p><strong>文件作用域</strong>: 文件作用域也称全局作用域。定义在所有函数之外的标识符，具有文件作用域，作用域为<b><font color="Red">从定义处到整个源文件结束</font></b>。文件中定义的全局变量和函数都具有文件作用域。</p></li><li><p><strong>函数作用域</strong>: 函数中定义的变量，包括形参和函数体中定义的局部变量，作用域都在该函数内，也称为函数域,<b><font color="Orange">从函数开始和函数结束</font></b></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计问答题OOP4面向对象概论</title>
      <link href="/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop4-mian-xiang-dui-xiang-gai-lun/"/>
      <url>/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop4-mian-xiang-dui-xiang-gai-lun/</url>
      
        <content type="html"><![CDATA[<h4 id="1-叙述面向对象编程的特点是什么？-提示：封装、继承、多态。"><a href="#1-叙述面向对象编程的特点是什么？-提示：封装、继承、多态。" class="headerlink" title="1. 叙述面向对象编程的特点是什么？(提示：封装、继承、多态。)"></a>1. 叙述面向对象编程的特点是什么？(提示：封装、继承、多态。)</h4><p>具有<u><strong>抽象、封装、继承、多态</strong></u>的特点.</p><ul><li><strong>抽象</strong>: 对同一个事的<b><font color="red">共有的属性（特征）和方法（功能/行为）</font></b>进行<u><strong>抽取、归纳、总结</strong></u>。如：汽车都有轮子、发动机等这些就是汽车的属性，汽车能跑、能载人载物等这些就是汽车的功能。这样就可以把汽车的这些功能与属性抽取出来写在一个类中，供汽车这一类事物使用。</li><li><strong>封装</strong>: 在抽象中将<b><font color="Blue">属性与方法写在一个类中</font></b>就是封装，而封装就是为了<u><strong>保证抽象出来的特征和方法的安全性</strong></u>，封装就是包装的过程，注意封装不是绝对的封装，如果其他程序要获取已经封装好的数据，就要通过程序<strong>指定的接口或方法</strong>才能获取。</li><li><strong>继承</strong>: 继承在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以<u><strong>加入若干新的内容</strong></u>，或<u><strong>修改原来的方法使之更适合特殊的需要</strong></u>，这就是继承。继承是<b><font color="Orange">子类自动共享父类数据和方法</font></b>的机制，这是类之间的一种关系，提高了软件的<strong>可重用性和可扩展性</strong>。</li><li><strong>多态</strong>: 指在一般类中定义的属性或行为，被特殊类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为<b><font color="DarkGreen">在一般类及其各个特殊类中具有不同的语义</font></b>,增强编程的灵活性。</li></ul><h4 id="2-什么是封装？其作用是什么？"><a href="#2-什么是封装？其作用是什么？" class="headerlink" title="2. 什么是封装？其作用是什么？"></a>2. 什么是封装？其作用是什么？</h4><ul><li><p><strong>封装</strong>: 封装是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的函数代码进行有机结合，形成类。</p></li><li><p><strong>作用</strong>: 使一部分成员充当类与外部的接口，而将其他成员隐藏起来，这样就达到了对成员访问权限的合理控制，使不同类之间的相互影响减少到最低限度，进而保护数据增强数据的安全性和简化程序编写工作。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计问答题OOP1-003</title>
      <link href="/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop1-003/"/>
      <url>/2022/06/20/mian-xiang-dui-xiang-cheng-xu-she-ji-wen-da-ti-oop1-003/</url>
      
        <content type="html"><![CDATA[<h4 id="1-用代码说明在标准C-中如何进行输入输出，并解释各语句的含义是什么？"><a href="#1-用代码说明在标准C-中如何进行输入输出，并解释各语句的含义是什么？" class="headerlink" title="1. 用代码说明在标准C++中如何进行输入输出，并解释各语句的含义是什么？"></a>1. 用代码说明在标准C++中如何进行输入输出，并解释各语句的含义是什么？</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在<strong>输入</strong>时，从键盘输入的数据先放在<b><font color="red">键盘缓冲区</font></b>中，当按<strong>回车键</strong>时，键盘缓冲区中的数据输入到程序中的<b><font color="Orange">输入缓冲区</font></b>，形成$cin$流，然后用<u><strong>流提取运算符</strong></u><code>&gt;&gt;</code>从<b><font color="Orange">输入缓冲区</font></b>中提取数据送给程序中的<b><font color="Blue">有关变量</font></b>。</p></li><li><p>当用$cout$和<u><strong>流插入运算符</strong></u><code>&lt;&lt;</code>向显示器<strong>输出</strong>数据时，先将这些数据送到程序中的<b><font color="DarkGreen">输出缓冲区</font></b>保存，直到缓冲区<strong>满了或遇到</strong>$endl$，就将缓冲区中的全部数据送到<b><font color="Purple">显示器</font></b>显示出来。</p></li></ul><h4 id="2-阐述C＋＋中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）"><a href="#2-阐述C＋＋中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）" class="headerlink" title="2. 阐述C＋＋中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）"></a>2. 阐述C＋＋中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）</h4><p><strong>传值</strong>: <font color="Red">实参用变量名（或常数），形参用变量名</font></p><p><strong>传值调用</strong>: 是单向的，实参把值拷贝一份给形参，形参值的改变不会影响实参</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>a<span class="token punctuation">,</span>a<span class="token operator">=</span>b<span class="token punctuation">,</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i="</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" j="</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><p>运行时输入<code>2 5</code></p><pre class="line-numbers language-cpp"><code class="language-cpp">a<span class="token operator">=</span><span class="token number">5</span> b<span class="token operator">=</span><span class="token number">2</span>i<span class="token operator">=</span><span class="token number">2</span> j<span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>传指针</strong>: <font color="Blue">实参用地址，形参用指针</font></li></ul><p><strong>传址调用</strong>：是双向的，把实参的地址传给形参，形参就指向实参变量，因此形参的改变会影响实参</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>a <span class="token operator">&lt;&lt;</span> <span class="token string">" b="</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>i<span class="token punctuation">,</span><span class="token operator">&amp;</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i="</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" j="</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><p>运行时输入<code>2 5</code></p><pre class="line-numbers language-cpp"><code class="language-cpp">a<span class="token operator">=</span><span class="token number">5</span> b<span class="token operator">=</span><span class="token number">2</span>i<span class="token operator">=</span><span class="token number">5</span> j<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>传引用</strong>: <font color="DarkGreen">实参用变量名，形参用引用</font></li></ul><p><strong>引用调用</strong>：形参是实参的别名，形参的改变也会影响实参，注意，实参只能用变量名，不能用常量</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span>a<span class="token punctuation">,</span>a<span class="token operator">=</span>b<span class="token punctuation">,</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    cin <span class="token operator">>></span> i <span class="token operator">>></span> j<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i="</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" j="</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><p>运行时输入<code>2 5</code></p><pre class="line-numbers language-cpp"><code class="language-cpp">a<span class="token operator">=</span><span class="token number">5</span> b<span class="token operator">=</span><span class="token number">2</span>i<span class="token operator">=</span><span class="token number">5</span> j<span class="token operator">=</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>效率问题</strong>:在内置类型当中三种传递方式的效率上都差不多；在自定义类型当中，<strong>传引用</strong>的更高效一些，因为它没有对形参进行一次拷贝</li></ul><h4 id="3-什么是内联函数？为什么要使用内联函数？"><a href="#3-什么是内联函数？为什么要使用内联函数？" class="headerlink" title="3. 什么是内联函数？为什么要使用内联函数？"></a>3. 什么是内联函数？为什么要使用内联函数？</h4><ul><li><strong>定义</strong>: 当编译器发现某段代码在调用一个内联函数时，它不是去调用该函数，而是将该函数的代码，整段插入到当前位置。</li><li><strong>原因</strong>: 省去了调用的过程，加快程序运行速度(<b><font color="red">实现代码的重用,提高开发效率</font></b>),但是可能使得程序的体积变大。</li></ul><h4 id="4-什么是类的前向声明？使用类的前向声明时，要注意什么？"><a href="#4-什么是类的前向声明？使用类的前向声明时，要注意什么？" class="headerlink" title="4. 什么是类的前向声明？使用类的前向声明时，要注意什么？"></a>4. 什么是类的前向声明？使用类的前向声明时，要注意什么？</h4><ul><li><p><strong>类的前向声明</strong>: 是在引用未定义的类之前，声明该类，使编译器知道是一个类名。当程序中使用这个类名时，编译器就不会认为是错误，而类的完整定义可以在程序的其他地方。</p></li><li><p><strong>注意事项</strong>:</p></li></ul><ol><li>前向声明的类不能定义对象。</li><li>可以用于定义指向这个类型的指针和引用。</li><li>用于申明使用该类型作为形参或返回类型的函数。</li></ol><p><strong>类相互引用的循环依赖情况</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类的前向声明</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//A类定义</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>B b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以B类对象b为形参的成员函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//B类定义</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>A a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Error</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-什么是先验条件-Precondition-，什么是后置条件-Postcondition-？"><a href="#5-什么是先验条件-Precondition-，什么是后置条件-Postcondition-？" class="headerlink" title="5. 什么是先验条件(Precondition)，什么是后置条件(Postcondition)？"></a>5. 什么是先验条件(Precondition)，什么是后置条件(Postcondition)？</h4><ul><li><strong>先验条件($Precondition$)</strong>: 针对方法($method$)，它规定了在<b><font color="red">调用该方法之前</font></b>必须为真的条件</li><li><strong>后置条件($Postcondition$)</strong>: 针对方法($method$)，它规定了<b><font color="DarkGreen">方法顺利执行完毕之后</font></b>必须为真的条件</li></ul><h4 id="6-什么是名称空间-namespace-？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？"><a href="#6-什么是名称空间-namespace-？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？" class="headerlink" title="6. 什么是名称空间(namespace)？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？"></a>6. 什么是名称空间(namespace)？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？</h4><ul><li><strong>定义</strong>: 名称空间通过定义一种新的声明区域来创建命名的名称空间，一个名称空间中的实体不会和另外一个名称空间中的同名实体冲突.</li><li><strong>作用</strong>: 处理程序中常见的<b><font color="red">同名冲突</font></b></li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">namespace</span> mfc<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> owl<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mfc<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mfc::a= "</span> <span class="token operator">&lt;&lt;</span> mfc<span class="token operator">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    owl<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"owl::a= "</span> <span class="token operator">&lt;&lt;</span> owl<span class="token operator">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><pre class="line-numbers language-cpp"><code class="language-cpp">mfc<span class="token operator">::</span>a<span class="token operator">=</span> <span class="token number">5</span>owl<span class="token operator">::</span>a<span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>方法</strong></li></ul><ol><li>直接使用域解析符<code>::</code>.<pre class="line-numbers language-cpp"><code class="language-cpp">mfc<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>owl<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>使用$using$ $declaration$(声明),一般用于单个元素类型.</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">using</span> mfc<span class="token operator">::</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"mfc::a= "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>owl<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"owl::a= "</span> <span class="token operator">&lt;&lt;</span> owl<span class="token operator">::</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用$using$ $directive$(指令),一般用于整体名字空间.</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> mfc<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...直接使用mfc中的成员(可不用域解析符)</span>owl<span class="token operator">::</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-什么是重载-Overloading-，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？"><a href="#7-什么是重载-Overloading-，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？" class="headerlink" title="7. 什么是重载(Overloading)，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？"></a>7. 什么是重载(Overloading)，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？</h4><p><strong>重载</strong>: 一个类中定义了多个方法名相同,而他们的<b><font color="red">参数的数量不同或数量相同而类型和次序不同</font></b>,则称为方法的重载($Overloading$)</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>string st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>原因</strong>: 不能根据返回值不同，对函数进行重载,容易产生歧义,当$main$函数调用<code>Fun(1,2)</code>,编译器不知道选择哪个函数进行调用</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-如何防止一个头文件被多重包含？举例说明"><a href="#8-如何防止一个头文件被多重包含？举例说明" class="headerlink" title="8. 如何防止一个头文件被多重包含？举例说明"></a>8. 如何防止一个头文件被多重包含？举例说明</h4><p>使用<strong>条件编译</strong></p><p>假设包含的文件名为<code>x.h</code>,写成如下:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _x_h</span><span class="token macro property">#<span class="token directive keyword">define</span> _x_h</span><span class="token comment" spellcheck="true">//...其他内容</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-dynamic-cast的作用是什么？试举例说明"><a href="#9-dynamic-cast的作用是什么？试举例说明" class="headerlink" title="9. dynamic-cast的作用是什么？试举例说明"></a>9. dynamic-cast的作用是什么？试举例说明</h4><p><strong>作用</strong>: 将基类的地址转换为派生类的地址，如果类型匹配则转换成功，否则转换失败，返回空地址。</p><p><strong>转换原则</strong>:</p><ul><li>如果$p$是一个指向$B$类型的对象的指针，则转换成功；</li><li>如果$p$不是一个指向$B$类型的对象的指针，则转换失败，返回一个空地址.</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Class A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token keyword">public</span> A <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Class B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token keyword">public</span> A <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Class C"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cin <span class="token operator">>></span> op<span class="token punctuation">;</span>    A <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>op <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断p到底是什么对象</span>    <span class="token comment" spellcheck="true">//将p转换为目标地址B *</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将p转换为目标地址C *</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>C <span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kuangbin专题二搜索进阶</title>
      <link href="/2022/06/01/kuangbin-zhuan-ti-er-sou-suo-jin-jie/"/>
      <url>/2022/06/01/kuangbin-zhuan-ti-er-sou-suo-jin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="注意此处提供了链接"><a href="#注意此处提供了链接" class="headerlink" title="注意此处提供了链接"></a>注意此处提供了链接</h2><p><a href="https://vjudge.csgrandeur.cn/article/371">kuangbin专题总</a><br><a href="https://vjudge.csgrandeur.cn/contest/65997">kuangbin专题2</a></p><h3 id="1-八数码"><a href="#1-八数码" class="headerlink" title="1. 八数码"></a><a href="https://www.acwing.com/problem/content/181/">1. 八数码</a></h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="2-八数码II"><a href="#2-八数码II" class="headerlink" title="2. 八数码II"></a><a href="https://www.acwing.com/problem/content/4231/">2. 八数码II</a></h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="3-哈密顿绕行世界问题"><a href="#3-哈密顿绕行世界问题" class="headerlink" title="3. 哈密顿绕行世界问题 "></a><a href="https://www.acwing.com/problem/content/4232/">3. 哈密顿绕行世界问题 </a></h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="4-逃跑"><a href="#4-逃跑" class="headerlink" title="4. 逃跑"></a><a href="https://www.acwing.com/problem/content/4233/">4. 逃跑</a></h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="5-DNA序列"><a href="#5-DNA序列" class="headerlink" title="5. DNA序列"></a><a href="https://www.acwing.com/problem/content/4234/">5. DNA序列</a></h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="6-噩梦"><a href="#6-噩梦" class="headerlink" title="6. 噩梦"></a><a href="https://www.acwing.com/problem/content/179/">6. 噩梦</a></h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="7-A计划"><a href="#7-A计划" class="headerlink" title="7. A计划"></a><a href="https://www.acwing.com/problem/content/4236/">7. A计划</a></h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="8-旅行"><a href="#8-旅行" class="headerlink" title="8. 旅行"></a><a href="https://www.acwing.com/problem/content/4237/">8. 旅行</a></h3><h4 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h4><h4 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuangbin专题 </tag>
            
            <tag> 简单搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kuangbin专题一简单搜索(下)</title>
      <link href="/2022/05/24/kuangbin-zhuan-ti-yi-jian-dan-sou-suo-xia/"/>
      <url>/2022/05/24/kuangbin-zhuan-ti-yi-jian-dan-sou-suo-xia/</url>
      
        <content type="html"><![CDATA[<h2 id="注意此处提供了链接"><a href="#注意此处提供了链接" class="headerlink" title="注意此处提供了链接"></a>注意此处提供了链接</h2><p><a href="https://vjudge.csgrandeur.cn/article/371">kuangbin专题总</a><br><a href="https://vjudge.csgrandeur.cn/contest/65959">kuangbin专题1</a></p><h3 id="8-罐子"><a href="#8-罐子" class="headerlink" title="8. 罐子"></a><a href="https://www.acwing.com/problem/content/4225/">8. 罐子</a></h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给你两个罐子，容积分别为 $A$ 升和 $B$ 升。<br>现在，你可以进行如下三种操作：</p><ul><li><code>FILL(i)</code>，将罐子$i$（$1\leqslant i \leqslant 2$）灌满水。</li><li><code>DROP(i)</code>，将罐子 $i$（$1\leqslant i \leqslant 2$）清空。</li><li><code>POUR(i,j)</code>，将罐子 $i$ 中的水倒向罐子 $j$，直到罐子 $i$ 空了或罐子 $j$ 满了为止。<br>请问，至少多少次操作后，可以使得其中一个罐子里恰好有 $C$ 升水。</li></ul><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>共一行，三个整数 $A,B,C$。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>如果无解，则输出一行 <code>impossible</code> 即可。<br>否则，第一行输出一个整数，表示最少操作次数。<br>随后按顺序每行输出一个操作指令，格式参考题面。</p><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1\leqslant A,B,C \leqslant 100$,<br>$C \leqslant max(A,B)$。</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><p>$3$ $5$ $4$</p><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><p>$6$<br>FILL(2)<br>POUR(2,1)<br>DROP(1)<br>POUR(2,1)<br>FILL(2)<br>POUR(2,1)</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>基于<b><font color="red">bfs</font></b>的思想,将两个杯子分别看作坐标系中的$x$和$y$,去跑bfs即可,此时无非就6种情况,倒满$A$(来源于$B$或外界倒满),倒空$A$,倒满$B$(来源于$A$或外界倒满),倒空$B$.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    string op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string res<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"FILL(1)"</span><span class="token punctuation">,</span> <span class="token string">"FILL(2)"</span><span class="token punctuation">,</span> <span class="token string">"DROP(1)"</span><span class="token punctuation">,</span><span class="token string">"DROP(2)"</span><span class="token punctuation">,</span><span class="token string">"POUR(1,2)"</span><span class="token punctuation">,</span><span class="token string">"POUR(2,1)"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>x<span class="token operator">==</span>C<span class="token operator">||</span>temp<span class="token punctuation">.</span>y<span class="token operator">==</span>C<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//cout &lt;&lt; temp.op &lt;&lt; "***" &lt;&lt; endl;</span>            cout <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">.</span>step <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>op<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> temp1<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">,</span>B<span class="token operator">-</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp2<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">,</span>A<span class="token operator">-</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//倒满,倒空,A->B,B->A</span>        <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>A<span class="token operator">-</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span>B<span class="token operator">-</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span>temp1<span class="token punctuation">,</span>temp1<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>temp2<span class="token punctuation">,</span><span class="token operator">-</span>temp2<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">char</span> temp_op<span class="token operator">=</span>i<span class="token punctuation">;</span>                string s<span class="token operator">=</span>temp<span class="token punctuation">.</span>op<span class="token operator">+</span>temp_op<span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"impossible\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>A<span class="token punctuation">,</span><span class="token operator">&amp;</span>B<span class="token punctuation">,</span><span class="token operator">&amp;</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="9-点火游戏"><a href="#9-点火游戏" class="headerlink" title="9. 点火游戏"></a><a href="https://www.acwing.com/problem/content/4226/">9. 点火游戏</a></h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定一个 $N$ 行 $M$ 列的方格矩阵。<br>其中一部分方格是草地，其余部分是空地。<br>草地能够被燃烧，空地不会。<br>当某个草地在 $t$ 时刻被点燃时，其上下左右四个方向的相邻方格中的<strong>草地方格</strong>也会在 $t+1$ 时刻被点燃。<br>注意，空地方格无论如何都不可能被点燃。<br>现在，你可以选择最多两个草地，将它们点燃。<br>请你计算，使得所有草地都被点燃所需花费的最少时间。</p><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。<br>每组数据第一行包含两个整数 $N,M$。<br>接下来 $N$ 行，包含一个 $N \times M$ 的字符矩阵，<code>#</code> 表示草地，<code>.</code> 表示空地。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一个结果，每个结果占一行。<br>结果表示为 <code>Case x: y</code>，其中 $x$ 为组别编号（从 $1$ 开始），$y$ 点燃所有草地需要花费的最短时间。如果无法点燃所有草地或者所有方格都是空地则输出 $-1$。</p><h5 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant T \leqslant 100$,<br>$1 \leqslant N,M \leqslant 10$。</p><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h5><p>$5$<br>$3$ $3$<br>.#.<br>###<br>.#.<br>$3$ $3$<br>.#.<br>#.#<br>.#.<br>$3$ $3$<br>…<br>#.#<br>…<br>$3$ $3$<br>###<br>..#<br>#.#<br>$3$ $3$<br>…<br>…<br>…</p><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h5><p>Case $1$: $1$<br>Case $2$: $-1$<br>Case $3$: $0$<br>Case $4$: $2$<br>Case $5$: $-1$</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p>经典的<b><font color="red">bfs</font></b>问题,此题可暴力枚举两个草地的情况(可能存在一个草堆的情况,在跑两重循环第二层应从$i$开始),无终止条件,在$bfs$跑完后判断当前燃烧的草堆的个数是否与所有的草堆个数相等,返回最长的时间,并每次取最小值.</p></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 15</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>res<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>PII a<span class="token punctuation">,</span>PII b<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span>first<span class="token punctuation">,</span>a<span class="token punctuation">.</span>second<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token punctuation">)</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>b<span class="token punctuation">.</span>first<span class="token punctuation">,</span>b<span class="token punctuation">.</span>second<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>a<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">=</span>vis<span class="token punctuation">[</span>b<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>maxx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                maxx<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>sum<span class="token punctuation">)</span>        <span class="token keyword">return</span> maxx<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cas<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> v<span class="token punctuation">;</span>        res<span class="token operator">=</span>inf<span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>sum<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注意此处是i,不是i+1,它有可能只有一堆</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                    res<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>inf<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: -1\n"</span><span class="token punctuation">,</span>cas<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Case %d: %d\n"</span><span class="token punctuation">,</span>cas<span class="token operator">++</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="10-起火迷宫"><a href="#10-起火迷宫" class="headerlink" title="10. 起火迷宫"></a><a href="https://www.acwing.com/problem/content/4227/">10. 起火迷宫</a></h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>一个迷宫可以看作一个 $R$ 行 $C$ 列的方格矩阵。<br>其中一些方格是空地，用 <code>.</code> 表示，其他方格是障碍，用 <code>#</code> 表示。<br>开始时，乔位于一块空地之中。<br>迷宫中一些空地已经起火了，幸运的是火还没有蔓延至乔所在的位置。<br>为了避免被火烧伤，乔需要尽快逃离迷宫。<br>已知，乔每单位时间只能沿上下左右四个方向前进一格距离，并且在前进过程中，他不能进入障碍方格。<br>火每单位时间都会蔓延至其上下左右四个方向的相邻空地，但是火也会被障碍阻挡。<br>如果一个方格已经起火或者会在乔进入方格的那一时刻恰好起火，则该方格很危险，乔不能进入。<br>当乔进入到任意一个位于边界的空地方格时，他都可以再花费一单位时间，直接逃离迷宫。<br>请问，乔想要逃离迷宫，最少需要花费的时间。</p><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含整数 $T$，表示共有 $T$ 组测试数据。<br>每组数据第一行包含两个整数 $R,C$。<br>接下来 $R$ 行，包含一个 $R \times C$ 的字符矩阵。<br>矩阵中只包含以下四种字符：</p><ul><li><code>#</code> 表示障碍方格。</li><li><code>.</code> 表示空地方格。</li><li><code>J</code> 表示乔所在的空地方格，最多只有一个。</li><li><code>F</code> 表示已经起火的空地方格。</li></ul><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行结果，一个整数表示逃离迷宫所需花费的最少时间，如果无法逃离迷宫，则输出 <code>IMPOSSIBLE</code>。</p><h5 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant T \leqslant 10$,<br>$1 \leqslant R,C \leqslant 1000$。</p><h5 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h5><p>$2$<br>$4$ $4$<br>####<br>#JF#<br>#..#<br>#..#<br>$3$ $3$<br>###<br>#J.<br>#.F</p><h5 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h5><p>$3$<br>IMPOSSIBLE</p></blockquote><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><blockquote><p>基于<b><font color="red">bfs思想</font></b>,先把火的蔓延情况跑一遍$bfs$,然后把人(注意考虑他到达边界的情况和他能走的情况必然在火蔓延之前,即$t_{人}+1 &lt; t_{火}$)的行走情况跑一遍$bfs$.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//火</span><span class="token keyword">int</span> Dist<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//人</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">></span> v<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>PII<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dist<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PII temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sx<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>sx<span class="token operator">==</span>n<span class="token operator">||</span>sy<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>sy<span class="token operator">==</span>m<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>PII<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dist<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PII temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>temp<span class="token punctuation">.</span>first<span class="token operator">==</span>n<span class="token operator">||</span>temp<span class="token punctuation">.</span>second<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>temp<span class="token punctuation">.</span>second<span class="token operator">==</span>m<span class="token punctuation">)</span>            <span class="token keyword">return</span> Dist<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>first<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>second<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>Dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.'</span><span class="token operator">&amp;&amp;</span>Dist<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>Dist<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>Dist<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Dist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'J'</span><span class="token punctuation">)</span>                    sx<span class="token operator">=</span>i<span class="token punctuation">,</span>sy<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'F'</span><span class="token punctuation">)</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//火</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IMPOSSIBLE"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="11-迷宫问题"><a href="#11-迷宫问题" class="headerlink" title="11. 迷宫问题"></a><a href="https://www.acwing.com/problem/content/description/1078/">11. 迷宫问题</a></h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定一个 $n \times n$ 的二维数组，如下所示：</p></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> maze<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>它表示一个迷宫，其中的$1$表示墙壁，$0$表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。<br>数据保证至少存在一条从左上角走到右下角的路径。</p><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含整数 $n$。<br>接下来 $n$ 行，每行包含 $n$ 个整数 $0$ 或 $1$，表示迷宫。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出从左上角到右下角的最短路线，如果答案不唯一，输出任意一条路径均可。<br>按顺序，每行输出一个路径中经过的单元格的坐标，左上角坐标为 $(0,0)$，右下角坐标为 $(n-1,n-1)$。</p><h5 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h5><p>$0 \leqslant n \leqslant 1000$</p><h5 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h5><p>$5$<br>$0$ $1$ $0$ $0$ $0$<br>$0$ $1$ $0$ $1$ $0$<br>$0$ $0$ $0$ $0$ $0$<br>$0$ $1$ $1$ $1$ $0$<br>$0$ $0$ $0$ $1$ $0$</p><h5 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h5><p>$0$ $0$<br>$1$ $0$<br>$2$ $0$<br>$2$ $1$<br>$2$ $2$<br>$2$ $3$<br>$2$ $4$<br>$3$ $4$<br>$4$ $4$</p></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><blockquote><p>基于<b><font color="red">bfs</font></b>的思想,这题主要考察的是<strong>输出路径</strong>,可采取<b><font color="blue">递归</font></b>实现路径的输出,用$xx$数组记录当前点的前驱结点的横坐标,用$yy$数组记录当前点的前驱结点的纵坐标,此题我下标是从(1,1)开始的,输出时坐标应为$(x-1,y-1)$.</p></blockquote><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> xx<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>yy<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>x<span class="token operator">==</span>n<span class="token operator">&amp;&amp;</span>temp<span class="token punctuation">.</span>y<span class="token operator">==</span>n<span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//cout &lt;&lt; dx &lt;&lt; " " &lt;&lt; dy &lt;&lt; endl;</span>                vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xx<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                yy<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_out</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">1</span><span class="token operator">||</span>y<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">pre_out</span><span class="token punctuation">(</span>xx<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>yy<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">,</span>y<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0 0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; res &lt;&lt; endl;</span>    <span class="token function">pre_out</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="12-石油储备"><a href="#12-石油储备" class="headerlink" title="12. 石油储备"></a><a href="https://www.acwing.com/problem/content/4228/">12. 石油储备</a></h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>一片土地可以看作是一个 $n$ 行 $m$ 列的方格矩阵。<br>其中一些方格藏有石油，用 <code>@</code> 表示，其余方格没有石油，用 <code>*</code> 表示。<br>每个方格都与其上、下、左、右、左上、右上、左下、右下八个方格视为相邻。<br>如果两个藏有石油的方格相邻，则它们被认为是处于同一片油田，否则它们被认为是处于不同油田。<br>请问，该土地中共有多少片油田。</p><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入包含多组测试数据。<br>每组数据第一行包含两个整数 $n,m$。<br>接下来 $n$ 行，包含一个 $n$ 行 $m$ 列的字符矩阵，表示土地情况。<br>当输入一行 <code>0 0</code> 时，表示输入结束。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行，一个整数，表示油田数量。</p><h5 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h5><p>最多包含 $100$ 组数据。<br>$1 \leqslant n,m \leqslant 100$。</p><h5 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h5><p>$1$ $1$<br>*<br>$3$ $5$<br>*@*@*<br>**@**<br>*@*@*<br>$1$ $8$<br>@@****@*<br>$5$ $5$<br>****@<br>*@@*@<br>*@**@<br>@@@*@<br>@@**@<br>$0$ $0$</p><h5 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h5><p>$0$<br>$1$<br>$2$<br>$2$</p></blockquote><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><blockquote><p>基于<b><font color="red">bfs</font></b>的思想,一次枚举没有标记的石油方格,枚举的次数即为答案.</p></blockquote><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="13-非常可乐"><a href="#13-非常可乐" class="headerlink" title="13. 非常可乐"></a><a href="https://www.acwing.com/problem/content/4229/">13. 非常可乐</a></h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>大家一定觉的运动以后喝可乐是一件很惬意的事情，但是 $seeyou$ 却不这么认为。<br>因为每次当 $seeyou$ 买了可乐以后，阿牛就要求和 $seeyou$ 一起分享这一瓶可乐，而且一定要喝的和 $seeyou$ 一样多。<br>但 $seeyou$ 的手中只有两个杯子，它们的容量分别是 $N$ 毫升和 $M$ 毫升。<br>可乐的体积为 $S$ （$S&lt;101$）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 $S=N+M,101＞S＞0，N＞0，M＞0$) 。<br>聪明的 $ACMER$ 你们说他们能平分吗？<br>如果能请输出倒可乐的最少的次数，如果不能输出 <code>NO</code>。</p><h5 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入包含多组测试数据。<br>每组数据一行，三个整数 $S,N,M$。<br>当输入一行为 <code>0 0 0</code> 时，表示输入结束。</p><h5 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行结果，如果能够平分，则输出倒可乐的最少的次数，否则输出 <code>NO</code>。</p><h5 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h5><p>$S=N+M，101＞S＞0，N＞0，M＞0$</p><h5 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h5><p>$7$ $4$ $3$<br>$4$ $1$ $3$<br>$0$ $0$ $0$</p><h5 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h5><p>NO<br>$3$</p></blockquote><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><blockquote><p>与罐子那题类似,无非就多一维的<b><font color="red">bfs</font></b>,注意从$i$倒入$j$,倒入的容积是$min(w[i],v[j]-w[j])$.<br>另给一种大佬的<b><font color="Orange">数论</font></b>做法<a href="https://www.acwing.com/solution/content/90865/">巨佬链接</a></p></blockquote><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> val<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>temp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>temp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    node tempp<span class="token operator">=</span>temp<span class="token punctuation">;</span>                    <span class="token keyword">int</span> minx<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从i->j倒</span>                    tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>minx<span class="token punctuation">,</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>minx<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//cout &lt;&lt; tempp.w[0] &lt;&lt; " " &lt;&lt; tempp.w[1] &lt;&lt; " " &lt;&lt; tempp.w[2] &lt;&lt; endl;</span>                        tempp<span class="token punctuation">.</span>step<span class="token operator">++</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        vis<span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tempp<span class="token punctuation">.</span>w<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>val<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="14-找路"><a href="#14-找路" class="headerlink" title="14. 找路"></a><a href="https://www.acwing.com/problem/content/4230/">14. 找路</a></h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定一个 $n$ 行 $m$ 列的方格矩阵。<br>其中有些方格是空地（可以进入），有些方格是餐厅（可以进入），有些方格是障碍（不可进入）。<br>开始时，小 $Y$ 和小 $M$ 各自位于一个空地方格中。<br>每个人都可以沿上下左右四个方向进行移动，移动一格距离需要花费 $11$ 分钟时间。<br>他们希望选择一家餐厅进行聚餐，要求两人从各自出发点到达该餐厅所花费的时间之和尽可能小。<br>输出这个最小时间和。</p><h5 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入包含多组测试数据。<br>每组数据第一行包含两个整数 $n,m$。<br>接下来 $n$ 行，包含一个 $n×m$ 的字符矩阵。<br>矩阵中只包含以下五种字符：</p><ul><li><code>#</code> 表示障碍方格。</li><li><code>.</code> 表示空地方格。</li><li><code>Y</code> 表示小 $Y$ 所在的空地方格，有且仅有一个。</li><li><code>M</code> 表示小 $M$ 所在的空地方格，有且仅有一个。</li><li><code>@</code> 表示餐厅。</li></ul><h5 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行答案，表示最小时间和。<br>保证一定有解。</p><h5 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h5><p>最多包含 $100$ 组数据。<br>$2 \leqslant n,m \leqslant 200$。</p><h5 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h5><p>$4$ $4$<br>Y.#@<br>….<br>.#..<br>@..M<br>$4$ $4$<br>Y.#@<br>….<br>.#..<br>@#.M<br>$5$ $5$<br>Y..@.<br>.#…<br>.#…<br>@..M.<br>#…#</p><h5 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h5><p>$66$<br>$88$<br>$66$</p></blockquote><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><blockquote><p>分别跑两个人的$bfs$,用$dist1$数组存储第一个人的行走情况,用$dist2$数组存储第二个人的行走情况,最后枚举所有的餐馆取$11 \times (dist1+dist2)$最小值即可.</p></blockquote><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 210</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> sx1<span class="token punctuation">,</span>sy1<span class="token punctuation">,</span>sx2<span class="token punctuation">,</span>sy2<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dist1<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>dist2<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>dist<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> sx<span class="token punctuation">,</span><span class="token keyword">int</span> sy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//memset(dist,0x3f,sizeof(dist));</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dist<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dist<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        vector<span class="token operator">&lt;</span>node<span class="token operator">></span> v<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Y'</span><span class="token punctuation">)</span>                    sx1<span class="token operator">=</span>i<span class="token punctuation">,</span>sy1<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'M'</span><span class="token punctuation">)</span>                    sx2<span class="token operator">=</span>i<span class="token punctuation">,</span>sy2<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'@'</span><span class="token punctuation">)</span>                    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>sx1<span class="token punctuation">,</span>sy1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//memcpy(dist1,dist,sizeof(dist));</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                dist1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span>sx2<span class="token punctuation">,</span>sy2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//memcpy(dist2,dist,sizeof(dist));</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                dist2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span>inf<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">11</span><span class="token operator">*</span><span class="token punctuation">(</span>dist1<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">+</span>dist2<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuangbin专题 </tag>
            
            <tag> 简单搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kuangbin专题一简单搜索(上)</title>
      <link href="/2022/05/24/kuangbin-zhuan-ti-yi-jian-dan-sou-suo-shang/"/>
      <url>/2022/05/24/kuangbin-zhuan-ti-yi-jian-dan-sou-suo-shang/</url>
      
        <content type="html"><![CDATA[<h2 id="注意此处提供了链接"><a href="#注意此处提供了链接" class="headerlink" title="注意此处提供了链接"></a>注意此处提供了链接</h2><p><a href="https://vjudge.csgrandeur.cn/article/371">kuangbin专题总</a><br><a href="https://vjudge.csgrandeur.cn/contest/65959">kuangbin专题1</a></p><h3 id="1-棋盘问题"><a href="#1-棋盘问题" class="headerlink" title="1. 棋盘问题"></a><a href="https://www.acwing.com/problem/content/1116/">1. 棋盘问题</a></h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。</li><li>要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放$k$个棋子的所有可行的摆放方案数目$C$。</li></ul><blockquote><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入含有多组测试数据.<br>每组数据的第一行是两个正整数$n,k$，用一个空格隔开，表示了将在一个$n∗n$的矩阵内描述棋盘，以及摆放棋子的数目。当为<code>-1 -1</code>时表示输入结束。<br>随后的$n$行描述了棋盘的形状：每行有$n$个字符，其中<code>#</code>表示棋盘区域，<code>.</code>表示空白区域（数据保证不出现多余的空白行或者空白列）。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>对于每一组数据，给出一行输出，输出摆放的方案数目$C$（数据保证 $C&lt;2^{31}$）。</p><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><p>$n \leqslant 8, k \leqslant n$</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><p>$2$ $1$<br>#.<br>.#<br>$4$ $4$<br>…#<br>..#.<br>.#..<br>#…<br>$-1$ $-1$</p><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><p>$2$<br>$1$</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>经典<b><font color="red">dfs</font></b>问题.</p><ul><li>方法一: 枚举<b><font color="Blue">每一个元素</font></b>,时间复杂度为$O(2^{n^2})$.</li><li>方法二: 枚举<b><font color="Orange">每一行(或每一列)</font></b>,时间复杂度为$O(n!)$.</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul><li>方法一 :枚举<b><font color="Blue">每一个元素</font></b></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> row<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>col<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>k<span class="token punctuation">)</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token operator">&amp;&amp;</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>        row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//恢复现场</span>        row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不选(x,y)的元素</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//memset(col,0,sizeof(col));</span>        <span class="token comment" spellcheck="true">//memset(row,0,sizeof(row));</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法二: 枚举<b><font color="Orange">每一行(或每一列)</font></b>.</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> col<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记该列是否使用</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//所有行都枚举完</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//且使用的次数刚好为k</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token operator">&amp;&amp;</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该点为棋盘元素,且没被访问过</span>            g<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">;</span>            col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选当前行,枚举下一行</span>            col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//恢复现场</span>            g<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前行不选</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//memset(col,0,sizeof(col));</span>        <span class="token comment" spellcheck="true">//此处col可以不用清0,由于dfs会恢复现场使得col数组最终为0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-地牢大师"><a href="#2-地牢大师" class="headerlink" title="2. 地牢大师"></a><a href="https://www.acwing.com/problem/content/1098/">2. 地牢大师</a></h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>你现在被困在一个三维地牢中，需要找到最快脱离的出路！<br>地牢由若干个单位立方体组成，其中部分不含岩石障碍可以直接通过，部分包含岩石障碍无法通过。<br>向北，向南，向东，向西，向上或向下移动一个单元距离均需要一分钟。<br>你不能沿对角线移动，迷宫边界都是坚硬的岩石，你不能走出边界范围。<br>请问，你有可能逃脱吗？<br>如果可以，需要多长时间？</p><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入包含多组测试数据。<br>每组数据第一行包含三个整数$L,R,C$分别表示地牢层数，以及每一层地牢的行数和列数。<br>接下来是$L$个$R$行$C$列的字符矩阵，用来表示每一层地牢的具体状况。<br>每个字符用来描述一个地牢单元的具体状况。<br>其中, 充满岩石障碍的单元格用<code>#</code>表示，不含障碍的空单元格用<code>.</code>表示，你的起始位置用<code>S</code>表示，终点用<code>E</code>表示。<br>每一个字符矩阵后面都会包含一个空行。<br>当输入一行为<code>0 0 0</code>时，表示输入终止。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一个结果，每个结果占一行。<br>如果能够逃脱地牢，则输出<code>Escaped in X minute(s).</code>，其中$X$为逃脱所需最短时间。<br>如果不能逃脱地牢，则输出<code>Trapped!</code>。</p><h5 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1\leqslant L,R,C \leqslant 100$</p><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h5><p>$3$ $4$ $5$<br>S….<br>.###.<br>.##..<br>###.#</p><p>#####<br>#####<br>##.##<br>##…</p><p>#####<br>#####<br>#.###<br>####E</p><p>$1$ $3$ $3$<br>S##<br>#E#<br>###</p><p>$0$ $0$ $0$</p><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h5><p>Escaped in 11 minute(s).<br>Trapped!</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p><b><font color="Red">三维bfs</font></b>,注意移动方向为上下前后左右$6$个方向.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高(z),长(x),宽(y)</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token number">1</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">1</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token number">0</span>  <span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>node start_<span class="token punctuation">,</span>end_<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start_<span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>start_<span class="token punctuation">.</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span>start_<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>start_<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>x<span class="token operator">==</span>end_<span class="token punctuation">.</span>x<span class="token operator">&amp;&amp;</span>temp<span class="token punctuation">.</span>y<span class="token operator">==</span>end_<span class="token punctuation">.</span>y<span class="token operator">&amp;&amp;</span>temp<span class="token punctuation">.</span>z<span class="token operator">==</span>end_<span class="token punctuation">.</span>z<span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dz<span class="token operator">=</span>temp<span class="token punctuation">.</span>z<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>dz<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dz<span class="token operator">&lt;=</span>h<span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>dz<span class="token punctuation">]</span><span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dz<span class="token punctuation">]</span><span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>dz<span class="token punctuation">]</span><span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">,</span>dz<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>h<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'S'</span><span class="token punctuation">)</span>                        start_<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'E'</span><span class="token punctuation">)</span>                        end_<span class="token operator">=</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Trapped!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Escaped in %d minute(s).\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-抓住那头牛"><a href="#3-抓住那头牛" class="headerlink" title="3. 抓住那头牛"></a><a href="https://www.acwing.com/problem/content/1102/">3. 抓住那头牛</a></h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>农夫知道一头牛的位置，想要抓住它。<br>农夫和牛都位于数轴上，农夫起始位于点$N$，牛位于点$K$。<br>农夫有两种移动方式：</p><ul><li>从 $X$ 移动到 $X−1$ 或 $X+1$，每次移动花费一分钟;</li><li>从 $X$ 移动到 $2∗X$，每次移动花费一分钟.<br>假设牛没有意识到农夫的行动，站在原地不动。<br>农夫最少要花多少时间才能抓住牛？</li></ul><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>共一行，包含两个整数$N$和$K$。</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数，表示抓到牛所花费的最少时间。</p><h5 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h5><p>$0 \leqslant N,K \leqslant 10^5$</p><h5 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h5><p>$5$ $17$</p><h5 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h5><p>$4$</p></blockquote><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">经典bfs</font></b>,一维搜索,此处可不用判断农夫与牛的位置关系.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>node start_<span class="token punctuation">,</span>end_<span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start_<span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>start_<span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>pos<span class="token operator">==</span>end_<span class="token punctuation">.</span>pos<span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>                dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>pos<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>pos<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                vis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start_<span class="token punctuation">.</span>pos<span class="token punctuation">,</span><span class="token operator">&amp;</span>end_<span class="token punctuation">.</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-翻转"><a href="#4-翻转" class="headerlink" title="4. 翻转"></a><a href="https://www.acwing.com/problem/content/4221/">4. 翻转</a></h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定一个 $M×N$ 的 $01$ 矩阵。<br>你需要选择其中一些元素，并对选择的元素进行翻转操作。<br>翻转操作是指将所选元素以及与其上下左右相邻的元素（如果有）进行翻转（$0$ 变 $1$，$1$ 变 $0$）。<br>我们希望最终矩阵变为一个全 $0$ 矩阵，并且选择进行翻转操作的元素数量尽可能少。<br>输出最佳翻转方案。</p><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含整数 $M,N$。<br>接下来 $M$ 行，每行包含 $N$ 个整数，每个整数为 $0$ 或 $1$。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>共 $M$ 行，每行包含 $N$ 个整数，其中第 $i$ 行第 $j$ 列的整数，表示第 $i$ 行第 $j$ 列元素的翻转次数。<br>如果翻转操作次数最少的操作方案不唯一，则输出字典序最小的方案。<br>如果不存在合理方案，则输出 <code>IMPOSSIBLE</code>。</p><h5 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant M,N \leqslant 15$</p><h5 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h5><p>$4$ $4$<br>$1$ $0$ $0$ $1$<br>$0$ $1$ $1$ $0$<br>$0$ $1$ $1$ $0$<br>$1$ $0$ $0$ $1$</p><h5 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h5><p>$0$ $0$ $0$ $0$<br>$1$ $0$ $0$ $1$<br>$1$ $0$ $0$ $1$<br>$0$ $0$ $0$ $0$</p></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p>思想同<a href="https://www.acwing.com/problem/content/97/">费解的开关</a>  <a href="https://www.acwing.com/activity/content/code/content/2876048/">费解的开关代码</a><br>先枚举第一行的所有状态(用二进制表示),然后逐层将当前位置$(x,y)$为$1$的将$(x+1,y)$进行翻转(避免后效性),最后判断最后一行是否均为0,满足条件更新最小翻转次数及翻转情况.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 20</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>res<span class="token operator">=</span>inf<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暂存原数组并对它进行修改</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> dx<span class="token operator">=</span>x<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>y<span class="token operator">+</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>m<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">^</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vis<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>state<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>state<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将该状态进行翻转</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token operator">>></span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token number">-2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;</span>res<span class="token operator">&amp;&amp;</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">=</span>cnt<span class="token punctuation">;</span>            <span class="token function">memcpy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>vis<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span>inf<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"IMPOSSIBLE\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-找倍数"><a href="#5-找倍数" class="headerlink" title="5. 找倍数"></a><a href="https://www.acwing.com/problem/content/4222/">5. 找倍数</a></h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定一个正整数$n$，请你找到一个它的非零倍数$m$。<br>要求$m$中只包含数字$0$或$1$，并且总位数不超过 $100$位。</p><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入包含多组测试数据。<br>每组数据占一行，包含一个正整数$n$。<br>当输入$n=0$时，表示输入结束。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行$m$。<br>如果方案不唯一，则输出任意合理方案均可。</p><h5 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant n \leqslant 200$</p><h5 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h5><p>$2$<br>$6$<br>$19$<br>$0$</p><h5 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h5><p>$10$<br>$100100100100100100$<br>$111111111111111111$</p></blockquote><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">bfs的思想</font></b>,初始让$1$放入队列,每次取出队头$x$,判断是否满足$x%n==0$,不满足将$10\times x$和$10 \times x+1$放入队列中.</p></blockquote><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>ll <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>ll<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="6-质数路径"><a href="#6-质数路径" class="headerlink" title="6. 质数路径"></a><a href="https://www.acwing.com/problem/content/4223/">6. 质数路径</a></h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定两个四位质数$A$和$B$，你需要通过最少的操作次数将$A$变为$B$。<br>每次操作只能改变当前数的其中一位数字，并且每次操作过后，当前数必须仍然是一个质数。<br>例如，将$1033$变为$8179$，最少需要进行$6$次操作，具体操作为：<br><code>1033 -&gt; 1733 -&gt; 3733 -&gt; 3739 -&gt; 3779 -&gt; 8779 -&gt; 8179</code><br>请计算并输出所需要的最少操作次数。</p><h5 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含整数$T$，表示共有$T$组测试数据。<br>每组数据占一行，包含两个四位质数$A$和$B$。</p><h5 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h5><p>每组数据输出一行答案，表示所需最少操作次数。<br>如果无法做到，则输出 <code>Impossible</code>。<br>经实际测试，不存在无解情况，特此声明。</p><h5 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant T \leqslant 100$.<br>$ 1000 \leqslant A,B \leqslant 9999$,保证$A$和$B$都是质数.</p><h5 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h5><p>$3$<br>$1033$ $8179$<br>$1373$ $8017$<br>$1033$ $1033$</p><h5 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h5><p>$6$<br>$7$<br>$0$</p></blockquote><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><blockquote><p>每一个数最多$9\times 4$的变化,利用<b><font color="Red">bfs</font></b>找出最短路径即可.</p></blockquote><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>start_<span class="token punctuation">,</span>end_<span class="token punctuation">;</span><span class="token keyword">int</span> primes<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>is_prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否为素数</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记搜索是否使用过</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//欧拉筛</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            primes<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            is_prime<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>vis<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>start_<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>start_<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>num<span class="token operator">==</span>end_<span class="token punctuation">)</span>            <span class="token keyword">return</span> temp<span class="token punctuation">.</span>step<span class="token punctuation">;</span>        <span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>temp<span class="token punctuation">.</span>num<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>num<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分别存储千位、百位、十位、个位</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempnum<span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//暂存该位</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tempnum<span class="token operator">!=</span>j<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改该位</span>                    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1000</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span>x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sum<span class="token operator">>=</span><span class="token number">1000</span><span class="token operator">&amp;&amp;</span>sum<span class="token operator">&lt;=</span><span class="token number">9999</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        vis<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sum<span class="token punctuation">,</span>temp<span class="token punctuation">.</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tempnum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复原该位</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">get_primes</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>start_<span class="token punctuation">,</span><span class="token operator">&amp;</span>end_<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="7-洗牌"><a href="#7-洗牌" class="headerlink" title="7. 洗牌"></a><a href="https://www.acwing.com/problem/content/4224/">7. 洗牌</a></h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><blockquote><p>给定两叠纸牌$S_1$和$S_2$，每叠恰好有$C$张牌。<br>每张牌的尺寸大小都完全相同，但是颜色可能不同。<br>下面介绍洗牌规则。<br>不妨设$S_1$中纸牌从上到下编号依次为 $a_1,a_2,…,a_C$，$S_2$ 中纸牌从上到下编号依次为$b_1,b_2,…,b_C$。<br>洗牌就是将这两叠牌交错堆叠在一起，形成一个拥有 $2C$张牌的新牌堆$S_{12}$。<br>新牌堆中的牌由上至下依次为 $a_1,b_1,a_2,b_2,…,a_C,b_C$。<br>可参考下图：<br><img src="https://s2.loli.net/2022/05/30/mlOcVzBLi9GnTDA.png"><br>然后，将牌堆从中间一分为二，下半部分是新的 $S_1$，上半部分是新的 $S_2$。<br>这样就可以继续进行洗牌操作获得新的$S_{12}$了。<br>给定$S_1$和$S_2$，请问至少需要进行多少轮洗牌操作方可获得指定牌堆$S_{12}$。</p><h5 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含一个整数$T$，表示共有$T$组测试数据。<br>每组数据第一行包含一个整数$C$。<br>第二行包含一个长度为$C$的由大写字母构成的字符串，其中第$i$个字母表示初始$S_1$中由底向上第$i$张牌的颜色。<br>第三行包含一个长度为$C$的由大写字母构成的字符串，其中第$i$个字母表示初始$S_2$中由底向上第$i$张牌的颜色。<br>第四行包含一个长度为$2C$的由大写字母构成的字符串，其中第$i$个字母表示目标$S_{12}$中由底向上第$i$张牌的颜色。</p><h5 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h5><p>共$T$行，每行输出一组数据的结果，首先输出组别编号$i$（从$1$开始），然后输出所需要的最少洗牌次数。如果无法通过洗牌获得目标牌堆，则输出$−1$。</p><h5 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h5><p>$1 \leqslant T \leqslant 1000$,<br>$1 \leqslant C \leqslant 100$.<br>卡牌最多有$8$种颜色，用大写字母$A∼H$表示，所以输入字符串中不会出现其他大写字母。</p><h5 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h5><p>$2$<br>$4$<br>$AHAH$<br>$HAHA$<br>$HHAAAAHH$<br>$3$<br>$CDE$<br>$CDE$<br>$EEDDCC$</p><h5 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h5><p>$1$ $2$<br>$2$ $-1$</p></blockquote><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><p>此题为<b><font color="Red">模拟+bfs(可不用bfs)</font></b>,最多枚举$2C$次模拟操作,就可以知道能否得到该字符串.</p><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">,</span>cas<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>string s1<span class="token punctuation">,</span>s2<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        temp<span class="token operator">+</span><span class="token operator">=</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token operator">=</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string t<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>res<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>cas<span class="token operator">++</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        string now<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            now<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>now<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mp<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d -1\n"</span><span class="token punctuation">,</span>cas<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> s1 <span class="token operator">>></span> s2 <span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuangbin专题 </tag>
            
            <tag> 简单搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces-1673补题</title>
      <link href="/2022/05/14/codeforces-1673-bu-ti/"/>
      <url>/2022/05/14/codeforces-1673-bu-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="A-Subtle-Substring-Subtraction"><a href="#A-Subtle-Substring-Subtraction" class="headerlink" title="A - Subtle Substring Subtraction"></a><a href="https://codeforces.com/problemset/problem/1673/A">A - Subtle Substring Subtraction</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="B-A-Perfectly-Balanced-String"><a href="#B-A-Perfectly-Balanced-String" class="headerlink" title="B - A Perfectly Balanced String?"></a><a href="https://codeforces.com/problemset/problem/1673/B">B - A Perfectly Balanced String?</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="C-Palindrome-Basis"><a href="#C-Palindrome-Basis" class="headerlink" title="C - Palindrome Basis"></a><a href="https://codeforces.com/problemset/problem/1673/C">C - Palindrome Basis</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="D-Lost-Arithmetic-Progression"><a href="#D-Lost-Arithmetic-Progression" class="headerlink" title="D - Lost Arithmetic Progression"></a><a href="https://codeforces.com/problemset/problem/1673/D">D - Lost Arithmetic Progression</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="E-Power-or-XOR"><a href="#E-Power-or-XOR" class="headerlink" title="E - Power or XOR?"></a><a href="https://codeforces.com/problemset/problem/1673/E">E - Power or XOR?</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="F-Anti-Theft-Road-Planning"><a href="#F-Anti-Theft-Road-Planning" class="headerlink" title="F - Anti-Theft Road Planning"></a><a href="https://codeforces.com/problemset/problem/1673/F">F - Anti-Theft Road Planning</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
            <tag> CodeForces(cf) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验六T-SQL语句的编程</title>
      <link href="/2022/05/13/shu-ju-ku-sqlserver-shi-yan-liu-t-sql-yu-ju-de-bian-cheng/"/>
      <url>/2022/05/13/shu-ju-ku-sqlserver-shi-yan-liu-t-sql-yu-ju-de-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h4><ul><li>掌握程序中的批处理、脚本和注释的基本概念和使用方法;</li><li>掌握流程控制语句的基本语法;</li><li>能够熟练使用这些流程控制语句;</li><li>熟练掌握$SQL$ $Server$用户定义函数的创建方法;</li><li>掌握创建触发器的方法;</li><li>掌握创建存储过程的方法.</li></ul><h4 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h4><ul><li>在示例数据库的学生基本信息表上如果存在出生时间在$1995$年以前的学生,给出这些学生的列表.否则给出一条提示信息,说明没有满足条件的学生.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--由于建表无出生年份,另建一个视图</span><span class="token keyword">create</span> <span class="token keyword">view</span> studentbase<span class="token keyword">as</span><span class="token keyword">select</span> Sno<span class="token punctuation">,</span>Sname<span class="token punctuation">,</span>Ssex<span class="token punctuation">,</span>Sage<span class="token punctuation">,</span>Sdept<span class="token punctuation">,</span><span class="token number">2022</span><span class="token operator">-</span>Sage 出生年份 <span class="token keyword">from</span> Student<span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> studentbase <span class="token keyword">where</span> 出生年份<span class="token operator">&lt;</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> studentbase <span class="token keyword">where</span> 出生年份<span class="token operator">&lt;</span><span class="token number">1995</span><span class="token keyword">end</span><span class="token keyword">else</span>     <span class="token keyword">print</span> <span class="token string">'无满足条件的学生'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显示所有系别为<code>计算机</code>的学生信息,并且在显示之前,暂停$1$分钟.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">waitfor</span> delay <span class="token string">'00:01:00'</span>    <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> studentbase <span class="token keyword">where</span> Sdept<span class="token operator">=</span><span class="token string">'计算机'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>创建一个函数,可以按学号查询学生选修课的平均成绩,如果不及格,显示其学号,姓名,并输出<code>该同学平均成绩不及格</code>,否则输出<code>全部通过</code></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> cj<span class="token punctuation">(</span><span class="token variable">@s_no</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">float</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> <span class="token variable">@x</span> <span class="token keyword">float</span><span class="token punctuation">,</span><span class="token variable">@name</span> char<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token variable">@x</span><span class="token operator">=</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> sc <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token variable">@s_no</span>    <span class="token keyword">select</span> <span class="token variable">@name</span><span class="token operator">=</span>sname <span class="token keyword">from</span> student <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token variable">@s_no</span>    <span class="token keyword">return</span> <span class="token variable">@x</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">--举例</span><span class="token keyword">if</span> dbo<span class="token punctuation">.</span>cj<span class="token punctuation">(</span><span class="token string">'202001008'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">60</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> sno<span class="token punctuation">,</span>sname <span class="token keyword">from</span> Student <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'202001008'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该同学平均成绩不及格'</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'全部通过'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建一个触发器，当对学生表执行$UPDATE$操作时,该触发器被触发,不允许修改学生表中的学号.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> update_sno <span class="token keyword">on</span> student<span class="token keyword">for</span> <span class="token keyword">update</span><span class="token keyword">as</span><span class="token keyword">begin</span>    <span class="token keyword">if</span> <span class="token keyword">update</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不允许修改学生表中的学号'</span><span class="token punctuation">)</span>        <span class="token keyword">rollback</span> <span class="token keyword">transaction</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">--举例</span><span class="token keyword">update</span> student <span class="token keyword">set</span> sno<span class="token operator">=</span><span class="token string">'95001'</span> <span class="token keyword">where</span> sno<span class="token operator">=</span><span class="token string">'202001008'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建一个存储过程,它带有一个输入参数,用于接受学号,显示该学生的姓名、选修课的课程名、成绩.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">proc</span> p1<span class="token punctuation">(</span><span class="token variable">@s_no</span> char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">begin</span>    <span class="token keyword">select</span> sname<span class="token punctuation">,</span>cname<span class="token punctuation">,</span>grade <span class="token keyword">from</span> Student<span class="token punctuation">,</span>Course<span class="token punctuation">,</span>SC <span class="token keyword">where</span> sc<span class="token punctuation">.</span>Cno<span class="token operator">=</span>Course<span class="token punctuation">.</span>Cno <span class="token operator">and</span> sc<span class="token punctuation">.</span>Sno<span class="token operator">=</span>Student<span class="token punctuation">.</span>Sno <span class="token operator">and</span> sc<span class="token punctuation">.</span>sno<span class="token operator">=</span><span class="token variable">@s_no</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">--举例</span><span class="token keyword">exec</span> p1 <span class="token string">'202001001'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验9</title>
      <link href="/2022/05/11/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-9/"/>
      <url>/2022/05/11/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-9/</url>
      
        <content type="html"><![CDATA[<h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><ul><li>可以将条目输出到文件中。可以从文件读取数据</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//int displaymenu();</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntryfile</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntryfile</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comms</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Comms</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> maxnum<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>maxnum<span class="token punctuation">;</span>        Count<span class="token operator">=</span>num<span class="token punctuation">;</span>        pCe<span class="token operator">=</span><span class="token keyword">new</span> CommEntry<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Comms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>pCe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputAllfile</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputAllfile</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    CommEntry<span class="token operator">&amp;</span> <span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    CommEntry <span class="token operator">*</span>pCe<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCount<span class="token punctuation">;</span>    <span class="token keyword">int</span> Count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.查找通讯录姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录指定名字的电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.输出到文件"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         6.从文件中读取数据"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-6):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0-6):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntryfile</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    in <span class="token operator">>></span> temp_name <span class="token operator">>></span> temp_tel <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntryfile</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">{</span>    out <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  电话:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  地址:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>CommEntry<span class="token operator">&amp;</span> Comms<span class="token operator">::</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> pCe<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找不到该姓名</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人,无法修改!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">inputAllfile</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; "***第" &lt;&lt; i &lt;&lt; "个通讯录条目***" &lt;&lt; endl;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inputcommEntryfile</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">outputAllfile</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        out <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outputcommEntryfile</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"名字:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span><span class="token string">"电话:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"地址:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入通讯录的总人数:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    Comms data<span class="token operator">=</span><span class="token function">Comms</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查找的姓名:  "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            <span class="token keyword">int</span> pos<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的名字:  "</span> <span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ofstream file1<span class="token punctuation">;</span>            file1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"record.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">outputAllfile</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>            file1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ifstream file1<span class="token punctuation">;</span>            string file_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入读入文件名:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> file_name<span class="token punctuation">;</span>            file1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">inputAllfile</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验6</title>
      <link href="/2022/05/11/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-6/"/>
      <url>/2022/05/11/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-6/</url>
      
        <content type="html"><![CDATA[<h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><ul><li>重载运算符<code>&lt;&lt;</code>,<code>&gt;&gt;</code>.使得其可用于$CommEntry$.</li><li>技术要点：<br>（1）为了方便，用全局运算符重载。<br>（2）为能访问类中的私有成员，可定义为友元函数。在$CommEntry$的类声明文件中声明：<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 函数访问非$public$成员时，必为友元</span> <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> CommEntry<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> CommEntry<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>（3）在$CommEntry$的类定义文件中定义全局函数：</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//--operater overloading</span>    istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span> istream<span class="token operator">&amp;</span> in<span class="token punctuation">,</span> CommEntry<span class="token operator">&amp;</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// …</span>    <span class="token punctuation">}</span>    ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span> ostream<span class="token operator">&amp;</span> out<span class="token punctuation">,</span> CommEntry<span class="token operator">&amp;</span> c <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//…</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4)使用</p><pre class="line-numbers language-cpp"><code class="language-cpp">    CommEntry ce<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//… …</span>    cin<span class="token operator">>></span>ce<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ce<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//int displaymenu();</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span>CommEntry <span class="token operator">&amp;</span>ce<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>out<span class="token punctuation">,</span>CommEntry <span class="token operator">&amp;</span>ce<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comms</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Comms</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> maxnum<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>maxnum<span class="token punctuation">;</span>        Count<span class="token operator">=</span>num<span class="token punctuation">;</span>        pCe<span class="token operator">=</span><span class="token keyword">new</span> CommEntry<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Comms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>pCe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CommEntry<span class="token operator">&amp;</span> <span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    CommEntry <span class="token operator">*</span>pCe<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCount<span class="token punctuation">;</span>    <span class="token keyword">int</span> Count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.查找通讯录姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录指定名字的电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-4):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0-4):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>in<span class="token punctuation">,</span>CommEntry <span class="token operator">&amp;</span>ce<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入通讯录的姓名,电话和地址(中间用空格隔开):  "</span><span class="token punctuation">;</span>    in <span class="token operator">>></span> ce<span class="token punctuation">.</span>name <span class="token operator">>></span> ce<span class="token punctuation">.</span>tel <span class="token operator">>></span> ce<span class="token punctuation">.</span>addr<span class="token punctuation">;</span>    <span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">}</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span>out<span class="token punctuation">,</span>CommEntry <span class="token operator">&amp;</span>ce<span class="token punctuation">)</span><span class="token punctuation">{</span>    out <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名:  "</span> <span class="token operator">&lt;&lt;</span> ce<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"  电话:  "</span> <span class="token operator">&lt;&lt;</span> ce<span class="token punctuation">.</span>tel <span class="token operator">&lt;&lt;</span> <span class="token string">"  地址:  "</span> <span class="token operator">&lt;&lt;</span> ce<span class="token punctuation">.</span>addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span>CommEntry<span class="token operator">&amp;</span> Comms<span class="token operator">::</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> pCe<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找不到该姓名</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人,无法修改!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入通讯录的总人数:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    Comms data<span class="token operator">=</span><span class="token function">Comms</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查找的姓名:  "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            <span class="token keyword">int</span> pos<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">.</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的名字:  "</span> <span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验五数据库安全性、完整性控制</title>
      <link href="/2022/05/06/shu-ju-ku-sqlserver-shi-yan-wu-shu-ju-ku-an-quan-xing-wan-zheng-xing-kong-zhi/"/>
      <url>/2022/05/06/shu-ju-ku-sqlserver-shi-yan-wu-shu-ju-ku-an-quan-xing-wan-zheng-xing-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul><li>掌握如何对数据库和表进行安全性、完整性控制</li></ul><h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><ul><li>在示例数据库建立多个用户$u1,u2$,赋予$u1$查看和删除$student$表的权限,授予$u2$查看数学系学生视图的权限,然后验证它们是否具有真正的权限.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 分别执行</span>sp_addlogin <span class="token string">'u1'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">,</span>Stusp_addlogin <span class="token string">'u2'</span><span class="token punctuation">,</span><span class="token string">'147'</span><span class="token punctuation">,</span>Stusp_grantdbaccess u1sp_grantdbaccess u2<span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">delete</span><span class="token keyword">on</span> student<span class="token keyword">To</span> u1<span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token keyword">on</span>  Math_Student<span class="token keyword">to</span> u2<span class="token comment" spellcheck="true">-- 验证过程略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>给示例数据库中每个表建立主码;相关的表建立外码;在每个表的部分列上建立$CHECK$约束.</p></li><li><p>过程略(此过程一般在建表时就需要设置).</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验10</title>
      <link href="/2022/05/04/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-10/"/>
      <url>/2022/05/04/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-10/</url>
      
        <content type="html"><![CDATA[<h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><ul><li>掌握用成员函数重载运算符的方法;</li><li>掌握用友元函数重载运算符的方法.</li></ul><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h4><ul><li>定义一个复数类,描述一些必须的成员函数,如:构造函数,析构函数,赋值函数,返回数据成员值的函数等;</li><li>定义运算符重载函数,通过重载运算符:<code>+,-,*,/</code>,直接实现二个复数之间的加减乘除运算.编写一个完整的程序,测试重载运算符的正确性.要求加法和乘法<code>"+","*"</code>用友元函数实现重载,减法和除法<code>"-"，"/"</code>用成员函数实现重载,参数是复数或实数;</li><li>通过重载运算符：<code>&gt;&gt;,&lt;&lt;,=</code>,直接实现复数的输入、输出及赋值运算,通过重载运算符:<code>==,!=</code>直接实现复数的比较运算,编写一个完整的程序,测试重载运算符的正确性.</li></ul><p>操作菜单可参考如下格式:</p><pre class="line-numbers language-Markdown"><code class="language-Markdown">1. 输入复数2. 查看输入的复数3. 复数相加4. 复数相减5. 复数相乘6. 复数相除7. 输出结果0. 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">{</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">double</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            real<span class="token operator">=</span>r<span class="token punctuation">;</span>            image<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">~</span><span class="token function">Complex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> <span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> <span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//友元+</span>        <span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//友元*</span>        Complex <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员函数-</span>        Complex <span class="token keyword">operator</span><span class="token operator">/</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员函数/</span>        <span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span>in<span class="token punctuation">,</span>Complex<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入</span>        <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span>out<span class="token punctuation">,</span>Complex<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出</span>        Complex <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//赋值</span>        <span class="token keyword">friend</span> <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相等</span>        <span class="token keyword">friend</span> <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不等</span>        <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">double</span> real<span class="token punctuation">;</span>        <span class="token keyword">double</span> image<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">double</span> Complex<span class="token operator">::</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> real<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> Complex<span class="token operator">::</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> image<span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>C1<span class="token punctuation">.</span>real<span class="token operator">+</span>C2<span class="token punctuation">.</span>real<span class="token punctuation">,</span>C1<span class="token punctuation">.</span>image<span class="token operator">+</span>C2<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//(a+bi)(c+di)=ac+(bc+ad)i+bdi^2=(ac-bd)+(bc+ad)i</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>C1<span class="token punctuation">.</span>real<span class="token operator">*</span>C2<span class="token punctuation">.</span>real<span class="token operator">-</span>C1<span class="token punctuation">.</span>image<span class="token operator">*</span>C2<span class="token punctuation">.</span>image<span class="token punctuation">,</span>C1<span class="token punctuation">.</span>real<span class="token operator">*</span>C2<span class="token punctuation">.</span>image<span class="token operator">+</span>C1<span class="token punctuation">.</span>image<span class="token operator">*</span>C2<span class="token punctuation">.</span>real<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">/</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*Markdown语法    $\frac{a+bi}{c+di}=\frac{(a+bi)(c-di)}{(c+di)(c-di)}$    $=\frac{ac-adi+bci-bdi^2}{c^2-d^2\times i^2}$    $=\frac{(ac+bd)+(bc-ad)i}{c^2+d^2}$    */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"操作失败,分母不为0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> r<span class="token operator">=</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> i<span class="token operator">=</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> fenmu<span class="token operator">=</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>C1<span class="token punctuation">.</span><span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>r<span class="token operator">/</span>fenmu<span class="token punctuation">,</span>i<span class="token operator">/</span>fenmu<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span>in<span class="token punctuation">,</span>Complex<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入复数的实部和虚部(中间用空格隔开):  "</span><span class="token punctuation">;</span>    in <span class="token operator">>></span> c<span class="token punctuation">.</span>real  <span class="token operator">>></span> c<span class="token punctuation">.</span>image <span class="token punctuation">;</span>    <span class="token keyword">return</span> in<span class="token punctuation">;</span><span class="token punctuation">}</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span>out<span class="token punctuation">,</span>Complex<span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>    out <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>real <span class="token operator">&lt;&lt;</span> <span class="token string">'+'</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>image <span class="token operator">&lt;&lt;</span> <span class="token string">'i'</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> out<span class="token punctuation">;</span><span class="token punctuation">}</span>Complex Complex<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>real<span class="token operator">=</span>C1<span class="token punctuation">.</span>real<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>image<span class="token operator">=</span>C1<span class="token punctuation">.</span>image<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>C1<span class="token punctuation">.</span>real<span class="token operator">==</span>C2<span class="token punctuation">.</span>real<span class="token operator">&amp;&amp;</span>C1<span class="token punctuation">.</span>image<span class="token operator">==</span>C2<span class="token punctuation">.</span>image<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>C1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>C2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>C1<span class="token punctuation">.</span>real<span class="token operator">!=</span>C2<span class="token punctuation">.</span>real<span class="token operator">||</span>C1<span class="token punctuation">.</span>image<span class="token operator">!=</span>C2<span class="token punctuation">.</span>image<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Complex<span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_real</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'+'</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_image</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'i'</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入复数"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.查看输入的复数"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.复数相加"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.复数相减"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.复数相乘"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         6.复数相除"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         7.复数判断相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         8.复数判断相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         9.输出结果"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-9):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,9):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Complex C<span class="token punctuation">,</span>res<span class="token punctuation">,</span>temp1<span class="token punctuation">,</span>temp2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> C<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> C <span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            res<span class="token operator">=</span>temp1<span class="token operator">+</span>temp2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            res<span class="token operator">=</span>temp1<span class="token operator">-</span>temp2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            res<span class="token operator">=</span>temp1<span class="token operator">*</span>temp2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            res<span class="token operator">=</span>temp1<span class="token operator">/</span>temp2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">==</span>temp2<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两复数相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两复数不等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> temp1 <span class="token operator">>></span> temp2<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp1<span class="token operator">!=</span>temp2<span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两复数不等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两复数相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结果为:  "</span> <span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021江苏省大学生程序设计大赛补题</title>
      <link href="/2022/04/30/2021-jiang-su-sheng-da-xue-sheng-cheng-xu-she-ji-da-sai-bu-ti/"/>
      <url>/2022/04/30/2021-jiang-su-sheng-da-xue-sheng-cheng-xu-she-ji-da-sai-bu-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/103495">官方题目集</a><br><a href="https://codeforces.com/gym/103495/attachments/download/15251/2021JSCPC_Tutorial.pdf">官方题解</a></p><p>大致<b><font color="Red">难易程度</font></b>补题.</p><h3 id="A-Spring-Couplets"><a href="#A-Spring-Couplets" class="headerlink" title="A - Spring Couplets"></a><a href="https://codeforces.com/gym/103495/problem/A">A - Spring Couplets</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="I-Fake-Walsh-Transform"><a href="#I-Fake-Walsh-Transform" class="headerlink" title="I - Fake Walsh Transform"></a><a href="https://codeforces.com/gym/103495/problem/I">I - Fake Walsh Transform</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="K-Longest-Continuous-1"><a href="#K-Longest-Continuous-1" class="headerlink" title="K - Longest Continuous 1"></a><a href="https://codeforces.com/gym/103495/problem/K">K - Longest Continuous 1</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="C-Magical-Rearrangement"><a href="#C-Magical-Rearrangement" class="headerlink" title="C - Magical Rearrangement"></a><a href="https://codeforces.com/gym/103495/problem/C">C - Magical Rearrangement</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="H-Reverse-the-String"><a href="#H-Reverse-the-String" class="headerlink" title="H - Reverse the String"></a><a href="https://codeforces.com/gym/103495/problem/H">H - Reverse the String</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="D-Pattern-Lock"><a href="#D-Pattern-Lock" class="headerlink" title="D - Pattern Lock"></a><a href="https://codeforces.com/gym/103495/problem/D">D - Pattern Lock</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021ccpc </tag>
            
            <tag> 补题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验四视图</title>
      <link href="/2022/04/29/shu-ju-ku-sqlserver-shi-yan-si-shi-tu/"/>
      <url>/2022/04/29/shu-ju-ku-sqlserver-shi-yan-si-shi-tu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul><li>熟练掌握$sql$的应用;</li><li>掌握$sql$视图建立和删除;</li><li>掌握$sql$视图查询.</li></ul><h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><h4 id="1-定义视图"><a href="#1-定义视图" class="headerlink" title="(1).定义视图"></a>(1).定义视图</h4><h5 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h5><ul><li>建立数学系学生的视图</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">create view Math_Studentasselect Sno 学号,Sname 姓名,Sage 年龄,Ssex 性别 from Studentwhere Sdept='数学'--先执行上面语句,再执行最后语句select * from Math_Student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立学生的学号$(Sno)$、姓名$(Sname)$、选修课程名$(Cname)$及成绩$(Grade)$的视图.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">create view Student_Gradeasselect Sc.Sno 学号,Sname 姓名,Cname 课程名,Grade 成绩 from Student,Course,Scwhere Student.Sno=Sc.Sno and Course.Cno=Sc.cno--先执行上面语句,再执行最后语句select * from Student_Grade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定义一个反映学生出生年份的视图.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">create view Birth_yearasselect Sno 学号,Sname 姓名,DateName(year,GetDate())-Sage 出生年份 from Student--先执行上面语句,再执行最后语句select * from Birth_year<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><ul><li>删除反映学生出生年份的视图.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">drop view Birth_year<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-查询视图"><a href="#2-查询视图" class="headerlink" title="(2).查询视图"></a>(2).查询视图</h4><ul><li>在数学系的学生视图中找出年龄$(Sage)$小于$20$岁的学生姓名$(Sname)$和年龄$(Sage)$.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">select 姓名,年龄 from Math_Studentwhere 年龄<20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在创建的第二个视图中查询成绩在$85$分以上的学生学号$(Sno)$、姓名$(Sname)$和课程名称$(Cname)$.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">select 学号,姓名,课程名 from Student_Gradewhere 成绩>=85<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验8</title>
      <link href="/2022/04/27/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-8/"/>
      <url>/2022/04/27/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-8/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><p>通讯录是由通讯录条目组成的;通讯录总条目数,通讯录中现有多少条.可以输入通讯录、可以输出通讯录、可以查找、修改.其中的通讯录条目可以是一般条目,也可以是朋友条目.</p><p><img src="https://s2.loli.net/2022/04/27/TFUBlNAe8ogz5LI.png"></p><p>要求：</p><pre class="line-numbers language-Markdown"><code class="language-Markdown">1.输入通讯录2.输出通讯录3.查找姓名4.修改(输入姓名，修改其电话)0.退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p>(1). 指针数组.数组中的每一个元素是一个指针,可以指向一般条目的对象,也可以指向朋友条目的对象.<br><img src="https://s2.loli.net/2022/04/27/vGM5cigOmol4WEN.png"></p><h5 id="指针数组的声明："><a href="#指针数组的声明：" class="headerlink" title="指针数组的声明："></a>指针数组的声明：</h5><pre class="line-numbers language-cpp"><code class="language-cpp">CommEntry <span class="token operator">*</span><span class="token operator">*</span> pCes<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="申请内存："><a href="#申请内存：" class="headerlink" title="申请内存："></a>申请内存：</h5><pre class="line-numbers language-cpp"><code class="language-cpp">    pCes <span class="token operator">=</span> <span class="token keyword">new</span> CommEntry <span class="token operator">*</span> <span class="token punctuation">[</span>maxCount<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="回收内存："><a href="#回收内存：" class="headerlink" title="回收内存："></a>回收内存：</h5><pre class="line-numbers language-cpp"><code class="language-cpp">   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   <span class="token keyword">delete</span> pCes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>pCes<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="元素的使用"><a href="#元素的使用" class="headerlink" title="元素的使用:"></a>元素的使用:</h5><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">if</span> <span class="token punctuation">(</span>iType<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pCes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> CommEntry<span class="token punctuation">;</span>               <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>iType <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pCes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> FriendEntry<span class="token punctuation">;</span>               <span class="token punctuation">}</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//注意，下一行是多态函数的调用</span>      <span class="token punctuation">(</span>pCes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2). 多态的使用</p><p>1.输出通讯录时,根据据条目的实际类型(一般或是朋友)输出条目内容.提示:使用多态.<br>2.在输入通讯录时,根据据用户的要求创建通迅目的管理条目数.<br>3.（选做）写一个成员函数,分开显示朋友条目与一般条目.提示:使用RTTI技术.</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FriendEntry</span><span class="token operator">:</span><span class="token keyword">public</span> CommEntry<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> CommEntry<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录/朋友条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录/朋友条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.查询通讯录/朋友条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录/朋友条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-4):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,4):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string FriendEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    string temp_addr<span class="token operator">=</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp_addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span>type<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入通讯录条目的管理条目个数和通讯录的类型(1为普通通讯录,2为朋友通讯录): "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num <span class="token operator">>></span> type<span class="token punctuation">;</span>    CommEntry <span class="token operator">*</span><span class="token operator">*</span> data<span class="token punctuation">;</span>    data<span class="token operator">=</span><span class="token keyword">new</span> CommEntry <span class="token operator">*</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> CommEntry<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> FriendEntry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个人的信息:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个人的信息:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要查找的通讯录/朋友条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>temp_name<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查找失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token punctuation">,</span>temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录/朋友条目的姓名和即将修改的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>temp_name<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"修改电话成功"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>                    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"修改电话失败"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">delete</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>data<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021ccpc桂林站补题</title>
      <link href="/2022/04/23/2021ccpc-gui-lin-zhan-bu-ti/"/>
      <url>/2022/04/23/2021ccpc-gui-lin-zhan-bu-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/103409">官方题目集</a><br><a href="https://upload-file.xcpcio.com/ccpc/7th/2021CCPC%E6%A1%82%E6%9E%97%E6%AD%A3%E5%BC%8F%E8%B5%9B%E9%A2%98%E8%A7%A3.pdf">官方题解</a></p><p>大致<b><font color="Red">难易程度</font></b>补题.</p><h3 id="A-A-Hero-Named-Magnus"><a href="#A-A-Hero-Named-Magnus" class="headerlink" title="A - A Hero Named Magnus"></a><a href="https://codeforces.com/gym/103409/problem/A">A - A Hero Named Magnus</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><blockquote><p>如果选择$ban$掉猛犸,这一把赢的可能性为$1$,否则赢的可能性是$50$%(已知作者不打<strong>英雄联盟</strong>).<br>给定比赛中第$x$次$ban$掉猛犸,问最坏需要打多少场才能获得胜利.</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>结果为$2 \times x-1$,在$x$场之前的比分为$0:x-1$,在此之后都是必赢,即需要再打$x$次比赛能获得胜利.<br>注意开$long$ $long$.</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>ll n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token number">-1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="I-PTSD"><a href="#I-PTSD" class="headerlink" title="I - PTSD"></a><a href="https://codeforces.com/gym/103409/problem/I">I - PTSD</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定$n$个士兵,从$1,2,…,n$编号,每个士兵$i$有权值为$i$,给定一个$01$序列,表示每个是否存在$PTSD$疾病.<br>将这些分为几组,同一组内如果存在比存在$PTSD$疾病权值更大的士兵,则他会感到失望.求最大化分组后各组失望士兵的权值和更大.</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">贪心</font></b>,要使满足条件的权值和最大,要让失望的士兵分布在尽可能多的组,因此考虑两两配对.用$cnt$变量存储当前未配对的士兵,按照权值从大到小枚举,如果当前士兵存在$PTSD$疾病且$cnt&gt;0$,则进行分在一组,否则$cnt+1$,同理没有$PTSD$的士兵直接$cnt+1$即可.</p></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1000010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> res<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res<span class="token operator">=</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                    cnt<span class="token operator">--</span><span class="token punctuation">,</span>res<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">else</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="G-Occupy-the-Cities"><a href="#G-Occupy-the-Cities" class="headerlink" title="G - Occupy the Cities"></a><a href="https://codeforces.com/gym/103409/problem/G">G - Occupy the Cities</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="D-Assumption-is-All-You-Need"><a href="#D-Assumption-is-All-You-Need" class="headerlink" title="D - Assumption is All You Need"></a><a href="https://codeforces.com/gym/103409/problem/D">D - Assumption is All You Need</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><hr><h3 id="E-Buy-and-Delete"><a href="#E-Buy-and-Delete" class="headerlink" title="E - Buy and Delete"></a><a href="https://codeforces.com/gym/103409/problem/E">E - Buy and Delete</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021ccpc </tag>
            
            <tag> 补题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验三多表查询和子查询</title>
      <link href="/2022/04/22/shu-ju-ku-sqlserver-shi-yan-san-duo-biao-cha-xun-he-zi-cha-xun/"/>
      <url>/2022/04/22/shu-ju-ku-sqlserver-shi-yan-san-duo-biao-cha-xun-he-zi-cha-xun/</url>
      
        <content type="html"><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul><li>了解查询的概念和方法;</li><li>掌握查询分析器的使用方法;</li><li>掌握$SELECT$语句在单表查询中的应用;</li><li>掌握复杂查询的使用方法;</li><li>掌握多表连接的方法;</li><li>掌握$SELECT$语句在多表查询中的应用;</li><li>掌握子查询语句.</li></ul><h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><h4 id="1-多表查询"><a href="#1-多表查询" class="headerlink" title="(1).多表查询"></a>(1).多表查询</h4><ul><li><p>数据库的各个表中存放着不同的数据,用户经常需要用多个表中的数据来组合提炼出所需要的信息,如果一个查询需要对多个表进行操作,就称为联表查询,联表查询的结果集或结果表称为表之间的连接.联表查询实际上是通过各各表之间共同列的关联来查询数据的,它是关系数据库查询最基本的特征.</p></li><li><p>按照下表所示,分别在数据库$test$中构造$student$、$course$和$student_course$三张表,并写入记录.</p></li><li><p>$Student$表</p></li></ul><table><thead><tr><th align="center">列名称</th><th align="center">类型</th><th align="center">宽度</th><th align="center">允许为空</th><th align="center">缺省值</th><th align="center">主键</th></tr></thead><tbody><tr><td align="center">学号</td><td align="center">$Char$</td><td align="center">$8$</td><td align="center">否</td><td align="center"></td><td align="center">是</td></tr><tr><td align="center">学生姓名</td><td align="center">$Nvarchar$</td><td align="center">$8$</td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">性别</td><td align="center">$Char$</td><td align="center">$2$</td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">年龄</td><td align="center">$Smallint$</td><td align="center"></td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">班级号</td><td align="center">$Char$</td><td align="center">$6$</td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">入学时间</td><td align="center">$Smalldatetime$</td><td align="center"></td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">家庭住址</td><td align="center">$Nvarchar$</td><td align="center">$40$</td><td align="center">是</td><td align="center"></td><td align="center"></td></tr></tbody></table><hr><ul><li>$Student$表</li></ul><table><thead><tr><th align="center">列名称</th><th align="center">类型</th><th align="center">宽度</th><th align="center">允许为空</th><th align="center">缺省值</th><th align="center">主键</th></tr></thead><tbody><tr><td align="center">课程号</td><td align="center">$Char$</td><td align="center">$10$</td><td align="center">否</td><td align="center"></td><td align="center">是</td></tr><tr><td align="center">课程名称</td><td align="center">$Nvarchar$</td><td align="center">$20$</td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">课程总学时</td><td align="center">$Tinyint$</td><td align="center"></td><td align="center">否</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">课程学分</td><td align="center">$Tinyint$</td><td align="center"></td><td align="center">否</td><td align="center"></td><td align="center"></td></tr></tbody></table><hr><ul><li>Student_course表</li></ul><table><thead><tr><th align="center">列名称</th><th align="center">类型</th><th align="center">宽度</th><th align="center">允许为空</th><th align="center">缺省值</th><th align="center">主键</th></tr></thead><tbody><tr><td align="center">课程号</td><td align="center">$Char$</td><td align="center">$10$</td><td align="center">否</td><td align="center"></td><td align="center">是</td></tr><tr><td align="center">学号</td><td align="center">$Char$</td><td align="center">$8$</td><td align="center">否</td><td align="center"></td><td align="center">是</td></tr><tr><td align="center">成绩</td><td align="center">$Tinyint$</td><td align="center"></td><td align="center">否</td><td align="center"></td><td align="center"></td></tr></tbody></table><pre class="line-numbers language-SQL"><code class="language-SQL">create table Student    (  学号       char(8)        not null  primary key,       学生姓名   nvarchar(8)    not null ,       性别       char(2)        not null ,       年龄       smallint       not null ,       班级号     char(6)        not null ,       入学时间   smalldatetime  not null ,       家庭住址   nvarchar(40)   )create table Course    (  课程号     char(10)       not null  primary key,       课程名称   nvarchar(20)   not null ,       课程总学时 tinyint                 ,       课程学分   tinyint                 )create table Student_Course    (  课程号    char(10)       not null,       学号      char(8)        not null,       成绩      tinyint        not null       primary key (课程号,学号),       foreign key (课程号) references Course  (课程号),       foreign key (学号)   references Student (学号),    )# 录入数据略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从$student$、$course$和$student_course$三张表中检索选修了课程的学生的学号、姓名、课程号、课程名及成绩.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">select Student.学号,Student.学生姓名,Course.课程号,Course.课程名称,Student_Course.成绩    from Student ,Course ,Student_Course    where Student.学号=Student_Course.学号 and Course.课程号=Student_Course.课程号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果要在数据检索时对表中数据按照一定条件进行分组汇总或求平均值,就要在$SELECT$语句中与$GROUP$ $BY$子句一起使用集合函数.使用$GROUP$ $BY$子句进行数据检索可得到数据分类的汇总统计、平均值或其他统计信息.</li></ul><p>(1) 使用不带$HAVING$的$GROUP$ $BY$子句,汇总出$student_course$表中的学生的学号及总成绩</p><pre class="line-numbers language-SQL"><code class="language-SQL">select 学号,sum(成绩) 总成绩    from Student_Course    group by 学号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2) 使用带$HAVING$的$GROUP$ $BY$子句,汇总出$student_course$表中总分大于$450$分的学生的学号及总成绩</p><pre class="line-numbers language-SQL"><code class="language-SQL">select 学号,sum(成绩) 总成绩    from Student_Course    group by 学号    having sum(成绩)>450<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-子查询"><a href="#2-子查询" class="headerlink" title="(2).子查询"></a>(2).子查询</h4><p>1．使用$IN$或$NOT$ $IN$关键字.</p><ul><li>使用$IN$关键字查询出‘$jk1$’ ‘$dx2$’ ‘$dx1$’班所有男生的学号、课程号及相应的成绩</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">select Student_Course.学号,课程号,成绩    from Student_Course,Student    where Student.学号=Student_Course.学号 and Student.班级号 in ('jk1','dx2','dx1') and Student.性别='男'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用$EXISTS$或$NOT$ $EXISTS$关键字.</li></ol><ul><li>使用$EXISTS$关键字查询出$‘jk1’$班选修‘数据结构’课程的学生的学号、姓名;使用$NOT EXISTS$查询出‘$jk1$’班没有选修‘数据结构’课程的学生的学号、姓名</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">select Student.学号,Student.学生姓名    from Student    where exists    (    select * from Student_Course ,Course        where Student_Course.学号=Student.学号 and Student_Course.课程号=Course.课程号 and Course.课程名称='数据结构' and Student.班级号='jk1'    )select Student.学号,Student.学生姓名    from Student    where Student.班级号='jk1' and not exists    (    select * from Student_Course ,Course        where Student_Course.学号=Student.学号 and Student_Course.课程号=Course.课程号 and Course.课程名称='数据结构'     )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder-247 补题</title>
      <link href="/2022/04/21/atcoder-247-bu-ti/"/>
      <url>/2022/04/21/atcoder-247-bu-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="A-Move-Right"><a href="#A-Move-Right" class="headerlink" title="A - Move Right"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/A">A - Move Right</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定长度为$4$的$01$字符串,让整体往右移一次,最右边的元素将会消失,同时前补$0$.</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">模拟</font></b>,结果为$’0’+substr(0,3)$.</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : A_-_Move_Right.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-16 周六 16:01:19  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    string s<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="B-Unique-Nicknames"><a href="#B-Unique-Nicknames" class="headerlink" title="B - Unique Nicknames"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/B">B - Unique Nicknames</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定$n$个人,每个人都有一个姓氏$s_i$和名字$t_i$.<br>现在考虑给这$n$个人取昵称,第$i$个人的昵称为$a_i$,每个$a_i$应满足以下条件:</p><ul><li>$a_i$可以从第$i$个人的姓氏$s_i$和名字$t_i$中选择;</li><li>$a_i$不能成为别人的姓氏$s_j$和名字$t_i$,即$i \neq j,a_i \neq s_j$并且$a_i \neq t_j$.</li></ul><p>问是否存在这样的一组满足以上条件的名字.</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p>由于数据范围较小,可<b><font color="Red">暴力枚举</font></b>,保证名字与名字之间不能相同,同时姓氏与名字之间也不相同.</p></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : B_-_Unique_Nicknames.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-16 周六 16:04:33  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>string s1<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>s2<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C-1-2-1-3-1-2-1"><a href="#C-1-2-1-3-1-2-1" class="headerlink" title="C - 1 2 1 3 1 2 1"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/C">C - 1 2 1 3 1 2 1</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定序列$S_n$如下:</p><ul><li>序列$S_1$只存在单个元素$1$;</li><li>序列$S_n(n\geqslant2)$包含序列$S_{n-1} , n ,S_{n-1}$.</li></ul><p>例如序列$S_2$为$1,2,1$,序列$S_3$为$1,2,1,3,1,2,1$;<br>给定一个$n$,打印出序列$S_n$.</p></blockquote><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">递归打印</font></b>.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : C_-_1_2_1_3_1_2_1.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-16 周六 16:16:05  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="D-Cylinder"><a href="#D-Cylinder" class="headerlink" title="D - Cylinder"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/D">D - Cylinder</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给你一个水平圆柱(容器),给你$Q$次询问,每次操作有以下两种情况:</p><ul><li>$1$ $x$ $c$:向容器的右端插入$c$个价值为$x$的球;</li><li>$2$ $c$: 从容器的左端取出$c$个球,并输出拿出的这$c$个球的价值和.</li></ul></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">双端队列模拟</font></b>.如果操作是$1$,将$x$和$c$放入双端队列的尾部,如果操作是$2$,将头部弹出直至$c$为$0$,去判断取出的个数$c$与头部元素的$c’$的关系.<br>注意开$long\ long$.</p></blockquote><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : D_-_Cylinder.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-16 周六 16:26:56  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>ll<span class="token operator">></span> PLL<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>deque<span class="token operator">&lt;</span>PLL<span class="token operator">></span> dq<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token punctuation">;</span>        cin <span class="token operator">>></span> op<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll num<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>            cin <span class="token operator">>></span> num <span class="token operator">>></span> cnt<span class="token punctuation">;</span>            dq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span>cnt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll cnt<span class="token punctuation">;</span>            cin <span class="token operator">>></span> cnt<span class="token punctuation">;</span>            ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>dq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>cnt<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                PLL k<span class="token operator">=</span>dq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span>second<span class="token operator">&lt;=</span>cnt<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    res<span class="token operator">+</span><span class="token operator">=</span>k<span class="token punctuation">.</span>first<span class="token operator">*</span>k<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                    cnt<span class="token operator">-</span><span class="token operator">=</span>k<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    res<span class="token operator">+</span><span class="token operator">=</span>cnt<span class="token operator">*</span>k<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                    dq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">{</span>k<span class="token punctuation">.</span>first<span class="token punctuation">,</span>k<span class="token punctuation">.</span>second<span class="token operator">-</span>cnt<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> res<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="E-Max-Min"><a href="#E-Max-Min" class="headerlink" title="E - Max Min"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/E">E - Max Min</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定长度为$N$的序列$A$和两个整数$X,Y$,找出区间对$[L,R]$满足以下条件的对数:</p><ul><li>$1 \leqslant L \leqslant R \leqslant N$;</li><li>$[L,R]$区间内的最大值为$X$,最小值为$Y$.</li></ul></blockquote><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">尺取</font></b>.对于那部分数$p$($p&gt;X$或者$p&lt;Y$)不在满足的区间$[L,R]$之间,可将其作为分割点,将可行的区间划分出来.例如:$A=(4,2,5,4,3,4,2),X=4,Y=2$,可划分为$(4,2),(4,3,4,2)$两大块,寻找既包含$X$和$Y$的区间数.</p></blockquote><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : E_-_Max_Min.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-16 周六 16:47:24  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token comment" spellcheck="true">// #define MAXM </span><span class="token comment" spellcheck="true">// #define MAXK </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>y<span class="token operator">||</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                idx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> v<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>idx<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>mp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mp<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mp<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>                res<span class="token operator">=</span>res<span class="token operator">+</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            mp<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="F-Cards"><a href="#F-Cards" class="headerlink" title="F - Cards"></a><a href="https://vjudge.csgrandeur.cn/contest/489306#problem/F">F - Cards</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给你$n$张卡片,每张卡片的正反面都有一个数字$p_i$和$q_i$,正反面各构成$1-n$的排列(两个排列可能相同),从这$n$张卡片中选出若干张,满足选出的卡片可以表示$1-n$的所有数字,问满足条件的方案数,结果对$998244353$求余.</p></blockquote><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">置换群(环+并查集)+dp</font></b>.<br>将每张卡片看作是由$p_i$指向$q_i$的有向边,由于$p,q$都是一个排列,意味着图中的每个点的入度为$1$,出度为$1$,形成(置换群)环.转换成给定若干个不相连通的环,其中每个环,可以删除若干条边,满足每一个点都和一条边相连,即每两条相邻的边需要至少选一条,问满足的方案数.<br>判断环可以用<b><font color="Green">并查集</font></b>,并维护每个环的$size$.<br>每个环的方案数考虑使用<b><font color="Orange">dp预处理</font></b>,结果为这$k$个环的贡献$G_i$的乘积,即$\prod_{i=1}^k(G_i)$.<br>设$dp[i][0/1][0/1]$为考虑环里有$i$个点,第一个点是否选,最后一个点是否选的方案数,第一个点选有两种情况$s(s=0/1)$,讨论最后一个点$i$的选择情况:</p><ul><li>最后一个点$i$不选时由$i-1$个点<strong>选</strong>推出,$dp[i][s][0]=dp[i-1][s][1];$</li><li>最后一个点$i$选时,由$i-1$个点<strong>选</strong>与<strong>不选</strong>两种情况推出,$dp[i][s][1]=dp[i-1][s][0]+dp[i-1][s][1]$.</li></ul><p>此时的$G_i=dp[i][1][1]+dp[i][0][1]+dp[i][1][0]$.</p></blockquote><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : F_-_Cards.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-22 周五 19:38:57  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>p<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>fa<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>siz<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">,</span>siz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span>        fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> fx<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fx<span class="token operator">!=</span>fy<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        fa<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token operator">=</span>fy<span class="token punctuation">;</span>        siz<span class="token punctuation">[</span>fy<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>siz<span class="token punctuation">[</span>fx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">join</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span>            ans<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>ans<span class="token operator">%</span>mod_998<span class="token operator">*</span>res<span class="token punctuation">[</span>siz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验5</title>
      <link href="/2022/04/20/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-5/"/>
      <url>/2022/04/20/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-5/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><p>要求编写一个程序,可以管理朋友条目.所用的知识点是“继承”.</p><p>程序的主菜单如下：</p><pre class="line-numbers language-Markdown"><code class="language-Markdown">1.输入朋友条目2.输出朋友条目3.修改姓名4.修改电话5.修改地址0.退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析:<br>(1) 编写一个新类$FreindEntry$,此类是$CommEntry$的子类;<br>(2) $FreindEntry$有数据成员$addr$,用于存放一个朋友条目的地址;<br>(3) 根据分析,需要新编写四个函数.<br>$void$  $input()$ ;  //提示：如何使用父类的同名函数<br>$void$  $output()$; //提示：如何使用父类的同名函数<br>$void$  $setAddr(string$ $a)$;<br>$string$ $getAddr()$;</p><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://s2.loli.net/2022/04/20/pzIyV62g5cqxlUW.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FriendEntry</span><span class="token operator">:</span><span class="token keyword">public</span> CommEntry<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> CommEntry<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.修改通讯录条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.修改朋友条目地址"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-5):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,5):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该朋友条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string FriendEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查看的通讯录条目查看的内容选项(1为名字,2为电话,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入查看的通讯录条目查看的内容选项(1为名字,2为电话,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查看的朋友条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入查看的朋友条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_addr<span class="token operator">=</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该朋友条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp_addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> FriendEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FriendEntry data<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的朋友条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的朋友条目的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_addr<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的朋友条目的地址:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验7</title>
      <link href="/2022/04/20/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-7/"/>
      <url>/2022/04/20/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-7/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><p>问题:在通讯录管理程序中,通讯录是由通讯录条目组成的.通讯录条目由<b><font color="Red">姓名</font>、<font color="Red">电话</font></b>组成的。可以进行<strong>输入、输出、修改姓名、修改电话</strong>,加入静态数据成员,拥有者Owner.</p><p>程序的主界面如下所示:</p><pre class="line-numbers language-Markdown"><code class="language-Markdown">1.输入通讯录条目2.输出通讯录条目3.修改姓名4.修改电话5.修改拥有者0.退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://s2.loli.net/2022/04/20/niLO7V4hozsAfGg.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">void</span> <span class="token function">update_owner</span><span class="token punctuation">(</span>string change_owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span>    <span class="token keyword">static</span> string owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>string CommEntry<span class="token operator">::</span>owner<span class="token operator">=</span><span class="token string">"Me"</span><span class="token punctuation">;</span><span class="token keyword">int</span> CommEntry<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.修改通讯录条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.修改通讯录条目地址"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         6.修改通讯录的拥有者"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-6):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">6</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,6):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录的拥有者名字为:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_owner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_addr<span class="token operator">=</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp_addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_owner</span><span class="token punctuation">(</span>string change_owner<span class="token punctuation">)</span><span class="token punctuation">{</span>    owner<span class="token operator">=</span>change_owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_owner<span class="token punctuation">;</span>    CommEntry data<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入通讯录的拥有者:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_owner<span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">update_owner</span><span class="token punctuation">(</span>temp_owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_addr<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的地址:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录的拥有者:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_owner<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_owner</span><span class="token punctuation">(</span>temp_owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验二表的简单查询</title>
      <link href="/2022/04/15/shu-ju-ku-sqlserver-shi-yan-er-biao-de-jian-dan-cha-xun/"/>
      <url>/2022/04/15/shu-ju-ku-sqlserver-shi-yan-er-biao-de-jian-dan-cha-xun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先建好一个教师表（如下表）,然后在此基础上依次进行各种简单查询.</p></blockquote><table><thead><tr><th>教工号</th><th>姓名</th><th>家庭地址</th><th>电话</th><th>职称</th><th>工资</th><th>所在教研室</th></tr></thead><tbody><tr><td>2111</td><td>朱辉生</td><td>连云港市</td><td>5817693</td><td>副教授</td><td>5800</td><td>计算机软件</td></tr><tr><td>2112</td><td>单建魁</td><td>连云港市</td><td>5817692</td><td>讲师</td><td>4900</td><td>计算机网络</td></tr><tr><td>2113</td><td>赵启升</td><td>连云港市</td><td>5817693</td><td>工程师</td><td>4800</td><td>计算机网络</td></tr><tr><td>2114</td><td>胡云</td><td>连云港市</td><td>5817692</td><td>助教</td><td>3500</td><td>计算机软件</td></tr><tr><td>2115</td><td>葛庆兵</td><td>连云港市</td><td>5817694</td><td>助教</td><td>3500</td><td>计算机体系结构</td></tr></tbody></table><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><h4 id="1-基本查询"><a href="#1-基本查询" class="headerlink" title="(1). 基本查询"></a>(1). 基本查询</h4><ul><li>从teacher表中分别检索出教师的所有信息.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查询teacher表中教工号、姓名和职称.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 教工号<span class="token punctuation">,</span>姓名<span class="token punctuation">,</span>职称 <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-查询时改变列标题的显示"><a href="#2-查询时改变列标题的显示" class="headerlink" title="(2). 查询时改变列标题的显示"></a>(2). 查询时改变列标题的显示</h4><p>从teacher表中分别检索出教师教工号、姓名、家庭住址信息并分别加上‘教师姓名’、‘教工号’、‘家庭住址’等标题信息.</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 教工号<span class="token punctuation">,</span>姓名 教师姓名<span class="token punctuation">,</span>家庭住址 <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-基于WHERE语句进行数据查询"><a href="#3-基于WHERE语句进行数据查询" class="headerlink" title="(3). 基于WHERE语句进行数据查询"></a>(3). 基于WHERE语句进行数据查询</h4><ul><li>基于比较条件,从teacher表中查询出教工号小于2130的教师资料.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher <span class="token keyword">where</span> 教工号<span class="token operator">&lt;</span><span class="token string">'2130'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>基于BETWEEN语句,从teacher表中查询出教工号界于2100和2130之间的教师资料.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span class="token keyword">where</span> 教工号 <span class="token operator">between</span> <span class="token string">'2100'</span> <span class="token operator">and</span> <span class="token string">'2130'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>基于IN子句的数据查询,从teacher表中查询出职称为“教授”或“副教授”的教师的教工号、教师姓名、职称及家庭住址.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 教工号<span class="token punctuation">,</span>姓名 教师姓名<span class="token punctuation">,</span>职称<span class="token punctuation">,</span>家庭住址 <span class="token keyword">from</span> teacher<span class="token keyword">where</span> 职称 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'教授'</span><span class="token punctuation">,</span><span class="token string">'副教授'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//也可以写成下面一种</span><span class="token keyword">select</span> 教工号<span class="token punctuation">,</span>姓名 教师姓名<span class="token punctuation">,</span>职称<span class="token punctuation">,</span>家庭住址 <span class="token keyword">from</span> teacher<span class="token keyword">where</span> 职称<span class="token operator">=</span><span class="token string">'教授'</span> <span class="token operator">or</span> 职称<span class="token operator">=</span><span class="token string">'副教授'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于LIKE子句的查询,从teacher表中分别检索出姓赵的教师的资料.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span class="token keyword">where</span> 姓名 <span class="token operator">like</span> <span class="token string">'赵%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用TOP关键字查询,分别从teacher中检索出前2条及前面67%的教师的信息.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span class="token keyword">select</span> <span class="token keyword">top</span> <span class="token number">67</span> <span class="token keyword">percent</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用DISTINCT关键字查询,从teacher表中检索出教师的职称并且要求显示的职称不重复.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> 职称 <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用计算列查询,将teacher表中各教师的姓名、教工号及工资按95%发放的信息,将工资按95%发放后列名该为‘预发工资’.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 姓名<span class="token punctuation">,</span>教工号<span class="token punctuation">,</span>工资<span class="token punctuation">,</span>工资<span class="token operator">*</span><span class="token number">0.95</span> 预发工资 <span class="token keyword">from</span> teacher<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用ORDER BY语句对查询的结果进行排序,从teacher表中查询工资大于4500的教师的教工号、姓名,并按升序排列.</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> 教工号<span class="token punctuation">,</span>姓名 <span class="token keyword">from</span> teacher<span class="token keyword">where</span> 工资<span class="token operator">></span><span class="token number">4500</span> <span class="token keyword">order</span> <span class="token keyword">by</span> 工资 <span class="token keyword">asc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验4</title>
      <link href="/2022/04/13/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-4/"/>
      <url>/2022/04/13/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-4/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><ul><li><p>问题描述: 通讯录是由通讯录条目(不包括朋友条目,以后再考虑在通讯录中加入朋友类条目)组成的.通讯录总条目数,通讯录中现有多少条.可以输入通讯录、可以输出通讯录、可以查找、修改.</p></li><li><p>实验目的: 学习使用类与类之间的组合关系.</p></li><li><p>与之前实验的关系: 以第二个实验，通讯录条目程序为基础.</p></li></ul><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><ul><li><p>$(1)$ 在原来通讯录条目的基础之上添加一个类$Comms$,$CommEntry$是$Comms$的数据成员.$Comms$的声明与定义可以使用单独的$.h$和$.cpp$文件;</p></li><li><p>$(2)$ 通迅录中有多个条目,所以$CommEntry$是以数组的形式出现在$Comms$中,为了能灵活处理通讯录条目的个数,可以指针的方式进行声明,然后动态的申请通讯录条目的个数,比如可以考虑在$Comms$的构造函数中进行内存的申请,在其析构函数中进行内存的回收.</p></li><li><p>$(3)$ 在$Comms$中定义两个整数: $MaxCount$, $count$,分别用了表示通讯录中条目的最多个数与已经存在的个数.</p></li><li><p>$(4)$ 在$Comms$中声明如下函数： </p><blockquote><ul><li>$void$ $inputAll()$: 用于输入通迅录中的通讯录条目.注意在此函数中如何使用条目类的$input()$函数。</li><li>$void$ $outputAll()$: 用于输出通讯录条目中的通讯录条目.注意在此函数中如何使用条目类的$input()$函数。</li><li>$int$ $find(string$ $nm)$: 用于在通讯录中按姓名查找一个通讯录条目在通讯录条目在通讯录中的位置,其返回值是找到的条目在数组中一下标位置.此函数主体可以用$for$循环来完成,供参考代码如下:</li><li>$void$ $modify(stirng$ $nm,$ $string$ $t)$: 给定一个姓名,一个电话,修改通讯录中此姓名对应的条目的电话为指定的电话.注意此函数与$find$函数的关系.</li></ul></blockquote><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pCe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nm<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">break</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>$(5)$ $Comms,CommEntry$之间的关系是组合与被组合的关系,可以用以下$UML$图来表示:<br><img src="https://s2.loli.net/2022/04/13/b52DfVRkKUpjLGX.png"></p></li><li><p>$(6)$ 程序主菜单如下,主控程序的结构与通讯录条目程序的结构类似.</p><blockquote><p>$1.$ 输入通讯录<br>$2.$ 输出通讯录<br>$3.$ 查找姓名<br>$4.$ 修改(输入姓名，修改其电话)<br>$0.$ 退出</p></blockquote></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//int displaymenu();</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comms</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Comms</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> maxnum<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>maxnum<span class="token punctuation">;</span>        Count<span class="token operator">=</span>num<span class="token punctuation">;</span>        pCe<span class="token operator">=</span><span class="token keyword">new</span> CommEntry<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Comms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxCount<span class="token operator">=</span>Count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>pCe<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CommEntry<span class="token operator">&amp;</span> <span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    CommEntry <span class="token operator">*</span>pCe<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCount<span class="token punctuation">;</span>    <span class="token keyword">int</span> Count<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.查找通讯录姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录指定名字的电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-4):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0-4):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>CommEntry<span class="token operator">&amp;</span> Comms<span class="token operator">::</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> pCe<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> Comms<span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span>string nm<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nm<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找不到该姓名</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">modify</span><span class="token punctuation">(</span>string nm<span class="token punctuation">,</span>string t<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>nm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人,无法修改!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> Comms<span class="token operator">::</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>Count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"***第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个通讯录条目***"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">get_CommEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"名字:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span><span class="token string">"电话:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"地址:  "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入通讯录的总人数:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    Comms data<span class="token operator">=</span><span class="token function">Comms</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查找的姓名:  "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            <span class="token keyword">int</span> pos<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                data<span class="token punctuation">.</span><span class="token function">get_CommEntry</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"查无此人"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的名字:  "</span> <span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届蓝桥杯省赛C++B组补题(下)</title>
      <link href="/2022/04/12/di-shi-san-jie-lan-qiao-bei-sheng-sai-c-b-zu-bu-ti-xia/"/>
      <url>/2022/04/12/di-shi-san-jie-lan-qiao-bei-sheng-sai-c-b-zu-bu-ti-xia/</url>
      
        <content type="html"><![CDATA[<h3 id="试题-G-积木画-20分"><a href="#试题-G-积木画-20分" class="headerlink" title="试题 G: 积木画(20分)"></a>试题 G: <a href="https://www.acwing.com/problem/content/4409/">积木画</a>(20分)</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小明最近迷上了积木画,有这么两种类型的积木,分别为$I$型(大小为$2$个单位面积)和$L$型(大小为$3$个单位面积):<br><img src="https://s2.loli.net/2022/04/18/oOhkZEUDJWYumyb.png"></p><p>同时,小明有一块面积大小为$2 \times N$的画布,画布由$2 \times N$个$1 \times 1$区域构成.小明需要用以上两种积木将画布拼满,他想知道总共有多少种不同的方式?积木可以任意旋转,且画布的方向固定.</p><blockquote><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入一个整数$N$,表示画布大小.</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数表示答案.由于答案可能很大,所以输出其对$1000000007$取模后的值.</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>$3$</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>$5$</p><h5 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h5><p>五种情况如下图所示,颜色只是为了标识不同的积木:<br><img src="https://s2.loli.net/2022/04/18/tfVcLhqwPo2JU3Z.png"></p><h5 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><p>对于所有测试用例,$1 \leqslant N \leqslant 10000000$.</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">分类讨论+dp思想,递推</font></b>,设$dp[i]$为形成$i$列的方案数.</p><ul><li>前$i-1$已经排满,此时的方案数为$dp[i-1]$,如下图所示;<br><img src="https://s2.loli.net/2022/04/25/NERrqJMUZLylewX.png" alt="情况一"></li><li>第$i-1$列没排与第$i$列组合(前$i-2$列已经排满),此时的方案数为$dp[i-2]$,如下图所示;<br><img src="https://s2.loli.net/2022/04/25/esjX4kilhg3xy9W.png" alt="情况二"></li><li>第$i-1$列排了一半(包括上半和下半)与第$i$列组合(两种小情况都是在满足前$i-3$列已经排满),此时的方案数为$2 \times dp[i-3]$,如下图所示;<br><img src="https://s2.loli.net/2022/04/25/x53pkBiYKmhX68a.png" alt="情况三"><br>由于情况三分得不够细(未考虑$i-3$的状态).</li><li>$i-3$与$i-2$组合,$i-1$与$i$组合,这种情况包含于情况二中,故不用再计算,如下图所示;<br><img src="https://s2.loli.net/2022/04/25/N6ibTGus5tXzf9a.png" alt="情况四于二"></li><li>第$i-3$列与$i-2$形成正$’L’$,或倒$’L’$,此时的方案数为$2 \times dp[i-4]$;<br><img src="https://s2.loli.net/2022/04/25/xXPdtWh2C78ZA1r.png" alt="情况五"><br>同理,考虑$i-4$可得,方案数为$2 \times dp[i-5]$,如下图所示;<br><img src="https://s2.loli.net/2022/04/25/lLTf3QIa49XMBb2.png" alt="情况六"><br>综上:$dp[i]=dp[i-1]+dp[i-2]+2 \times dp[i-3] +2 \times dp[i-4]+…+2 \times dp[2] +2 \times dp[1]$;<br>$dp[i-1]=dp[i-2]+dp[i-3]+2 \times dp[i-4] +2 \times dp[i-5]+…+2 \times dp[2] +2 \times dp[1]$;<br>两式作差:$dp[i]-dp[i-1]=dp[i-1]+dp[i-3]$;<br>最后化简得:$dp[i]=2 \times dp[i-1] +dp[i-3]$.</li></ul></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10000010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-H-扫雷-20分"><a href="#试题-H-扫雷-20分" class="headerlink" title="试题 H: 扫雷(20分)"></a>试题 H: <a href="https://www.acwing.com/problem/content/4410/">扫雷</a>(20分)</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>小明最近迷上了一款名为《扫雷》的游戏.其中有一个关卡的任务如下,在一个二维平面上放置着$n$个炸雷,第$i$个炸雷$(x_i,y_i,r_i)$表示在坐标$(x_i,y_i)$处存在一个炸雷,它的爆炸范围是以半径为$r_i$的一个圆.</li><li>为了顺利通过这片土地,需要玩家进行排雷.玩家可以发射$m$个排雷火箭,小明已经规划好了每个排雷火箭的发射方向,第$j$个排雷火箭$(x_j,y_j,r_j)$表示这个排雷火箭将会在$(x_j,y_j)$处爆炸,它的爆炸范围是以半径为$r_j$的一个圆,在其爆炸范围内的炸雷会被引爆.同时,当炸雷被引爆时,在其爆炸范围内的炸雷也会被引爆.现在小明想知道他这次共引爆了几颗炸雷?</li><li>你可以把炸雷和排雷火箭都视为平面上的一个点.一个点处可以存在多个炸雷和排雷火箭.当炸雷位于爆炸范围的边界上时也会被引爆.</li></ul><blockquote><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><ul><li>输入的第一行包含两个整数$n、m$.</li><li>接下来的$n$行,每行三个整数$x_i,y_i,r_i$,表示一个炸雷的信息.</li><li>再接下来的$m$行,每行三个整数$x_j,y_j,r_j$,表示一个排雷火箭的信息.</li></ul><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数表示答案.</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><p>$2$ $1$<br>$2$ $2$ $4$<br>$4$ $4$ $2$<br>$0$ $0$ $5$</p><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><p>$2$</p><h5 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h5><p>示例图如下,排雷火箭$1$覆盖了炸雷$1$,所以炸雷$1$被排除;炸雷$1$又覆盖了炸雷$2$,所以炸雷$2$也被排除.<br><img src="https://s2.loli.net/2022/04/18/rPeBo8pVfMz32Yh.png"></p><h5 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$40$% 的评测用例,$0 \leqslant x,y \leqslant 10^9,0 \leqslant n,m \leqslant 10^3,1 \leqslant r \leqslant 10$.</li><li>对于$100$% 的评测用例,$0 \leqslant x,y \leqslant 10^9,0 \leqslant n,m \leqslant 5 \times 10^4,1 \leqslant r \leqslant 10$.</li></ul></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p>该题点的数量较多,半径大的雷可以炸到半径小的雷,而半径小的雷不一定能引爆半径大的雷,故不能使用<b><font color="Red">并查集</font></b>解决(并查集一般用于无向图),故此处需用到<strong>图的遍历</strong>.<br>如果直接枚举每个雷和所有雷的情况,时间复杂度为$O(n^2)$,会$Tle$掉.<br>由于给定的$r \leqslant 10$,可直接对每个地雷周围一圈$r$进行遍历,时间复杂度为$O(n \times (2r)^2)$.<br>由于需要遍历每个坐标,需要通过坐标映射到雷的编号.<br>故需要考虑采用<b><font color="Orange">哈希</font></b>,可采用如下三种方法:</p><ul><li>$map&lt;pair&lt;int,int&gt;,int&gt;$进行二维坐标点映射到雷的编号.</li><li>将$x,y$转化为字符串使用$unordered$_$map&lt;string,int&gt;$,即$to$ _ $string(x)+’\ ‘+to$ _ $string(y)$.<br>然而这两种方法容易被卡常$G$掉.<br>故只能通过手写哈希的方法实现.</li></ul></blockquote><blockquote><ul><li>通过$x,y$二维坐标唯一映射的哈希值:由于$x,y$的范围都是$0$~$1\times 10^9$,我们可以将x,y唯一的映射到一个哈希值,这个哈希值是一个$1\times 10^9+1$的进制数,即$x \times (10^9+1)+y$,可以类似的把$x,y$合起来看成一个数字,第$0$位是$y$,第$1$位是$x$.</li><li>哈希表的长度:题目已知$n$是小于等于$5\times 10^4$的,哈希表至少是$2n$,但是应该尽可能的开大,这样就可以避免冲突的发生;同时,哈希表的长度为质数时最好,取一个$999997$.</li><li>$h[M]$数组表示哈希表,下标为$key$,值为$value$;$id[M]$数组表示哈希表中的每个$key$对应的地雷编号是多少;$vis[N]$数组表示该地雷是否被访问过.<br>代码给出两种方法:<b><font color="Blue">dfs和bfs</font></b>.</li></ul></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//dfs版本</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 50010</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXM 999997</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>ll hash_<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">get_key</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token number">1000000001</span><span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll key<span class="token operator">=</span><span class="token function">get_key</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token punctuation">(</span>key<span class="token operator">%</span>MAXM<span class="token operator">+</span>MAXM<span class="token punctuation">)</span><span class="token operator">%</span>MAXM<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">!=</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>temp<span class="token operator">==</span>MAXM<span class="token punctuation">)</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sqr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    vis<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token operator">-</span>r<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token operator">+</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token operator">-</span>r<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token operator">+</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sqr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqr</span><span class="token punctuation">(</span>j<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">sqr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>s<span class="token punctuation">[</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>hash_<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_key</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>s<span class="token punctuation">[</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>            id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token operator">-</span>r<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token operator">+</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token operator">-</span>r<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token operator">+</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sqr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqr</span><span class="token punctuation">(</span>j<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">sqr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>s<span class="token punctuation">[</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//bfs版本</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 50010</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXM 999997</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>ll hash_<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> vis<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">,</span>id<span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">get_key</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ll<span class="token punctuation">)</span>x<span class="token operator">*</span><span class="token number">1000000001</span><span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll key<span class="token operator">=</span><span class="token function">get_key</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token punctuation">(</span>key<span class="token operator">%</span>MAXM<span class="token operator">+</span>MAXM<span class="token punctuation">)</span><span class="token operator">%</span>MAXM<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">!=</span>key<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>temp<span class="token operator">==</span>MAXM<span class="token punctuation">)</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sqr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vis<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">+</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sqr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqr</span><span class="token punctuation">(</span>j<span class="token operator">-</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">sqr</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp_<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp_<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>temp_<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        vis<span class="token punctuation">[</span>temp_<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>hash_<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>hash_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            hash_<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_key</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>s<span class="token punctuation">[</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>            id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>x<span class="token operator">-</span>r<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token operator">+</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>y<span class="token operator">-</span>r<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>y<span class="token operator">+</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sqr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sqr</span><span class="token punctuation">(</span>j<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">sqr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>id<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>vis<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token function">bfs</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vis<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-I-李白打酒加强版-25分"><a href="#试题-I-李白打酒加强版-25分" class="headerlink" title="试题 I: 李白打酒加强版(25分)"></a>试题 I: <a href="https://www.acwing.com/problem/content/4411/">李白打酒加强版</a>(25分)</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>话说大诗人李白,一生好饮.幸好他从不开车.</li><li>一天,他提着酒壶,从家里出来,酒壶中有酒$2$斗.他边走边唱:<blockquote><p>无事街上走,提壶去打酒.<br>逢店加一倍,遇花喝一斗.</p></blockquote></li><li>这一路上,他一共遇到店$N$次,遇到花$M$次.已知最后一次遇到的是花,他正好把酒喝光了.</li><li>请你计算李白这一路遇到店和花的顺序,有多少种不同的可能?</li><li>注意:壶里没酒($0$斗)时遇店是合法的,加倍后还是没酒;但是没酒时遇花是不合法的.<blockquote><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含两个整数$N$和$M$.</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数表示答案.由于答案可能很大,输出模$1000000007$的结果.</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><p>$5$ $10$</p><h5 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h5><p>$14$</p><h5 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h5><p>如果我们用$0$代表遇到花,$1$代表遇到店,$14$种顺序如下:<br>$010101101000000$<br>$010110010010000$<br>$011000110010000$<br>$100010110010000$<br>$011001000110000$<br>$100011000110000$<br>$100100010110000$<br>$010110100000100$<br>$011001001000100$<br>$100011001000100$<br>$100100011000100$<br>$011010000010100$<br>$100100100010100$<br>$101000001010100$</p><h5 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$40$% 的评测用例,$1 \leqslant n,m \leqslant 10$.</li><li>对于$100$% 的评测用例,$1 \leqslant n,m \leqslant 100$.</li></ul></blockquote></li></ul><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">dp</font></b>.<br>设$dp(i,j,k)$表示当前经过$i$个店,经过$j$朵花且壶中酒的量为$k$的方案数.</p><ul><li>考虑第$i$次经过的是店且酒的量为$k$,它是由$i-1$次遇到店且酒的量为$\frac{k}{2}$转移而来,即 $dp[i][j][k]=dp[i-1][j][\frac{k}{2}]$,还需满足<b><font color="Blue">$k$为偶数,并且$i-1\geqslant 0$</font></b>;</li><li>考虑第$j$次经过的是花且酒的量为$k$,它是由$j-1$次遇到花且酒的量为$k+1$转移而来,即$dp[i][j][k]=dp[i][j-1][k+1]$,同理还需满足<b><font color="Orange">$j-1 \geqslant 0$</font></b>.</li></ul><p>初始化$dp[0][0][2]=1$,结果应为$dp[n][m-1][1]$(需要满足最后一次遇到的是花,且壶中的酒为$0$).</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 110</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-J-砍竹子-25分"><a href="#试题-J-砍竹子-25分" class="headerlink" title="试题 J: 砍竹子(25分)"></a>试题 J: <a href="https://www.acwing.com/problem/content/4412/">砍竹子</a>(25分)</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>这天,小明在砍竹子,他面前有$n$棵竹子排成一排,一开始第$i$棵竹子的高度为$h_i$.</li><li>他觉得一棵一棵砍太慢了,决定使用魔法来砍竹子.魔法可以对连续的一段相同高度的竹子使用,假设这一段竹子的高度为$H$,那么使用一次魔法可以把这一段竹子的高度都变为$\left \lfloor \sqrt{\left \lfloor \frac{H}{2} \right \rfloor +1} \right \rfloor$,其中$\left \lfloor x\right \rfloor$表示对$x$向下取整.小明想知道他<strong>最少</strong>使用多少次魔法可以让所有的竹子的高度都变为$1$.<blockquote><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><ul><li>第一行为一个正整数$n$表示竹子的棵数.</li><li>第二行共$n$个空格分开的正整数$h_i$,表示每棵竹子的高度.</li></ul><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>一个整数表示答案.</p><h5 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h5><p>$6$<br>$2$ $1$ $4$ $2$ $6$ $7$</p><h5 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h5><p>$5$<br>样例说明<br>其中一种方案:</p><blockquote><p>$2$ $1$ $4$ $2$ $6$ $7$<br>$\rightarrow$  $2$ $1$ $4$ $2$ $6$ $2$<br>$\rightarrow$ $2$ $1$ $4$ $2$ $2$ $2$<br>$\rightarrow$ $2$ $1$ $1$ $2$ $2$ $2$<br>$\rightarrow$ $1$ $1$ $1$ $2$ $2$ $2$<br>$\rightarrow$ $1$ $1$ $1$ $1$ $1$ $1$<br>共需要5步完成</p></blockquote><h5 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$20$% 的评测用例,$n \leqslant 1000,h_i \leqslant 10^6$.</li><li>对于$100$% 的评测用例,$n \leqslant 2 \times 10^5,h_i \leqslant 10^{18}$.</li></ul></blockquote></li></ul><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><blockquote><p>方法一:<b><font color="Red">贪心+优先队列</font></b>.优先枚举较大的区间并进行合并,我是想到了,我好像用成$cout$而且忘写$return$ $0$了,关键难题<strong>对了又没完全对</strong>,有时候能对,时间复杂度为$O(6nlogn)$.<br>方法二:<b><font color="Blue">贪心</font></b>,将每一个数进行操作的结果存在数组中(由于$10^{18}$只需要进行6次操作就可以变成1)并且结果加上操作的次数,最后只需要枚举每一层是否存在相邻的数,存在结果$-1$,时间复杂度为$O(6n)$.</p></blockquote><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//优先队列法</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>PII<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        PII temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; temp.first &lt;&lt; " " &lt;&lt; temp.second &lt;&lt; endl; </span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>first<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token operator">==</span>temp<span class="token punctuation">.</span>first<span class="token operator">&amp;&amp;</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token operator">==</span>temp<span class="token punctuation">.</span>second<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>first<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>second<span class="token operator">--</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//贪心</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXM 10</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>ll<span class="token operator">></span> sta<span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll x<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sta<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        res<span class="token operator">+</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span>        m<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sta<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span><span class="token operator">=</span>sta<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sta<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>f<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                res<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第十三届蓝桥杯省赛C++B组补题(上)</title>
      <link href="/2022/04/12/di-shi-san-jie-lan-qiao-bei-sheng-sai-c-b-zu-bu-ti-shang/"/>
      <url>/2022/04/12/di-shi-san-jie-lan-qiao-bei-sheng-sai-c-b-zu-bu-ti-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="试题-A-九进制转十进制-5分"><a href="#试题-A-九进制转十进制-5分" class="headerlink" title="试题 A: 九进制转十进制(5分)"></a>试题 A: 九进制转十进制(5分)</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>九进制正整数$(2022)_9$转换成十进制等于多少?</li></ul><h4 id="答案提交"><a href="#答案提交" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题,你只需要算出结果后提交即可.本题的结果为一个整数,在提交答案时只填写这个整数,填写多余的内容将无法得分.</p><h4 id="答案-1478"><a href="#答案-1478" class="headerlink" title="答案 :1478"></a>答案 :<b><font color="Red">1478</font></b></h4><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>模拟,考察进制转换,$res= 2 \times 9^0 + 2 \times 9^1 + 0 \times 9^2 + 2 \times 9^3 =2+18+2 \times 729 = 1478$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于作者懒得写c++,直接上python代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>pow<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>pow<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">*</span>pow<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>pow<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="试题-B-顺子日期-5分"><a href="#试题-B-顺子日期-5分" class="headerlink" title="试题 B: 顺子日期(5分)"></a>试题 B: 顺子日期(5分)</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>小明特别喜欢顺子.顺子指的就是<b><font color="ForestGreen">连续的三个数字</font></b>:$123、456$等.顺子日期指的就是在日期的$yyyymmdd$表示法中,存在任意连续的三位数是一个顺子的日期.例如$20220123$就是一个顺子日期,因为它出现了一个顺子:$123$, <b><font color="DeepSkyBlue">而$20221023$则不是一个顺子日期</font></b>,它一个顺子也没有.小明想知道在整个$2022$年份中,一共有多少个顺子日期.</li></ul><h4 id="答案提交-1"><a href="#答案提交-1" class="headerlink" title="答案提交"></a>答案提交</h4><p>这是一道结果填空的题,你只需要算出结果后提交即可.本题的结果为一个整数,在提交答案时只填写这个整数,填写多余的内容将无法得分.</p><h4 id="答案-存在争议-14-或-4"><a href="#答案-存在争议-14-或-4" class="headerlink" title="答案 存在争议 14 或 4"></a>答案 存在争议 <b><font color="Red">14</font></b> 或 <b><font color="Maroon">4</font></b></h4><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>枚举$2022$每一天检查其中是否存在连续的三个数字,由于告知$20221023$不是顺子日期,故逆序可能是不算是顺子日期,但是题目中未告知类似$012$算作顺子.<br>这难道是<del>蠢蠢牛马地考语文阅读理解</del>,我交的答案是$14$(已经<strong>开摆了</strong>,<code>o(*≧д≦)o!!</code>).</p><p>忽略前四位$2022$后(因为月份不可能以$3x$开头),故只考虑后四位有以下四大种情况(总共$14$种):</p><ul><li>$012x$,$x$的取值为$(0$~$9)$,共$10$种;</li><li>$1012$,共$1$种;</li><li>$1123$,共$1$种;</li><li>$123y$,$y$的取值为$(0或1)$,共$2$种.</li></ul><p>如果不算$012$的这种顺子,(忽略前四位)结果为:$0123$,$1123$,$1230$,$1231$.</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">,</span>days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year<span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> month<span class="token operator">=</span>temp<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token operator">=</span>temp<span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>month<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>month<span class="token operator">>=</span><span class="token number">13</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">></span>days<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">20220101</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">20221231</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string s<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token comment" spellcheck="true">/*&amp;&amp;s[j]!='0'*/</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//把注释部分加上考虑012不为顺子</span>                    res<span class="token operator">++</span><span class="token punctuation">;</span>                    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-C-刷题统计-10分"><a href="#试题-C-刷题统计-10分" class="headerlink" title="试题 C: 刷题统计(10分)"></a>试题 C: <a href="https://www.acwing.com/problem/content/4405/">刷题统计</a>(10分)</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>小明决定从下周一开始努力刷题准备蓝桥杯竞赛.他计划周一至周五每天做$a$道题目,周六和周日每天做$b$道题目.请你帮小明计算,按照计划他将在第几天实现做题数大于等于$n$题?<blockquote><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入一行包含三个整数$a$,$b$和$n$.</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一个整数代表天数.</p><h5 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h5><p>$10$ $20$ $99$</p><h5 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h5><p>$8$</p><h5 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$50$% 的评测用例,$1 \leqslant a, b, n \leqslant 10^6$.</li><li>对于$100$% 的评测用例,$1 \leqslant a, b, n \leqslant 10^{18}$.</li></ul></blockquote></li></ul><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>$10^{18}$的数据暴力肯定不行,需将所有的题对一周的总题数作除法,剩下的余数部分可通过枚举的方式解决,结果为$\frac{n}{5\times a + 2 \times b} \times 7+n$%$(5\times a + 2 \times b)$题数所需要花费的天数.</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//蓝桥杯中交的代码</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> n<span class="token punctuation">;</span>    ll sum<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    ll res1<span class="token operator">=</span>n<span class="token operator">%</span>sum<span class="token punctuation">,</span>res<span class="token operator">=</span>n<span class="token operator">/</span>sum<span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res1<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token operator">*</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res1<span class="token operator">%</span>a<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            res<span class="token operator">+</span><span class="token operator">=</span>res1<span class="token operator">/</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> res<span class="token operator">+</span><span class="token operator">=</span>res1<span class="token operator">/</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        res<span class="token operator">+</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        res1<span class="token operator">%</span><span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>a<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res1<span class="token operator">%</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            res<span class="token operator">+</span><span class="token operator">=</span>res1<span class="token operator">/</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> res<span class="token operator">+</span><span class="token operator">=</span>res1<span class="token operator">/</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//y总的代码(稍微改了一下)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> n<span class="token punctuation">;</span>    ll sum<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    ll res<span class="token operator">=</span>n<span class="token operator">/</span>sum<span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">;</span>    n<span class="token operator">%</span><span class="token operator">=</span>sum<span class="token punctuation">;</span>    ll d<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        n<span class="token operator">-</span><span class="token operator">=</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-D-修剪灌木-10分"><a href="#试题-D-修剪灌木-10分" class="headerlink" title="试题 D: 修剪灌木(10分)"></a>试题 D: <a href="https://www.acwing.com/problem/content/4406/">修剪灌木</a>(10分)</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>爱丽丝要完成一项修剪灌木的工作.</li><li>有$N$棵灌木整齐的从左到右排成一排.爱丽丝在每天傍晚会修剪一棵灌木,让灌木的高度变为$0$厘米,爱丽丝修剪灌木的顺序是从最左侧的灌木开始,每天向右修剪一棵灌木.当修剪了最右侧的灌木后,她会调转方向,下一天开始向左修剪灌木.直到修剪了最左的灌木后再次调转方向.然后如此循环往复.</li><li>灌木每天从早上到傍晚会长高$1$厘米,而其余时间不会长高.在第一天的早晨,所有灌木的高度都是$0$厘米.爱丽丝想知道每棵灌木最高长到多高.</li></ul><blockquote><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>一个正整数$N$,含义如题面所述.</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出$N$行,每行一个整数,第$i$行表示从左到右第$i$棵树最高能长到多高.</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>$3$</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p> $4$<br> $2$<br> $4$</p><h5 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$30$% 的评测用例,$N \leqslant 10$.</li><li>对于$100$% 的评测用例,$1 &lt; N \leqslant 10000$.</li></ul></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><p><font color="Red">找规律(或模拟)</font>,<del>反正我是暴力模拟t了,其实模拟也能过,忘了测大数据了,tcl,我的代码就不给了.</del> U•ェ•*U </p><ul><li>方法$1$: 模拟,面向题意的编程,时间复杂度接近$O(n^2)$.</li></ul><p>以$4$棵灌木为例(可发现只要先模拟从左到右一次,再模拟从右到左一次,最后模拟从左到右一次即可找到每棵灌木的最大高度):</p><p><img src="https://s2.loli.net/2022/04/13/vlsyfhcuYwj9d6B.png" alt="过程模拟图"></p><p><img src="https://s2.loli.net/2022/04/13/if6kUu7hO8pKNPl.png" alt="结果图"></p><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从左往右模拟一次</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用系统max会tle,原因不详,可能是时间复杂度为O(4 * n^2)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//从右往左模拟一次</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最后在从左往右枚举一次,并输出答案</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//此处是j=i</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">?</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//a[i]=0;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法$2$: 找规律,我们可在方法$1$的模拟基础上发现左右的值刚好关于中心对称.</li></ul><blockquote><p>对于第$i(1 \leqslant i \leqslant n)$棵灌木进行分析:</p><ul><li>当爱丽丝刚修剪过第$i$棵灌木且向右修剪直到尽头再左转要修剪到第$i$棵灌木的高度为$2 \times (n-i)$;</li><li>当爱丽丝刚修剪过第$i$棵灌木且向左修剪直到尽头再右转要修剪到第$i$棵灌木的高度为$2 \times (i-1)$;</li></ul><p>故第$i$棵灌木最高高度为$2 \times max(n-i,i-1)$.</p></blockquote><h4 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//或者i跑到(n+1)/2,并对称存储n+1-i的值</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//另一种写法</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-E-X-进制减法-15分"><a href="#试题-E-X-进制减法-15分" class="headerlink" title="试题 E: X 进制减法(15分)"></a>试题 E: <a href="https://www.acwing.com/problem/content/4407/">X 进制减法</a>(15分)</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>进制规定了数字在数位上逢几进一.</li><li>$X$进制是一种很神奇的进制,因为其每一数位的进制并不固定！例如说某种$X$进制数,最低数位为二进制,第二数位为十进制,第三数位为八进制,则$X$进制数$321$转换为十进制数为$65$.</li><li>现在有两个$X$进制表示的整数$A$和$B$,但是其具体每一数位的进制还不确定,只知道$A$和$B$是同一进制规则,且每一数位最高为$N$进制,最低为二进制.请你算出$A-B$的结果最小可能是多少.</li><li>请注意,你需要保证$A$和$B$在$X$进制下都是合法的,即每一数位上的数字要小于其进制.</li></ul><blockquote><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><ul><li><p>第一行一个正整数$N$,含义如题面所述.</p></li><li><p>第二行一个正整数$M_a$,表示$X$进制数$A$的位数.</p></li><li><p>第三行$M_a$个用空格分开的整数,表示$X$进制数$A$按从高位到低位顺序各个数位上的数字在十进制下的表示.</p></li><li><p>第四行一个正整数$M_b$,表示$X$进制数$B$的位数.</p></li><li><p>第五行$M_b$个用空格分开的整数,表示$X$进制数$B$按从高位到低位顺序各个数位上的数字在十进制下的表示.</p></li><li><p>请注意,输入中的所有数字都是十进制的.</p></li></ul><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出一行一个整数,表示$X$进制数$A-B$的结果的最小可能值转换为十进制后再模$1000000007$的结果.</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><p>$11$<br>$3$<br>$10$ $4$ $0$<br>$3$<br>$1$ $2$ $0$</p><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><p>$94$</p><h5 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h5><p>当进制为:最低位$2$进制,第二数位$5$进制,第三数位$11$进制时,减法得到的差最小.此时$A$在十进制下是$108$,$B$在十进制下是$14$,差值是$94$.</p><h5 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$30$% 的评测用例,$N \leqslant 10$;$M_a,M_b \leqslant 8$.</li><li>对于$100$% 的评测用例,$2 \leqslant N \leqslant 1000$;$1 \leqslant M_a,M_b \leqslant 100000$;$A \geqslant B$.</li></ul></blockquote><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><p><del>说实话这题我就没看懂这65是怎么得来的,就直接15分没了</del>,所以<strong>看懂题</strong>是这题的关键之一.</p><p>先说说这$321$怎么转变为$65$(此处建议<b><font color="Chocolate">从右往左看</font></b>).</p><table><thead><tr><th align="center"></th><th align="center">百位</th><th align="center">十位</th><th align="center">个位</th></tr></thead><tbody><tr><td align="center">$X$进制数</td><td align="center">$3$</td><td align="center">$2$</td><td align="center">$1$</td></tr><tr><td align="center">$X$进制</td><td align="center">$8$</td><td align="center">$10$</td><td align="center">$2$</td></tr><tr><td align="center">转化为$10$进制</td><td align="center">$3 \times 10 \times 2=60$</td><td align="center">$2 \times 2 =4$</td><td align="center">$1$</td></tr><tr><td align="center">结果为$60+4+1=65$.</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>推导过程:<br>设每一位的进制分别为为$P_{n-1},P_{n-2},…,P_1,P_0$,设$A$的进制数分别为$A_{n-1},A{n-2},…,A_1,A_0$,$B$的进制数分别为$B_{n-1},B_{n-2},…,B_1,B_0$($B$的位数可能小于$A$的位数,不足时前补$0$).<br>$A$用公式表示为:<br>$A=A_{n-1} \times \prod_{i=0}^{n-2}P_i + A_{n-2} \times \prod_{i=0}^{n-3}P_i +… + A_1 \times P_0+A_0$,<br>同理$B$也可用公式表示为:<br>$B=B_{n-1} \times \prod_{i=0}^{n-2}P_i + B_{n-2} \times \prod_{i=0}^{n-3}P_i +… + B_1 \times P_0+B_0$,<br>设$D=A-B$,每一位的差$D_i$为$A_i-B_i$,故<br>$D=(A_{n-1}-B_{n-1}) \times \prod_{i=0}^{n-2} P_i+ (A_{n-2}-B_{n-2}) \times \prod_{i=0}^{n-3} P_i + … + (A_1-B_1) \times P_0 + $<br>$(A_0-B_0)=D_{n-1} \times \prod_{i=0}^{n-2} P_i+ D_{n-2} \times \prod_{i=0}^{n-3} P_i + … + D_1 \times P_0 + D_0 \geqslant 0$.</p><p>将$P_k \times P_{k-1} \times P_{k-2} \times … \times P_0$(或$\prod_{i=0}^{k}P_i$)作为公因子提出,故可得到:<br>$D=(D_{n-1} \times \prod_{i=k+1}^{n-2}P_i+D_{n-2} \times \prod_{i=k+1}^{n-3}+… +D_{k+1}) \times \prod_{i=0}^{k}P_i$.</p><p>$(D_{n-1} \times \prod_{i=k+1}^{n-2}P_i+D_{n-2} \times \prod_{i=k+1}^{n-3}+… +D_{k+1})$表示的含义为在$k$左边$A$的前缀与$B$的前缀差,由于$A \geqslant B$,故$A$的前缀与$B$的前缀差也为非负数.故当前的$P_k$取值为$max(2,A_k+1,B_k+1)$.</p><p>最后怎么表示结果呢,借助<b><font color="red">秦九韶算法</font></b>.</p><p>$f(x)=a_nx^n+a_{n-1}x^{n-1}+…+a_1x+a_0$<br>$=(…((a_nx+a_{n-1})x+a_{n-2})x+…+a_1)x+a_0$.</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>ma<span class="token punctuation">,</span>mb<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> ma<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ma<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> mb<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>mb<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>ma<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">*</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="试题-F-统计子矩阵-15分"><a href="#试题-F-统计子矩阵-15分" class="headerlink" title="试题 F: 统计子矩阵(15分)"></a>试题 F: 统计子矩阵(15分)</h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定一个$N \times M$的矩阵$A$,请你统计有多少个子矩阵 (最小$1 \times 1$,最大$N × M$) 满足子矩阵中所有数的和不超过给定的整数$K$?</p><blockquote><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><ul><li>第一行包含三个整数$N$,$M$和$K$.</li><li>之后$N$行每行包含$M$个整数,代表矩阵$A$.</li></ul><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>一个整数代表答案.</p><h5 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h5><p>$3$ $4$ $10$<br>$1$ $2$ $3$ $4$<br>$5$ $6$ $7$ $8$<br>$9$ $10$ $11$ $12$<br>样例输出<br>$19$</p><h5 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h5><p>满足条件的子矩阵一共有$19$,包含:</p><ul><li>大小为$1 \times 1$的有$10$个;</li><li>大小为$1 \times 2$的有$3$个;</li><li>大小为$1 \times 3$的有$2$个;</li><li>大小为$1 \times 4$的有$1$个;</li><li>大小为$2 \times 1$的有$3$个.</li></ul><h5 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h5><ul><li>对于$30$% 的评测用例,$N,M \leqslant 20$.</li><li>对于$70$% 的评测用例,$N,M \leqslant 100$.</li><li>对于$100$% 的评测用例,$1 \leqslant N,M \leqslant 500;0 \leqslant A_{i j} \leqslant 1000; 1 \leqslant K \leqslant 250000000$.</li></ul></blockquote><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">前缀和+双指针</font></b> ,时间复杂度为${\color{Blue} {O(n^3)}}$,<del>我虽然用到了二维前缀和,即枚举两个顶点的位置($4$重循环,时间复杂度为$O(n^4)$),结果肯定是t了,真不知道拿什么东西去优化</del></p></blockquote><p>将矩阵中的元素转化为列前缀和,枚举上边界$i$和下边界$j$,把这每一小块构成一维数组,借助双指针枚举左边界$l$和右边界$r$,判断当前区间的值是否满足小于等于$K$,如果不满足则将左边界往右移直至满足条件,此时结果应加上$r-l+1$.</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 510</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//枚举上边界</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//枚举下边界</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>r<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">></span>k<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    sum<span class="token operator">-</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                    l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token operator">+</span><span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder-246 补题</title>
      <link href="/2022/04/11/atcoder-246-bu-ti/"/>
      <url>/2022/04/11/atcoder-246-bu-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="A-Four-Points"><a href="#A-Four-Points" class="headerlink" title="A - Four Points"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/A">A - Four Points</a></h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定一个长方形的三条顶点的坐标$(x_i,y_i)$,输出另外的一个顶点的坐标,其中长方形的每条边都平行于$x$轴或者平行于$y$轴且长方形的面积不为$0$.</p></blockquote><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">思维题</font></b>.<br>由于长方形的每条边要么平行于$x$轴,要么平行于$y$轴,即只需要找出<b><font color="Orange">横纵坐标出现一次的数</font></b>即为答案;<br>此处也可直接对三个点的横纵坐标分别进行<b><font color="Green">异或操作</font></b>,即为答案.</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : A_-_Four_Points.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-10 周日 16:00:15  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp1<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp2<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         cin <span class="token operator">>></span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         mp1<span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>         mp2<span class="token punctuation">[</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>mp1<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>second<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>mp2<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>second<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//cout &lt;&lt; (x[1]^x[2]^x[3]) &lt;&lt; ' ' &lt;&lt; (y[1]^y[2]^y[3]) &lt;&lt; endl;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="B-Get-Closer"><a href="#B-Get-Closer" class="headerlink" title="B - Get Closer"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/B">B - Get Closer</a></h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><blockquote><p>从二维平面上的点$(0,0)$出发,向点$(A,B)$方向移动距离$1$,求移动后的坐标为多少.</p></blockquote><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">勾股定理+相似三角形</font></b>.<br>首先求出$(0,0)$到$(A,B)$的距离$d=\sqrt{A^2+B^2}$,然后所求的坐标为$(\frac{A}{d},\frac{B}{d})$,也可近似看成求$sinx$和$cosx$(因为$sin^2x+cos^2x=1$).</p></blockquote><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : B_-_Get_Closer.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-10 周日 16:03:22  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">double</span> temp<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.12f %.12f"</span><span class="token punctuation">,</span>a<span class="token operator">/</span>temp<span class="token punctuation">,</span>b<span class="token operator">/</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="C-Coupon"><a href="#C-Coupon" class="headerlink" title="C - Coupon"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/C">C - Coupon</a></h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定$N$个物品,每个物品$i$的价格为$A_i$,$Takahashi$有$K$张优惠券(可优惠$X$).每张优惠券可用于这$N$个物品,每个物品可用任意小于等于$K$数量的优惠券,如果使用了$k$张,你只需要花费$max(A_i-kX,0)$.<br>问最小花费为多少.</p></blockquote><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">贪心</font></b>.<br>要想使花费最小,就要尽可能多得使用优惠券,如果优惠券能减去商品价格大于$X$的话,就贪心地使用优惠券,如果所有商品剩下的价格都小于$X$元后还有剩余优惠券,就贪心选择剩下物品中价格更高的.</p></blockquote><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : C_-_Coupon.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-10 周日 16:43:42  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>ll k<span class="token punctuation">,</span>x<span class="token punctuation">,</span>a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>ll<span class="token punctuation">,</span>ll<span class="token operator">></span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k <span class="token operator">>></span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ll temp<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>x<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        k<span class="token operator">-</span><span class="token operator">=</span>temp<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span>temp<span class="token operator">*</span>x<span class="token punctuation">;</span>        res<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">=</span>mp<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>mp<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll temp<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        k<span class="token operator">-</span><span class="token operator">=</span>temp<span class="token punctuation">,</span>res<span class="token operator">-</span><span class="token operator">=</span>i<span class="token operator">-</span><span class="token operator">></span>first<span class="token operator">*</span>temp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="D-2-variable-Function"><a href="#D-2-variable-Function" class="headerlink" title="D - 2-variable Function"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/D">D - 2-variable Function</a></h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给你一个整数$N$,其中$1 \leqslant N \leqslant 10^{18}$,找一个最小的整数$X$满足以下条件:</p><ul><li>$X$是大于等于$N$的整数;</li><li>存在一组非负整数对$(a,b)$,使得$X=a^3+a^2b+ab^2+b^3$.</li></ul></blockquote><h4 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h4><blockquote><p> <b><font color="Red">枚举+二分</font></b>.<br>由于数据较大,暴力枚举必不现实,考虑从整数对$(a,b)$出发,鉴于$N$的范围是$N \leqslant 10^{18}$,可推出$a,b$的范围为$0-10^6$,跑两重循环也会超时,故考虑先考虑$a$,然后二分找出合适$b$的值使之$X \geqslant N$成立,时间复杂度为$O(10^6 \times log(10^6))$.</p></blockquote><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * @file    : D_-_2_-variable_Function.cpp * @author  : SDTBU_LY * @version : V1.0.0 * @date    : 2022-04-10 周日 16:09:47 * @上联    : ac自动机fail树上dfs序建可持久化线段树 * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1000000</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>res<span class="token operator">=</span>llinf<span class="token punctuation">;</span>ll <span class="token function">f</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//防止中间相乘爆int</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token operator">+</span>a<span class="token operator">*</span>a<span class="token operator">*</span>b<span class="token operator">+</span>a<span class="token operator">*</span>b<span class="token operator">*</span>b<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>MAXN<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">*</span>i<span class="token operator">></span>n<span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        ll l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>MAXN<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ll j<span class="token operator">=</span>l<span class="token punctuation">;</span>        res<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="E-Bishop-2"><a href="#E-Bishop-2" class="headerlink" title="E - Bishop 2"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/E">E - Bishop 2</a></h3><h4 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定一个$N \times N$的棋盘.每个位置$(i,j)$都有对应的值$S_{i,j}$.</p><ul><li>如果$S_{i,j}=$<code>.</code>,说明该位置为空;</li><li>如果$S_{i,j}=$<code>#</code>,说明该位置存在障碍物.<br>给定一个象棋的起始点坐标$(A_x,A_y)$和象棋规则(斜着走,即四个方向<code>{{1,1},{1,-1},{-1,1},{-1,-1}}</code>移动,如果当前方向没有障碍物可以一直往这个方向前行不花费任何代价),问能否找到最少的移动步数到达$(B_x,B_y)$,如果不能到达,输出$-1$.</li></ul></blockquote><h4 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">bfs</font></b>,<del>这道题有可能卡bfs时间,我就中招了,是真的离谱</del>.</p><blockquote><ul><li><strong>最初的想法</strong>:每个状态扩展的时候如果遇到之前被扩展过的结点,如果这个结点已经在$BFS$过程中<b><font color="Purple">已经出队</font></b>了,那么说明这个点被扩展过了,我们就不需要再扩展了,如果这个点被扩展过但是还<b><font color="DeepSkyBlue">没有出队</font></b>,那么我们需要跳过这个结点继续往下扩展,因为后面的结点可能没有被扩展过.最后发现有组数据极限的过不去($tle$).</li><li>转变思路: <b><font color="Orange">只通过更新dis距离</font></b>,而<u>不借助标记数组</u>就能过,<del>目前我还是不知道原来的码错在哪</del>.o((⊙﹏⊙))o</li></ul></blockquote></blockquote><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : E_-_Bishop_2.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-11 周一 15:00:03  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 1510</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">,</span>ex<span class="token punctuation">,</span>ey<span class="token punctuation">;</span><span class="token keyword">char</span> g<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//memset(dis,0x3f,sizeof(dis));</span>    queue<span class="token operator">&lt;</span>PII<span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sx<span class="token punctuation">,</span>sy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dis<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        PII temp<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>first<span class="token operator">==</span>ex<span class="token operator">&amp;&amp;</span>temp<span class="token punctuation">.</span>second<span class="token operator">==</span>ey<span class="token punctuation">)</span>            <span class="token keyword">return</span> dis<span class="token punctuation">[</span>ex<span class="token punctuation">]</span><span class="token punctuation">[</span>ey<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> dx<span class="token operator">=</span>temp<span class="token punctuation">.</span>first<span class="token operator">+</span>k<span class="token operator">*</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dy<span class="token operator">=</span>temp<span class="token punctuation">.</span>second<span class="token operator">+</span>k<span class="token operator">*</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dx<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>dy<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>dy<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>g<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'#'</span><span class="token operator">&amp;&amp;</span>dis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">>=</span>dis<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dx<span class="token punctuation">,</span>dy<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dis<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span><span class="token operator">=</span>dis<span class="token punctuation">[</span>temp<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>temp<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>sx<span class="token punctuation">,</span><span class="token operator">&amp;</span>sy<span class="token punctuation">,</span><span class="token operator">&amp;</span>ex<span class="token punctuation">,</span><span class="token operator">&amp;</span>ey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cout &lt;&lt; g[i]+1 &lt;&lt; endl;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>inf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="F-typewriter"><a href="#F-typewriter" class="headerlink" title="F - typewriter"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/F">F - typewriter</a></h3><h4 id="题意-5"><a href="#题意-5" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定$N$个字符串集,每个字符串集的字符有小写字母($a,b,c,…x,y,z$组成),可以进行以下操作:</p><ul><li>选定第$i$个字符串集;</li><li>选用其中的字符输出长度为$L$的字符串.<br>问最多能产生多少不同的字符串$L$,结果对$998244353$求余.</li></ul></blockquote><h4 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">容斥原理+dfs(<font color="Blue">或者状态压缩,由于作者懒就不写状态压缩了</font>)+快速幂</font></b>.<br>根据容斥原理可得,设$A_i$为使用字符串集$s_i$打出长度为$L$的所有字符串的集合.容斥原理公式如下:<br>$\left| A_1 \cup A_2 \cup … \cup A_n \right|=+(\left| A_1 \right|+\left| A_2 \right|+…+\left| A_n \right|)$<br>$-(\left| A_1 \cap A_2 \right|+\left| A_1 \cap A_3 \right|+…+\left| A_{n-1} \cap A_n \right|)$<br>$+(\left| A_1 \cap A_2 \cap A_3 \right|+\left| A_1 \cap A_2 \cap A_4 \right|+…+\left| A_{n-2} \cap A_{n-1} \cap A_n \right|)$<br>$-…$<br>$+…$<br>$+(-1)^{k-1}\left| A_1 \cap A_2 \cap … \cap A_n\right|$(其中$k$为交集的个数)</p><ul><li>答案为$\left| A_1 \cup A_2 \cup … \cup A_n \right|$</li></ul></blockquote><ul><li>通过枚举以上情况时间复杂度为$O(2^n)$,$N$个字母能打印的长度为$L$的字符串的个数为$N^L$,使用快速幂计算花费$O(logL)$的时间,总的时间复杂度为$O(2^nlogL)$.</li></ul><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : F_-_typewriter.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-12 周二 11:50:53  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 30</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span>ll n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>res<span class="token punctuation">;</span><span class="token keyword">int</span> temp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>ll <span class="token function">fast_pow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span><span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//快速幂</span>    ll res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//b&amp;1</span>            res<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>res<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token operator">*</span>a<span class="token operator">%</span>p<span class="token punctuation">;</span>        b<span class="token operator">/</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//b>>=1;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        ll count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">25</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">+</span><span class="token function">fast_pow</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mod_998<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>        <span class="token keyword">else</span> res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">-</span><span class="token function">fast_pow</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mod_998<span class="token punctuation">)</span><span class="token operator">+</span>mod_998<span class="token punctuation">)</span><span class="token operator">%</span>mod_998<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> backup<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>backup<span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>backup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">25</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token operator">=</span>vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>backup<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> l<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin <span class="token operator">>></span> s<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">25</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="G-Game-on-Tree-3"><a href="#G-Game-on-Tree-3" class="headerlink" title="G - Game on Tree 3"></a><a href="https://vjudge.csgrandeur.cn/contest/488484#problem/G">G - Game on Tree 3</a></h3><h4 id="题意-6"><a href="#题意-6" class="headerlink" title="题意"></a>题意</h4><blockquote><p>给定一个总共有$n$个结点同时以$1$为根结点的树,除根节点外的每一个顶点$i$都有对应的权值$A_i$.初始有个纸片放在1号根结点位置,每轮$Aoki$(先手)可以将任意一点的权值变为$0$,$Takahashi$(后手)可以将纸片移动到一个相邻的结点,并且可以随时结束游戏.后手如果到达叶子结点自行结束游戏.游戏的得分是纸片最后在的位置上的点权,后手的目标是<b><font color="Pink">最大化</font></b>点权,先手的目标是<b><font color="Chocolate">最小化</font></b>点权.求双方采用最优策略能得到的最大得分.</p></blockquote><h4 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h4><blockquote><p><b><font color="Red">二分+树上dp</font></b>.<br>要求最大得分可通过二分把问题转化为判别的问题.二分后问题就变成了判断是否能够取到大于等于$mid$的得分.由于采用最优策略必然不会往回走,可采用树形dp解决.<br>后手每往下走一步,那么先手就能把这个结点子树中某个结点变为$0$,考虑$f(u)$为纸片在当前结点时能走到的权值大于$mid$的结点的数目,显然$f(u)$等于其所有子树的$f$的贡献加上其本身的贡献,由于每往下走一步对手会删除一个点,结果需$-1$,最终判断是否成立取决于$f(1)&gt;0$.</p></blockquote><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**  * @file    : G_-_Game_on_Tree_3.cpp  * @author  : SDTBU_LY  * @version : V1.0.0  * @date    : 2022-04-12 周二 15:14:20  * @上联    : ac自动机fail树上dfs序建可持久化线段树  * @下联    : 后缀自动机的next指针DAG图上求SG函数**/</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_set></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token comment" spellcheck="true">// #include&lt;unordered_map></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 200010</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token keyword">double</span><span class="token operator">></span> PDD<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> dinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> ll llinf<span class="token operator">=</span><span class="token number">0x3f3f3f3f3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> eps<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_1e9 <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> mod_998 <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>w<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> fa<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>fa<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>root<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">>=</span>val<span class="token punctuation">)</span>        f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span>    <span class="token comment" spellcheck="true">//main函数由此开始</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            l<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ACM算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 补题 </tag>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验一数据库定义和数据库更新</title>
      <link href="/2022/04/08/shu-ju-ku-sqlserver-shi-yan-yi-shu-ju-ku-ding-yi-he-shu-ju-ku-geng-xin/"/>
      <url>/2022/04/08/shu-ju-ku-sqlserver-shi-yan-yi-shu-ju-ku-ding-yi-he-shu-ju-ku-geng-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ul><li>了解SQL Server 2014的启动，熟悉如何在SQL Server 2014图形环境下建立数据库和表。学会安装SQL Server 2014的启动和建库、表的操作。其中建表使用两种方法;</li><li>学会对已经建好的表使用SQL语句进行数据插入、删除和更新.</li></ul><h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><h4 id="1-建数据库和表"><a href="#1-建数据库和表" class="headerlink" title="(1).建数据库和表"></a>(1).建数据库和表</h4><p>1.启动数据库服务软件SQL Server 2014.</p><p>2.在SQL Server 2014中建立数据库test.</p><p>3.在test数据库上建立teacher表.</p><table><thead><tr><th>教工号</th><th>姓名</th><th>家庭地址</th><th>电话</th><th>职称</th><th>工资</th><th>所在教研室</th></tr></thead><tbody><tr><td>2111</td><td>朱辉生</td><td>连云港市</td><td>5817693</td><td>副教授</td><td>5800</td><td>计算机软件</td></tr><tr><td>2112</td><td>单建魁</td><td>连云港市</td><td>5817692</td><td>讲师</td><td>4900</td><td>计算机网络</td></tr><tr><td>2113</td><td>赵启升</td><td>连云港市</td><td>5817693</td><td>工程师</td><td>4800</td><td>计算机网络</td></tr><tr><td>2114</td><td>胡云</td><td>连云港市</td><td>5817692</td><td>助教</td><td>3500</td><td>计算机软件</td></tr><tr><td>2115</td><td>葛庆兵</td><td>连云港市</td><td>5817694</td><td>助教</td><td>3500</td><td>计算机体系结构</td></tr></tbody></table><pre class="line-numbers language-SQL"><code class="language-SQL"># 建表create table teacher    (教工号      char(10) primary key,     姓名        char(20) ,     家庭住址    char(40),     电话        char(15),     职称        char(20),     工资        int,     所在教研室  char(40)     )# 录入数据insert into teachervalues ('2111','朱辉生','连云港市','5817693','副教授',5800,'计算机软件'),('2112','单建魁','连云港市','5817692','讲师',4900,'计算机网络'),('2113','赵启升','连云港市','5817693','工程师',4800,'计算机网络'),('2114','胡云','连云港市','5817692','助教',3500,'计算机软件'),('2115','葛庆兵','连云港市','5817694','助教',3500,'计算机体系结构')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-修改数据内容"><a href="#2-修改数据内容" class="headerlink" title="(2).修改数据内容"></a>(2).修改数据内容</h4><ul><li>向teacher表中插入一行数据(‘2210’,’李涛’, ‘上海’,8949200,’副教授’,8900,’计算机应用’).</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">insertinto teachervalues ('2210','李涛','上海','8949200','副教授',8900,'计算机应用')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>更改teacher表数据，将教工号=‘2112’的所在教研室改为‘计算机应用’.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">update teacherset 所在教研室='计算机应用'where 教工号='2112'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>删除teacher表中教工号=‘2112’的行.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">deletefrom teacherwhere 教工号='2112'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-修改表结构"><a href="#3-修改表结构" class="headerlink" title="(3).修改表结构"></a>(3).修改表结构</h4><ul><li>使用T-SQL语句向teacher表中添加籍贯字段.</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">alter table teacher add 籍贯 char(10)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除teacher表中的籍贯字段</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">alter table teacher drop column 籍贯<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验3</title>
      <link href="/2022/04/06/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-3/"/>
      <url>/2022/04/06/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-3/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><p>问题:在通讯录管理程序中,通讯录是由通讯录条目组成的.通讯录条目由<b><font color="Green">姓名</font>、<font color="Red">多个电话(各种类型的电话)</font></b>组成的。可以进行<strong>输入、输出、修改姓名、修改电话</strong>.</p><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><ul><li>多个电话及其类型可用字符串动态数组存储;<pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">int</span> telCount<span class="token punctuation">;</span>  string <span class="token operator">*</span>tels<span class="token punctuation">;</span>  string <span class="token operator">*</span>telType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>用构造函数完成多个电话的初始化;<pre class="line-numbers language-cpp"><code class="language-cpp">  tels<span class="token operator">=</span><span class="token keyword">new</span> string<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>                      telType<span class="token operator">=</span><span class="token keyword">new</span> string<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>在析构函数中完成内存的回收<pre class="line-numbers language-cpp"><code class="language-cpp">  <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tels<span class="token punctuation">;</span>  <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>telType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>其它相应的函数也要做修改</li></ul><p><img src="https://s2.loli.net/2022/04/13/hs2DFziU5lKjRW1.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CommEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        telCount<span class="token operator">=</span>num<span class="token punctuation">;</span>        tels<span class="token operator">=</span><span class="token keyword">new</span> string<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        telType<span class="token operator">=</span><span class="token keyword">new</span> string<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">CommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        telCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tels<span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>telType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">,</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_teltype</span><span class="token punctuation">(</span>string change_teltype<span class="token punctuation">,</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> telCount<span class="token punctuation">;</span>    string name<span class="token punctuation">;</span>    string <span class="token operator">*</span>tels<span class="token punctuation">;</span>    string <span class="token operator">*</span>telType<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_teltype</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> CommEntry<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.修改通讯录条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.修改通讯录条目地址"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-5):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,5):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">,</span>temp_teltype<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>telCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入该通讯录条目的第%d个电话和类型(下标从0开始,中间用空格隔开):  "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> temp_tel <span class="token operator">>></span> temp_teltype<span class="token punctuation">;</span>        <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update_teltype</span><span class="token punctuation">(</span>temp_teltype<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tels<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_teltype</span><span class="token punctuation">(</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> telType<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>telCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>temp_type<span class="token operator">=</span><span class="token function">get_teltype</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个电话类型:  "</span> <span class="token operator">&lt;&lt;</span> temp_type <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_addr<span class="token operator">=</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp_addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">,</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    tels<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_teltype</span><span class="token punctuation">(</span>string change_teltype<span class="token punctuation">,</span><span class="token keyword">int</span> inum<span class="token punctuation">)</span><span class="token punctuation">{</span>    telType<span class="token punctuation">[</span>inum<span class="token punctuation">]</span><span class="token operator">=</span>change_teltype<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话个数:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    CommEntry <span class="token function">data</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp_num<span class="token punctuation">;</span>            string temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目第几个电话(下标从0开始):  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_num<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">,</span>temp_num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_addr<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的地址:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验2</title>
      <link href="/2022/04/06/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-2/"/>
      <url>/2022/04/06/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-2/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><blockquote><p>使用<font color="Blue">面向对象</font>的编程编写一个<strong>通讯录条目管理程序</strong>.<br>问题:在通讯录管理程序中,通讯录是由通讯录条目组成的.通讯录条目由<b><font color="Red">姓名</font>、<font color="Red">电话</font></b>组成的。可以进行<strong>输入、输出、修改姓名、修改电话</strong>.<br>程序的主界面如下所示:</p></blockquote><pre class="line-numbers language-Markdown"><code class="language-Markdown">测试程序：    1.输入通讯录条目    2.输出通讯录条目    3.修改姓名    4.修改电话    0.退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://s2.loli.net/2022/04/13/jSAs7nF3Gopc5m8.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span>    string <span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> CommEntry<span class="token operator">::</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.修改通讯录条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.修改通讯录条目地址"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-5):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,5):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string temp_name<span class="token punctuation">,</span>temp_tel<span class="token punctuation">,</span>temp_addr<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>    <span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> tel<span class="token punctuation">;</span><span class="token punctuation">}</span>string CommEntry<span class="token operator">::</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入查看的通讯录条目查看的内容选项(1为名字,2为电话,3为地址,0为全部):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_name<span class="token operator">=</span><span class="token function">get_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_tel<span class="token operator">=</span><span class="token function">get_tel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp_tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token operator">||</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string temp_addr<span class="token operator">=</span><span class="token function">get_addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp_addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_name</span><span class="token punctuation">(</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_tel</span><span class="token punctuation">(</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CommEntry<span class="token operator">::</span><span class="token function">update_addr</span><span class="token punctuation">(</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CommEntry data<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">inputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            data<span class="token punctuation">.</span><span class="token function">outputcommEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_name</span><span class="token punctuation">(</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_tel</span><span class="token punctuation">(</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_addr<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的地址:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">update_addr</span><span class="token punctuation">(</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Markdown不同的字体颜色及大小</title>
      <link href="/2022/04/04/shi-yong-markdown-bu-tong-de-zi-ti-yan-se-ji-da-xiao/"/>
      <url>/2022/04/04/shi-yong-markdown-bu-tong-de-zi-ti-yan-se-ji-da-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="字体的大小版式和颜色"><a href="#字体的大小版式和颜色" class="headerlink" title="字体的大小版式和颜色"></a>字体的大小版式和颜色</h3><h4 id="版式"><a href="#版式" class="headerlink" title="版式"></a>版式</h4><!-- ```none<font face="黑体">我是黑体字</font><font face="微软雅黑">我是微软雅黑</font><font face="STCAIYUN">我是华文彩云</font><font color=#0099ff size=5 face="宋体">color=#0099ff size=72 face="黑体"</font><font color=#00ffff size=6>color=#00ffff</font><font color=gray size=21>color=gray</font>``` --><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="5" face="黑体">color=#0099ff size=72 face=”黑体”</font><br><font color="#00ffff" size="6">color=#00ffff</font><br><font color="gray" size="21">color=gray</font></p><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><table><tbody>    <tr>        <th>方法说明</th><th>颜色名称</th><th>颜色</th>    </tr>    <tr>        <td><font color="Hotpink">此处实现方法利用 CSDN-markdown 内嵌 html 语言的优势</font></td>        <td><font color="Hotpink">Hotpink</font></td>        <td bgcolor="Hotpink">rgb(240, 248, 255)</td>    </tr>    <tr>        <td><font color="Pink">借助 table, tr, td 等表格标签的 bgcolor 属性实现背景色设置</font></td>        <td><font color="pink">AntiqueWhite</font></td>        <td bgcolor="Pink">rgb(255, 192, 203)</td>    </tr></tbody></table><hr><table><tbody>    <tr>        <th><center>序号</center></th><th><center>颜色名</center></th><th><center>十六进制颜色值</center></th><th><center>颜色</center></th>    </tr>    <tr>        <td><b><center><font>1</font></center></b></td>        <td bgcolor="Black"><font color="AliceBlue">AliceBlue</font></td>        <td bgcolor="Black"><font color="AliceBlue">#F0F8FF</font></td>        <td bgcolor="AliceBlue">rgb(240, 248, 255)</td>    </tr>    <tr>        <td><b><center><font>2</font></center></b></td>        <td bgcolor="Black"><font color="AntiqueWhite">AntiqueWhite</font></td>        <td bgcolor="Black"><font color="AntiqueWhite">#FAEBD7</font></td>        <td bgcolor="AntiqueWhite">rgb(250, 235, 215)</td>    </tr>    <tr>        <td><b><center><font>3</font></center></b></td>        <td bgcolor="Black"><font color="Aqua">Aqua</font></td>        <td bgcolor="Black"><font color="Aqua">#00FFFF</font></td>        <td bgcolor="Aqua">rgb(0, 255, 255)</td>    </tr>    <tr>        <td><b><center><font>4</font></center></b></td>        <td bgcolor="Black"><font color="Aquamarine">Aquamarine</font></td>        <td bgcolor="Black"><font color="Aquamarine">#7FFFD4</font></td>        <td bgcolor="Aquamarine">rgb(127, 255, 212)</td>    </tr>    <tr>        <td><b><center><font>5</font></center></b></td>        <td bgcolor="Black"><font color="Azure">Azure</font></td>        <td bgcolor="Black"><font color="Azure">#F0FFFF</font></td>        <td bgcolor="Azure">rgb(240, 255, 255)</td>    </tr>     <tr>        <td><b><center><font>6</font></center></b></td>        <td bgcolor="Black"><font color="Beige">Beige</font></td>        <td bgcolor="Black"><font color="Beige">#F5F5DC</font></td>        <td bgcolor="Beige">rgb(245, 245, 220)</td>    </tr>     <tr>        <td><b><center><font>7</font></center></b></td>        <td bgcolor="Black"><font color="Bisque">Bisque</font></td>        <td bgcolor="Black"><font color="Bisque">#FFE4C4</font></td>        <td bgcolor="Bisque">rgb(255, 228, 196)</td>    </tr>        <tr>        <td><b><center><font>8</font></center></b></td>        <td><font color="Black">Black</font></td>        <td><font color="Black">#000000</font></td>        <td bgcolor="Black"><font color="White">rgb(0, 0, 0)</font></td>    </tr>    <tr>        <td><b><center><font>9</font></center></b></td>        <td bgcolor="Black"><font color="BlanchedAlmond">BlanchedAlmond</font></td>        <td bgcolor="Black"><font color="BlanchedAlmond">#FFEBCD</font></td>        <td bgcolor="BlanchedAlmond">rgb(255, 235, 205)</td>    </tr>        <tr>        <td><b><center><font>10</font></center></b></td>        <td><font color="Blue">Blue</font></td>        <td><font color="Blue">#0000FF</font></td>        <td bgcolor="Blue"><font color="White">rgb(0, 0, 255)</font></td>    </tr>       <tr>        <td><b><center><font>11</font></center></b></td>        <td><font color="BlueViolet">BlueViolet</font></td>        <td><font color="BlueViolet">#8A2BE2</font></td>        <td bgcolor="BlueViolet"><font color="White">rgb(138, 43, 226)</font></td>    </tr>    <tr>        <td><b><center><font>12</font></center></b></td>        <td><font color="Brown">Brown</font></td>        <td><font color="Brown">#A52A2A</font></td>        <td bgcolor="Brown"><font color="White">rgb(165, 42, 42)</font></td>    </tr>     <tr>        <td><b><center><font>13</font></center></b></td>        <td><font color="BurlyWood">BurlyWood</font></td>        <td><font color="BurlyWood">#DEB887</font></td>        <td bgcolor="BurlyWood"><font color="White">rgb(222, 184, 135)</font></td>    </tr>    <tr>        <td><b><center><font>14</font></center></b></td>        <td><font color="CadetBlue">CadetBlue</font></td>        <td><font color="CadetBlue">#5F9EA0</font></td>        <td bgcolor="CadetBlue"><font color="White">rgb(95, 158, 160)</font></td>    </tr>       <tr>        <td><b><center><font>15</font></center></b></td>        <td bgcolor="Black"><font color="Chartreuse">Chartreuse</font></td>        <td bgcolor="Black"><font color="Chartreuse">#7FFF00</font></td>        <td bgcolor="Chartreuse"><font>rgb(127, 255, 0)</font></td>    </tr>     <tr>        <td><b><center><font>16</font></center></b></td>        <td><font color="Chocolate">Chocolate</font></td>        <td><font color="Chocolate">#D2691E</font></td>        <td bgcolor="Chocolate"><font color="white">rgb(210, 105, 30)</font></td>    </tr>    <tr>        <td><b><center><font>17</font></center></b></td>        <td><font color="Coral">Coral</font></td>        <td><font color="Coral">#FF7F50</font></td>        <td bgcolor="Coral"><font color="white">rgb(255, 127, 80)</font></td>    </tr>         <tr>        <td><b><center><font>18</font></center></b></td>        <td><font color="CornflowerBlue">CornflowerBlue</font></td>        <td><font color="CornflowerBlue">#6495ED</font></td>        <td bgcolor="CornflowerBlue"><font color="white">rgb(100, 149, 237)</font></td>    </tr>    <tr>        <td><b><center><font>19</font></center></b></td>        <td bgcolor="Black"><font color="Cornsilk">Cornsilk</font></td>        <td bgcolor="Black"><font color="Cornsilk">#FFF8DC</font></td>        <td bgcolor="Cornsilk"><font>rgb(255, 248, 220)</font></td>    </tr>    <tr>        <td><b><center><font>20</font></center></b></td>        <td><font color="Crimson">Crimson</font></td>        <td><font color="Crimson">#DC143C</font></td>        <td bgcolor="Crimson"><font color="white">rgb(220, 20, 60)</font></td>    </tr>         <tr>        <td><b><center><font>21</font></center></b></td>        <td bgcolor="Black"><font color="Cyan">Cyan</font></td>        <td bgcolor="Black"><font color="Cyan">#00FFFF</font></td>        <td bgcolor="Cyan"><font>rgb(0, 255, 255)</font></td>    </tr>     <tr>        <td><b><center><font>22</font></center></b></td>        <td><font color="DarkBlue">DarkBlue</font></td>        <td><font color="DarkBlue">#00008B</font></td>        <td bgcolor="DarkBlue"><font color="white">rgb(0, 0, 139)</font></td>    </tr>         <tr>        <td><b><center><font>23</font></center></b></td>        <td><font color="DarkCyan">DarkCyan</font></td>        <td><font color="DarkCyan">#008B8B</font></td>        <td bgcolor="DarkCyan"><font color="white">rgb(0, 139, 139)</font></td>    </tr>     <tr>        <td><b><center><font>24</font></center></b></td>        <td><font color="DarkGoldenRod">DarkGoldenRod</font></td>        <td><font color="DarkGoldenRod">#B8860B</font></td>        <td bgcolor="DarkGoldenRod"><font color="white">rgb(184, 134, 11)</font></td>    </tr>     <tr>        <td><b><center><font>25</font></center></b></td>        <td bgcolor="Black"><font color="DarkGray">DarkGray</font></td>        <td bgcolor="Black"><font color="DarkGray">#A9A9A9</font></td>        <td bgcolor="DarkGray"><font>rgb(169, 169, 169)</font></td>    </tr>     <tr>        <td><b><center><font>26</font></center></b></td>        <td><font color="DarkGreen">DarkGreen</font></td>        <td><font color="DarkGreen">#006400</font></td>        <td bgcolor="DarkGreen"><font color="white">rgb(0, 100, 0)</font></td>    </tr>     <tr>        <td><b><center><font>27</font></center></b></td>        <td><font color="DarkKhaki">DarkKhaki</font></td>        <td><font color="DarkKhaki">#BDB76B</font></td>        <td bgcolor="DarkKhaki"><font color="white">rgb(189, 183, 107)</font></td>    </tr>     <tr>        <td><b><center><font>28</font></center></b></td>        <td><font color="DarkMagenta">DarkMagenta</font></td>        <td><font color="DarkMagenta">#8B008B</font></td>        <td bgcolor="DarkMagenta"><font color="white">rgb(139, 0, 139)</font></td>    </tr>     <tr>        <td><b><center><font>29</font></center></b></td>        <td><font color="DarkOliveGreen">DarkOliveGreen</font></td>        <td><font color="DarkOliveGreen">#556B2F</font></td>        <td bgcolor="DarkOliveGreen"><font color="white">rgb(85, 107, 47)</font></td>    </tr>     <tr>        <td><b><center><font>30</font></center></b></td>        <td><font color="Darkorange">Darkorange</font></td>        <td><font color="Darkorange">#FF8C00</font></td>        <td bgcolor="Darkorange"><font color="white">rgb(255, 140, 0)</font></td>    </tr>     <tr>        <td><b><center><font>31</font></center></b></td>        <td><font color="DarkOrchid">DarkOrchid</font></td>        <td><font color="DarkOrchid">#9932CC</font></td>        <td bgcolor="DarkOrchid"><font color="white">rgb(153, 50, 204)</font></td>    </tr>     <tr>        <td><b><center><font>32</font></center></b></td>        <td><font color="DarkRed">DarkRed</font></td>        <td><font color="DarkRed">#8B0000</font></td>        <td bgcolor="DarkRed"><font color="white">rgb(139, 0, 0)</font></td>    </tr>     <tr>        <td><b><center><font>33</font></center></b></td>        <td><font color="DarkSalmon">DarkSalmon</font></td>        <td><font color="DarkSalmon">#E9967A</font></td>        <td bgcolor="DarkSalmon"><font color="white">rgb(233, 150, 122)</font></td>    </tr>     <tr>        <td><b><center><font>34</font></center></b></td>        <td><font color="DarkSeaGreen">DarkSeaGreen</font></td>        <td><font color="DarkSeaGreen">#8FBC8F</font></td>        <td bgcolor="DarkSeaGreen"><font color="white">rgb(143, 188, 143)</font></td>    </tr>     <tr>        <td><b><center><font>35</font></center></b></td>        <td><font color="DarkSlateBlue">DarkSlateBlue</font></td>        <td><font color="DarkSlateBlue">#483D8B</font></td>        <td bgcolor="DarkSlateBlue"><font color="white">rgb(72, 61, 139)</font></td>    </tr>     <tr>        <td><b><center><font>36</font></center></b></td>        <td><font color="DarkSlateGray">DarkSlateGray</font></td>        <td><font color="DarkSlateGray">#2F4F4F</font></td>        <td bgcolor="DarkSlateGray"><font color="white">rgb(47, 79, 79)</font></td>    </tr>     <tr>        <td><b><center><font>37</font></center></b></td>        <td><font color="DarkTurquoise">DarkTurquoise</font></td>        <td><font color="DarkTurquoise">#00CED1</font></td>        <td bgcolor="DarkTurquoise"><font color="white">rgb(0, 206, 209)</font></td>    </tr>     <tr>        <td><b><center><font>38</font></center></b></td>        <td><font color="DarkViolet">DarkViolet</font></td>        <td><font color="DarkViolet">#9400D3</font></td>        <td bgcolor="DarkViolet"><font color="white">rgb(148, 0, 211)</font></td>    </tr>     <tr>        <td><b><center><font>39</font></center></b></td>        <td><font color="DeepPink">DeepPink</font></td>        <td><font color="DeepPink">#FF1493</font></td>        <td bgcolor="DeepPink"><font color="white">rgb(255, 20, 147)</font></td>    </tr>     <tr>        <td><b><center><font>40</font></center></b></td>        <td><font color="DeepSkyBlue">DeepSkyBlue</font></td>        <td><font color="DeepSkyBlue">#00BFFF</font></td>        <td bgcolor="DeepSkyBlue"><font color="white">rgb(0, 191, 255)</font></td>    </tr>     <tr>        <td><b><center><font>41</font></center></b></td>        <td><font color="DimGray">DimGray</font></td>        <td><font color="DimGray">#696969</font></td>        <td bgcolor="DimGray"><font color="white">rgb(105, 105, 105)</font></td>    </tr>     <tr>        <td><b><center><font>42</font></center></b></td>        <td><font color="DodgerBlue">DodgerBlue</font></td>        <td><font color="DodgerBlue">#1E90FF</font></td>        <td bgcolor="DodgerBlue"><font color="white">rgb(30, 144, 255)</font></td>    </tr>     <tr>        <td><b><center><font>43</font></center></b></td>        <td><font color="Feldspar">Feldspar</font></td>        <td><font color="Feldspar">#D19275</font></td>        <td bgcolor="Feldspar"><font color="white">rgb(209, 146, 117)</font></td>    </tr>     <tr>        <td><b><center><font>44</font></center></b></td>        <td><font color="FireBrick">FireBrick</font></td>        <td><font color="#B22222">#B22222</font></td>        <td bgcolor="FireBrick"><font color="white">rgb(178, 34, 34)</font></td>    </tr>     <tr>        <td><b><center><font>45</font></center></b></td>        <td bgcolor="Black"><font color="FloralWhite">FloralWhite</font></td>        <td bgcolor="Black"><font color="FloralWhite">#FFFAF0</font></td>        <td bgcolor="FloralWhite"><font>rgb(255, 250, 240)</font></td>    </tr>     <tr>        <td><b><center><font>46</font></center></b></td>        <td><font color="ForestGreen">ForestGreen</font></td>        <td><font color="ForestGreen">#228B22</font></td>        <td bgcolor="ForestGreen"><font color="white">rgb(34, 139, 34)</font></td>    </tr>     <tr>        <td><b><center><font>47</font></center></b></td>        <td><font color="Fuchsia">Fuchsia</font></td>        <td><font color="Fuchsia">#FF00FF</font></td>        <td bgcolor="Fuchsia"><font color="white">rgb(255, 0, 255)</font></td>    </tr>     <tr>        <td><b><center><font>48</font></center></b></td>        <td bgcolor="Black"><font color="Gainsboro">Gainsboro</font></td>        <td bgcolor="Black"><font color="Gainsboro">#DCDCDC</font></td>        <td bgcolor="Gainsboro"><font>rgb(220, 220, 220)</font></td>    </tr>     <tr>        <td><b><center><font>49</font></center></b></td>        <td bgcolor="Black"><font color="GhostWhite">GhostWhite</font></td>        <td bgcolor="Black"><font color="GhostWhite">#F8F8FF</font></td>        <td bgcolor="GhostWhite"><font>rgb(248, 248, 255)</font></td>    </tr>     <tr>        <td><b><center><font>50</font></center></b></td>        <td><font color="Gold">Gold</font></td>        <td><font color="Gold">#FFD700</font></td>        <td bgcolor="Gold"><font color="white">rgb(255, 215, 0)</font></td>    </tr>     <tr>        <td><b><center><font>51</font></center></b></td>        <td><font color="GoldenRod">GoldenRod</font></td>        <td><font color="GoldenRod">#DAA520</font></td>        <td bgcolor="GoldenRod"><font color="white">rgb(218, 165, 32)</font></td>    </tr>     <tr>        <td><b><center><font>52</font></center></b></td>        <td><font color="Gray">Gray</font></td>        <td><font color="Gray">#808080</font></td>        <td bgcolor="Gray"><font color="white">rgb(128, 128, 128)</font></td>    </tr>     <tr>        <td><b><center><font>53</font></center></b></td>        <td><font color="Green">Green</font></td>        <td><font color="Green">#008000</font></td>        <td bgcolor="Green"><font color="white">rgb(0, 128, 0)</font></td>    </tr>     <tr>        <td><b><center><font>54</font></center></b></td>        <td bgcolor="Black"><font color="GreenYellow">GreenYellow</font></td>        <td bgcolor="Black"><font color="GreenYellow">#ADFF2F</font></td>        <td bgcolor="GreenYellow"><font>rgb(173, 255, 47)</font></td>    </tr>     <tr>        <td><b><center><font>55</font></center></b></td>        <td bgcolor="Black"><font color="HoneyDew">HoneyDew</font></td>        <td bgcolor="Black"><font color="HoneyDew">#F0FFF0</font></td>        <td bgcolor="HoneyDew"><font>rgb(240, 255, 240)</font></td>    </tr>     <tr>        <td><b><center><font>56</font></center></b></td>        <td><font color="HotPink">HotPink</font></td>        <td><font color="HotPink">#FF69B4</font></td>        <td bgcolor="HotPink"><font color="white">rgb(255, 105, 180)</font></td>    </tr>     <tr>        <td><b><center><font>57</font></center></b></td>        <td><font color="IndianRed">IndianRed</font></td>        <td><font color="IndianRed">#CD5C5C</font></td>        <td bgcolor="IndianRed"><font color="white">rgb(205, 92, 92)</font></td>    </tr>     <tr>        <td><b><center><font>58</font></center></b></td>        <td><font color="Indigo">Indigo</font></td>        <td><font color="Indigo">#4B0082</font></td>        <td bgcolor="Indigo"><font color="white">rgb(75, 0, 130)</font></td>    </tr>     <tr>        <td><b><center><font>59</font></center></b></td>        <td bgcolor="Black"><font color="Ivory">Ivory</font></td>        <td bgcolor="Black"><font color="Ivory">#FFFFF0</font></td>        <td bgcolor="Ivory"><font color="">rgb(255, 255, 240)</font></td>    </tr>     <tr>        <td><b><center><font>60</font></center></b></td>        <td bgcolor="Black"><font color="Khaki">Khaki</font></td>        <td bgcolor="Black"><font color="Khaki">#F0E68C</font></td>        <td bgcolor="Khaki"><font>rgb(240, 230, 140)</font></td>    </tr>     <tr>        <td><b><center><font>61</font></center></b></td>        <td bgcolor="Black"><font color="Lavender">Lavender</font></td>        <td bgcolor="Black"><font color="Lavender">#E6E6FA</font></td>        <td bgcolor="Lavender"><font>rgb(230, 230, 250)</font></td>    </tr>     <tr>        <td><b><center><font>62</font></center></b></td>        <td bgcolor="Black"><font color="LavenderBlush">LavenderBlush</font></td>        <td bgcolor="Black"><font color="LavenderBlush">#FFF0F5</font></td>        <td bgcolor="LavenderBlush"><font>rgb(255, 240, 245)</font></td>    </tr>     <tr>        <td><b><center><font>63</font></center></b></td>        <td bgcolor="Black"><font color="LawnGreen">LawnGreen</font></td>        <td bgcolor="Black"><font color="LawnGreen">#7CFC00</font></td>        <td bgcolor="LawnGreen"><font>rgb(124, 252, 0)</font></td>    </tr>     <tr>        <td><b><center><font>64</font></center></b></td>        <td bgcolor="Black"><font color="LemonChiffon">LemonChiffon</font></td>        <td bgcolor="Black"><font color="LemonChiffon">#FFFACD</font></td>        <td bgcolor="LemonChiffon"><font>rgb(255, 250, 205)</font></td>    </tr>     <tr>        <td><b><center><font>65</font></center></b></td>        <td bgcolor="Black"><font color="LightBlue">LightBlue</font></td>        <td bgcolor="Black"><font color="LightBlue">#ADD8E6</font></td>        <td bgcolor="LightBlue"><font>rgb(173, 216, 230)</font></td>    </tr>     <tr>        <td><b><center><font>66</font></center></b></td>        <td><font color="LightCoral">LightCoral</font></td>        <td><font color="LightCoral">#F08080</font></td>        <td bgcolor="LightCoral"><font color="white">rgb(240, 128, 128)</font></td>    </tr>     <tr>        <td><b><center><font>67</font></center></b></td>        <td bgcolor="Black"><font color="LightCyan">LightCyan</font></td>        <td bgcolor="Black"><font color="LightCyan">#E0FFFF</font></td>        <td bgcolor="LightCyan"><font>rgb(224, 255, 255)</font></td>    </tr>     <tr>        <td><b><center><font>68</font></center></b></td>        <td bgcolor="Black"><font color="LightGoldenRodYellow">LightGoldenRodYellow</font></td>        <td bgcolor="Black"><font color="LightGoldenRodYellow">#FAFAD2</font></td>        <td bgcolor="LightGoldenRodYellow"><font>rgb(250, 250, 210)</font></td>    </tr>     <tr>        <td><b><center><font>69</font></center></b></td>        <td bgcolor="Black"><font color="LightGrey">LightGrey</font></td>        <td bgcolor="Black"><font color="LightGrey">#D3D3D3</font></td>        <td bgcolor="LightGrey"><font>rgb(211, 211, 211)</font></td>    </tr>     <tr>        <td><b><center><font>70</font></center></b></td>        <td bgcolor="Black"><font color="LightGreen">LightGreen</font></td>        <td bgcolor="Black"><font color="LightGreen">#90EE90</font></td>        <td bgcolor="LightGreen"><font>rgb(144, 238, 144)</font></td>    </tr>     <tr>        <td><b><center><font>71</font></center></b></td>        <td bgcolor="Black"><font color="LightPink">LightPink</font></td>        <td bgcolor="Black"><font color="LightPink">#FFB6C1</font></td>        <td bgcolor="LightPink"><font>rgb(255, 182, 193)</font></td>    </tr>     <tr>        <td><b><center><font>72</font></center></b></td>        <td bgcolor="Black"><font color="LightSalmon">LightSalmon</font></td>        <td bgcolor="Black"><font color="LightSalmon">#FFA07A</font></td>        <td bgcolor="LightSalmon"><font>rgb(255, 160, 122)</font></td>    </tr>     <tr>        <td><b><center><font>73</font></center></b></td>        <td bgcolor="Black"><font color="LightSeaGreen">LightSeaGreen</font></td>        <td bgcolor="Black"><font color="LightSeaGreen">#20B2AA</font></td>        <td bgcolor="LightSeaGreen"><font>rgb(32, 178, 170)</font></td>    </tr>     <tr>        <td><b><center><font>74</font></center></b></td>        <td bgcolor="Black"><font color="LightSkyBlue">LightSkyBlue</font></td>        <td bgcolor="Black"><font color="LightSkyBlue">#87CEFA</font></td>        <td bgcolor="LightSkyBlue"><font>rgb(135, 206, 250)</font></td>    </tr>     <tr>        <td><b><center><font>75</font></center></b></td>        <td bgcolor="Black"><font color="LightSlateBlue">LightSlateBlue</font></td>        <td bgcolor="Black"><font color="LightSlateBlue">#8470FF</font></td>        <td bgcolor="LightSlateBlue"><font color="white">rgb(132, 112, 255)</font></td>    </tr>     <tr>        <td><b><center><font>76</font></center></b></td>        <td bgcolor="Black"><font color="LightSlateGray">LightSlateGray</font></td>        <td bgcolor="Black"><font color="LightSlateGray">#778899</font></td>        <td bgcolor="LightSlateGray"><font color="white">rgb(119, 136, 153)</font></td>    </tr>     <tr>        <td><b><center><font>77</font></center></b></td>        <td bgcolor="Black"><font color="LightSteelBlue">LightSteelBlue</font></td>        <td bgcolor="Black"><font color="LightSteelBlue">#B0C4DE</font></td>        <td bgcolor="LightSteelBlue"><font>rgb(176, 196, 222)</font></td>    </tr>     <tr>        <td><b><center><font>78</font></center></b></td>        <td bgcolor="Black"><font color="LightYellow">LightYellow</font></td>        <td bgcolor="Black"><font color="LightYellow">#FFFFE0</font></td>        <td bgcolor="LightYellow"><font>rgb(255, 255, 224)</font></td>    </tr>     <tr>        <td><b><center><font>79</font></center></b></td>        <td bgcolor="Black"><font color="Lime">Lime</font></td>        <td bgcolor="Black"><font color="Lime">#00FF00</font></td>        <td bgcolor="Lime"><font>rgb(0, 255, 0)</font></td>    </tr>     <tr>        <td><b><center><font>80</font></center></b></td>        <td bgcolor="Black"><font color="LimeGreen">LimeGreen</font></td>        <td bgcolor="Black"><font color="LimeGreen">#32CD32</font></td>        <td bgcolor="LimeGreen"><font>rgb(50, 205, 50)</font></td>    </tr>     <tr>        <td><b><center><font>81</font></center></b></td>        <td bgcolor="Black"><font color="Linen">Linen</font></td>        <td bgcolor="Black"><font color="Linen">#FAF0E6</font></td>        <td bgcolor="Linen"><font>rgb(250, 240, 230)</font></td>    </tr>     <tr>        <td><b><center><font>82</font></center></b></td>        <td><font color="Magenta">Magenta</font></td>        <td><font color="Magenta">#FF00FF</font></td>        <td bgcolor="Magenta"><font color="white">rgb(255, 0, 255)</font></td>    </tr>     <tr>        <td><b><center><font>83</font></center></b></td>        <td><font color="Maroon">Maroon</font></td>        <td><font color="Maroon">#800000</font></td>        <td bgcolor="Maroon"><font color="white">rgb(128, 0, 0)</font></td>    </tr>     <tr>        <td><b><center><font>84</font></center></b></td>        <td><font color="MediumAquaMarine">MediumAquaMarine</font></td>        <td><font color="MediumAquaMarine">#66CDAA</font></td>        <td bgcolor="MediumAquaMarine"><font color="white">rgb(102, 205, 170)</font></td>    </tr>     <tr>        <td><b><center><font>85</font></center></b></td>        <td><font color="MediumBlue">MediumBlue</font></td>        <td><font color="MediumBlue">#0000CD</font></td>        <td bgcolor="MediumBlue"><font color="white">rgb(0, 0, 205)</font></td>    </tr>     <tr>        <td><b><center><font>86</font></center></b></td>        <td><font color="MediumOrchid">MediumOrchid</font></td>        <td><font color="MediumOrchid">#BA55D3</font></td>        <td bgcolor="MediumOrchid"><font color="white">rgb(186, 85, 211)</font></td>    </tr>     <tr>        <td><b><center><font>87</font></center></b></td>        <td><font color="MediumPurple">MediumPurple</font></td>        <td><font color="MediumPurple">#9370D8</font></td>        <td bgcolor="MediumPurple"><font color="white">rgb(147, 112, 216)</font></td>    </tr>     <tr>        <td><b><center><font>88</font></center></b></td>        <td><font color="MediumSeaGreen">MediumSeaGreen</font></td>        <td><font color="MediumSeaGreen">#3CB371</font></td>        <td bgcolor="MediumSeaGreen"><font color="white">rgb(60, 179, 113)</font></td>    </tr>     <tr>        <td><b><center><font>89</font></center></b></td>        <td><font color="MediumSlateBlue">MediumSlateBlue</font></td>        <td><font color="MediumSlateBlue">#7B68EE</font></td>        <td bgcolor="MediumSlateBlue"><font color="white">rgb(123, 104, 238)</font></td>    </tr>     <tr>        <td><b><center><font>90</font></center></b></td>        <td bgcolor="Black"><font color="MediumSpringGreen">MediumSpringGreen</font></td>        <td bgcolor="Black"><font color="MediumSpringGreen">#00FA9A</font></td>        <td bgcolor="MediumSpringGreen"><font>rgb(0, 250, 154)</font></td>    </tr>     <tr>        <td><b><center><font>91</font></center></b></td>        <td><font color="MediumTurquoise">MediumTurquoise</font></td>        <td><font color="MediumTurquoise">#48D1CC</font></td>        <td bgcolor="MediumTurquoise"><font color="white">rgb(72, 209, 204)</font></td>    </tr>     <tr>        <td><b><center><font>92</font></center></b></td>        <td><font color="MediumVioletRed">MediumVioletRed</font></td>        <td><font color="MediumVioletRed">#C71585</font></td>        <td bgcolor="MediumVioletRed"><font color="white">rgb(199, 21, 133)</font></td>    </tr>     <tr>        <td><b><center><font>93</font></center></b></td>        <td><font color="MidnightBlue">MidnightBlue</font></td>        <td><font color="MidnightBlue">#191970</font></td>        <td bgcolor="MidnightBlue"><font color="white">rgb(25, 25, 112)</font></td>    </tr>     <tr>        <td><b><center><font>94</font></center></b></td>        <td bgcolor="black"><font color="MintCream">MintCream</font></td>        <td bgcolor="black"><font color="MintCream">#F5FFFA</font></td>        <td bgcolor="MintCream"><font>rgb(245, 255, 250)</font></td>    </tr>     <tr>        <td><b><center><font>95</font></center></b></td>        <td bgcolor="black"><font color="MistyRose">MistyRose</font></td>        <td bgcolor="black"><font color="MistyRose">#FFE4E1</font></td>        <td bgcolor="MistyRose"><font>rgb(255, 228, 225)</font></td>    </tr>     <tr>        <td><b><center><font>96</font></center></b></td>        <td bgcolor="black"><font color="Moccasin">Moccasin</font></td>        <td bgcolor="black"><font color="Moccasin">#FFE4B5</font></td>        <td bgcolor="Moccasin"><font>rgb(255, 228, 181)</font></td>    </tr>     <tr>        <td><b><center><font>97</font></center></b></td>        <td bgcolor="black"><font color="NavajoWhite">NavajoWhite</font></td>        <td bgcolor="black"><font color="NavajoWhite">#FFDEAD</font></td>        <td bgcolor="NavajoWhite"><font>rgb(255, 222, 173)</font></td>    </tr>     <tr>        <td><b><center><font>98</font></center></b></td>        <td><font color="Navy">Navy</font></td>        <td><font color="Navy">#000080</font></td>        <td bgcolor="Navy"><font color="white">rgb(0, 0, 128)</font></td>    </tr>     <tr>        <td><b><center><font>99</font></center></b></td>        <td bgcolor="black"><font color="OldLace">OldLace</font></td>        <td bgcolor="black"><font color="OldLace">#FDF5E6</font></td>        <td bgcolor="OldLace"><font>rgb(253, 245, 230)</font></td>    </tr>     <tr>        <td><b><center><font>100</font></center></b></td>        <td><font color="Olive">Olive</font></td>        <td><font color="Olive">#808000</font></td>        <td bgcolor="Olive"><font color="white">rgb(128, 128, 0)</font></td>    </tr>         <tr>        <td><b><center><font>101</font></center></b></td>        <td><font color="OliveDrab">OliveDrab</font></td>        <td><font color="OliveDrab">#6B8E23</font></td>        <td bgcolor="OliveDrab"><font color="white">rgb(107, 142, 35)</font></td>    </tr>        <tr>        <td><b><center><font>102</font></center></b></td>        <td><font color="Orange">Orange</font></td>        <td><font color="Orange">#FFA500</font></td>        <td bgcolor="Orange"><font color="white">rgb(255, 165, 0)</font></td>    </tr>        <tr>        <td><b><center><font>103</font></center></b></td>        <td><font color="OrangeRed">OrangeRed</font></td>        <td><font color="OrangeRed">#FF4500</font></td>        <td bgcolor="OrangeRed"><font color="white">rgb(255, 69, 0)</font></td>    </tr>        <tr>        <td><b><center><font>104</font></center></b></td>        <td><font color="Orchid">Orchid</font></td>        <td><font color="Orchid">#DA70D6</font></td>        <td bgcolor="Orchid"><font color="white">rgb(218, 112, 214)</font></td>    </tr>       <tr>        <td><b><center><font>105</font></center></b></td>        <td bgcolor="Black"><font color="PaleGoldenRod">PaleGoldenRod</font></td>        <td bgcolor="Black"><font color="PaleGoldenRod">#EEE8AA</font></td>        <td bgcolor="PaleGoldenRod"><font>rgb(238, 232, 170)</font></td>    </tr>      <tr>        <td><b><center><font>106</font></center></b></td>        <td bgcolor="Black"><font color="PaleGreen">PaleGreen</font></td>        <td bgcolor="Black"><font color="PaleGreen">#98FB98</font></td>        <td bgcolor="PaleGreen"><font>rgb(152, 251, 152)</font></td>    </tr>      <tr>        <td><b><center><font>107</font></center></b></td>        <td bgcolor="Black"><font color="PaleTurquoise">PaleTurquoise</font></td>        <td bgcolor="Black"><font color="PaleTurquoise">#AFEEEE</font></td>        <td bgcolor="PaleTurquoise"><font>rgb(175, 238, 238)</font></td>    </tr>      <tr>        <td><b><center><font>108</font></center></b></td>        <td><font color="PaleVioletRed">PaleVioletRed</font></td>        <td><font color="PaleVioletRed">#D87093</font></td>        <td bgcolor="PaleVioletRed"><font color="white">rgb(216, 112, 147)</font></td>    </tr>      <tr>        <td><b><center><font>109</font></center></b></td>        <td bgcolor="Black"><font color="PapayaWhip">PapayaWhip</font></td>        <td bgcolor="Black"><font color="PapayaWhip">#FFEFD5</font></td>        <td bgcolor="PapayaWhip"><font>rgb(255, 239, 213)</font></td>    </tr>      <tr>        <td><b><center><font>110</font></center></b></td>        <td bgcolor="Black"><font color="PeachPuff">PeachPuff</font></td>        <td bgcolor="Black"><font color="PeachPuff">#FFDAB9</font></td>        <td bgcolor="PeachPuff"><font>rgb(255, 218, 185)</font></td>    </tr>      <tr>        <td><b><center><font>111</font></center></b></td>        <td><font color="Peru">Peru</font></td>        <td><font color="Peru">#CD853F</font></td>        <td bgcolor="Peru"><font color="white">rgb(205, 133, 63)</font></td>    </tr>      <tr>        <td><b><center><font>112</font></center></b></td>        <td><font color="Pink">Pink</font></td>        <td><font color="Pink">#FFC0CB</font></td>        <td bgcolor="Pink"><font>rgb(255, 192, 203)</font></td>    </tr>      <tr>        <td><b><center><font>113</font></center></b></td>        <td><font color="Plum">Plum</font></td>        <td><font color="Plum">#DDA0DD</font></td>        <td bgcolor="Plum"><font>rgb(221, 160, 221)</font></td>    </tr>      <tr>        <td><b><center><font>114</font></center></b></td>        <td><font color="PowderBlue">PowderBlue</font></td>        <td><font color="PowderBlue">#B0E0E6</font></td>        <td bgcolor="PowderBlue"><font>rgb(176, 224, 230)</font></td>    </tr>      <tr>        <td><b><center><font>115</font></center></b></td>        <td><font color="Purple">Purple</font></td>        <td><font color="Purple">#800080</font></td>        <td bgcolor="Purple"><font color="white">rgb(128, 0, 128)</font></td>    </tr>      <tr>        <td><b><center><font>116</font></center></b></td>        <td><font color="Red">Red</font></td>        <td><font color="Red">#FF0000</font></td>        <td bgcolor="Red"><font color="white">rgb(255, 0, 0)</font></td>    </tr>      <tr>        <td><b><center><font>117</font></center></b></td>        <td><font color="RosyBrown">RosyBrown</font></td>        <td><font color="RosyBrown">#BC8F8F</font></td>        <td bgcolor="RosyBrown"><font color="white">rgb(188, 143, 143)</font></td>    </tr>      <tr>        <td><b><center><font>118</font></center></b></td>        <td><font color="RoyalBlue">RoyalBlue</font></td>        <td><font color="RoyalBlue">#4169E1</font></td>        <td bgcolor="RoyalBlue"><font color="white">rgb(65, 105, 225)</font></td>    </tr>      <tr>        <td><b><center><font>119</font></center></b></td>        <td><font color="SaddleBrown">SaddleBrown</font></td>        <td><font color="SaddleBrown">#8B4513</font></td>        <td bgcolor="SaddleBrown"><font color="white">rgb(139, 69, 19)</font></td>    </tr>      <tr>        <td><b><center><font>120</font></center></b></td>        <td><font color="Salmon">Salmon</font></td>        <td><font color="Salmon">#FA8072</font></td>        <td bgcolor="Salmon"><font color="white">rgb(250, 128, 114)</font></td>    </tr>      <tr>        <td><b><center><font>121</font></center></b></td>        <td><font color="SandyBrown">SandyBrown</font></td>        <td><font color="SandyBrown">#F4A460</font></td>        <td bgcolor="SandyBrown"><font color="white">rgb(244, 164, 96)</font></td>    </tr>      <tr>        <td><b><center><font>122</font></center></b></td>        <td><font color="SeaGreen">SeaGreen</font></td>        <td><font color="SeaGreen">#2E8B57</font></td>        <td bgcolor="SeaGreen"><font color="white">rgb(46, 139, 87)</font></td>    </tr>      <tr>        <td><b><center><font>123</font></center></b></td>        <td bgcolor="Black"><font color="SeaShell">SeaShell</font></td>        <td bgcolor="Black"><font color="SeaShell">#FFF5EE</font></td>        <td bgcolor="SeaShell"><font>rgb(255, 245, 238)</font></td>    </tr>      <tr>        <td><b><center><font>124</font></center></b></td>        <td><font color="Sienna">Sienna</font></td>        <td><font color="Sienna">#A0522D</font></td>        <td bgcolor="Sienna"><font color="white">rgb(160, 82, 45)</font></td>    </tr>      <tr>        <td><b><center><font>125</font></center></b></td>        <td bgcolor="Black"><font color="Silver">Silver</font></td>        <td bgcolor="Black"><font color="Silver">#C0C0C0</font></td>        <td bgcolor="Silver"><font>rgb(192, 192, 192)</font></td>    </tr>      <tr>        <td><b><center><font>126</font></center></b></td>        <td><font color="SkyBlue">SkyBlue</font></td>        <td><font color="SkyBlue">#87CEEB</font></td>        <td bgcolor="SkyBlue"><font color="white">rgb(135, 206, 235)</font></td>    </tr>      <tr>        <td><b><center><font>127</font></center></b></td>        <td><font color="SlateBlue">SlateBlue</font></td>        <td><font color="SlateBlue">#6A5ACD</font></td>        <td bgcolor="SlateBlue"><font color="white">rgb(106, 90, 205)</font></td>    </tr>      <tr>        <td><b><center><font>128</font></center></b></td>        <td><font color="SlateGray">SlateGray</font></td>        <td><font color="SlateGray">#708090</font></td>        <td bgcolor="SlateGray"><font color="white">rgb(112, 128, 144)</font></td>    </tr>      <tr>        <td><b><center><font>129</font></center></b></td>        <td bgcolor="Black"><font color="Snow">Snow</font></td>        <td bgcolor="Black"><font color="Snow">#FFFAFA</font></td>        <td bgcolor="Snow"><font>rgb(255, 250, 250)</font></td>    </tr>          <tr>        <td><b><center><font>130</font></center></b></td>        <td bgcolor="Black"><font color="SpringGreen">SpringGreen</font></td>        <td bgcolor="Black"><font color="SpringGreen">#00FF7F</font></td>        <td bgcolor="SpringGreen"><font>rgb(0, 255, 127)</font></td>    </tr>         <tr>        <td><b><center><font>131</font></center></b></td>        <td><font color="SteelBlue">SteelBlue</font></td>        <td><font color="SteelBlue">#4682B4</font></td>        <td bgcolor="SteelBlue"><font color="white">rgb(70, 130, 180)</font></td>    </tr>       <tr>        <td><b><center><font>132</font></center></b></td>        <td><font color="Tan">Tan</font></td>        <td><font color="Tan">#D2B48C</font></td>        <td bgcolor="Tan"><font color="white">rgb(210, 180, 140)</font></td>    </tr>     <tr>        <td><b><center><font>133</font></center></b></td>        <td><font color="Teal">Teal</font></td>        <td><font color="Teal">#008080</font></td>        <td bgcolor="Teal"><font color="white">rgb(0, 128, 128)</font></td>    </tr>     <tr>        <td><b><center><font>134</font></center></b></td>        <td bgcolor="Black"><font color="Thistle">Thistle</font></td>        <td bgcolor="Black"><font color="Thistle">#D8BFD8</font></td>        <td bgcolor="Thistle"><font>rgb(216, 191, 216)</font></td>    </tr>     <tr>        <td><b><center><font>135</font></center></b></td>        <td><font color="Tomato">Tomato</font></td>        <td><font color="Tomato">#FF6347</font></td>        <td bgcolor="Tomato"><font color="white">rgb(255, 99, 71)</font></td>    </tr>     <tr>        <td><b><center><font>136</font></center></b></td>        <td><font color="Turquoise">Turquoise</font></td>        <td><font color="Turquoise">#40E0D0</font></td>        <td bgcolor="Turquoise"><font color="white">rgb(64, 224, 208)</font></td>    </tr>     <tr>        <td><b><center><font>137</font></center></b></td>        <td><font color="Violet">Violet</font></td>        <td><font color="Violet">#EE82EE</font></td>        <td bgcolor="Violet"><font color="white">rgb(238, 130, 238)</font></td>    </tr>     <tr>        <td><b><center><font>138</font></center></b></td>        <td><font color="VioletRed">VioletRed</font></td>        <td><font color="VioletRed">#D02090</font></td>        <td bgcolor="VioletRed"><font color="white">rgb(208, 32, 144)</font></td>    </tr>     <tr>        <td><b><center><font>139</font></center></b></td>        <td bgcolor="Black"><font color="Wheat">Wheat</font></td>        <td bgcolor="Black"><font color="Wheat">#F5DEB3</font></td>        <td bgcolor="Wheat"><font>rgb(245, 222, 179)</font></td>    </tr>     <tr>        <td><b><center><font>140</font></center></b></td>        <td bgcolor="Black"><font color="White">White</font></td>        <td bgcolor="Black"><font color="White">#FFFFFF</font></td>        <td bgcolor="White"><font>rgb(255, 255, 255)</font></td>    </tr>         <tr>        <td><b><center><font>141</font></center></b></td>        <td bgcolor="Black"><font color="WhiteSmoke">WhiteSmoke</font></td>        <td bgcolor="Black"><font color="WhiteSmoke">#F5F5F5</font></td>        <td bgcolor="WhiteSmoke"><font>rgb(245, 245, 245)</font></td>    </tr>         <tr>        <td><b><center><font>142</font></center></b></td>        <td bgcolor="Black"><font color="Yellow">Yellow</font></td>        <td bgcolor="Black"><font color="Yellow">#FFFF00</font></td>        <td bgcolor="Yellow"><font>rgb(255, 255, 0)</font></td>    </tr>     <tr>        <td><b><center><font>143</font></center></b></td>        <td bgcolor="Black"><font color="YellowGreen">YellowGreen</font></td>        <td bgcolor="Black"><font color="YellowGreen">#9ACD32</font></td>        <td bgcolor="YellowGreen"><font>rgb(154, 205, 50)</font></td>    </tr> </tbody></table>]]></content>
      
      
      <categories>
          
          <category> 博客初步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown语法 </tag>
            
            <tag> 博客文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计实验1</title>
      <link href="/2022/04/03/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-1/"/>
      <url>/2022/04/03/mian-xiang-dui-xiang-cheng-xu-she-ji-shi-yan-1/</url>
      
        <content type="html"><![CDATA[<h4 id="题目概要"><a href="#题目概要" class="headerlink" title="题目概要"></a>题目概要</h4><blockquote><p>使用过程式编程编写一个<strong>通讯录条目管理程序</strong>.<br>问题:在通讯录管理程序中,通讯录是由通讯录条目组成的.通讯录条目由<b><font color="Red">姓名</font>、<font color="Red">电话</font></b>组成的。可以进行<strong>输入、输出、修改姓名、修改电话</strong>.<br>程序的主界面如下所示:</p></blockquote><pre class="line-numbers language-Markdown"><code class="language-Markdown">测试程序：    1.输入通讯录条目    2.输出通讯录条目    3.修改姓名    4.修改电话    0.退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><blockquote><p>完善通讯录条目程序</p><blockquote><ul><li>加入对”地址”的管理</li><li>可以输入、输出条目。</li><li>可以修改条目的每一个<b><font color="Red">子项(name, tel, addr)</font></b></li></ul></blockquote></blockquote><blockquote><p>第一个实验只要求做一个通讯录条目的管理。<br>做完第一个实验后，可考虑如何编写一个通讯录管理程序。</p><blockquote><p>（1）如何存储通讯录？数组、链表、还是其它方式？<br>（2）第一次输入完多个条目以后，如何插入、删除一个条目？<br>（3）如何输入姓名，查找电话。</p></blockquote></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> commEntry<span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    string tel<span class="token punctuation">;</span>    string addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> op<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-------------功能菜单-------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         1.输入通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         2.输出通讯录条目"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         3.修改通讯录条目姓名"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         4.修改通讯录条目电话"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         5.修改通讯录条目地址"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"         0.退出系统"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------------------------------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你要选择的功能编号(0-5):  "</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> op<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>op<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入出错,请重新输入你要选择的功能编号(0,5):  "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">inputcommEntry</span><span class="token punctuation">(</span>commEntry <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的名字:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的电话:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp<span class="token punctuation">.</span>tel<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该通讯录条目的地址:  "</span> <span class="token punctuation">;</span>    cin <span class="token operator">>></span> temp<span class="token punctuation">.</span>addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">outputcommEntry</span><span class="token punctuation">(</span>commEntry <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的名字:  "</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的电话:  "</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">.</span>tel <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该通讯录条目的地址:  "</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">.</span>addr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update_name</span><span class="token punctuation">(</span>commEntry <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span>string change_name<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">.</span>name<span class="token operator">=</span>change_name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update_tel</span><span class="token punctuation">(</span>commEntry <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span>string change_tel<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">.</span>tel<span class="token operator">=</span>change_tel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update_addr</span><span class="token punctuation">(</span>commEntry <span class="token operator">&amp;</span>temp<span class="token punctuation">,</span>string change_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">.</span>addr<span class="token operator">=</span>change_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    commEntry data<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> op<span class="token operator">=</span><span class="token function">displaymenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">inputcommEntry</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token function">outputcommEntry</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_name<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的名字:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_name<span class="token punctuation">;</span>            <span class="token function">update_name</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>temp_name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_tel<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的电话:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_tel<span class="token punctuation">;</span>            <span class="token function">update_tel</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>temp_tel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string temp_addr<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要修改的通讯录条目的地址:  "</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> temp_addr<span class="token punctuation">;</span>            <span class="token function">update_addr</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>temp_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面向对象程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象程序设计 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQLServer实验前言</title>
      <link href="/2022/04/01/shu-ju-ku-sqlserver-shi-yan-qian-yan/"/>
      <url>/2022/04/01/shu-ju-ku-sqlserver-shi-yan-qian-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建学生信息表Student"><a href="#1-创建学生信息表Student" class="headerlink" title="1 创建学生信息表Student"></a>1 创建学生信息表Student</h3><pre class="line-numbers language-SQL"><code class="language-SQL">Create table Student    (Sno char(10) primary key,     Sname char(20) unique,     Ssex char(2),     Sage smallint,     Sdept char(30)    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建课程信息表Course"><a href="#2-创建课程信息表Course" class="headerlink" title="2 创建课程信息表Course"></a>2 创建课程信息表Course</h3><pre class="line-numbers language-SQL"><code class="language-SQL">Create table Course    (Cno char(4) primary key,     Cname char(40) NOT NULL,     Cpno char(4),     Credit smallint,     foreign key(Cpno) references Course(Cno)    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建选课信息表SC"><a href="#3-创建选课信息表SC" class="headerlink" title="3 创建选课信息表SC"></a>3 创建选课信息表SC</h3><pre class="line-numbers language-SQL"><code class="language-SQL">Create table SC    (Sno char(10),     Cno char(4),     Grade smallint,     primary key(Sno,Cno),     foreign key(Sno) references Student(Sno),     foreign key(Cno) references Course(Cno)     )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除选课信息表SC"><a href="#4-删除选课信息表SC" class="headerlink" title="4 删除选课信息表SC"></a>4 删除选课信息表SC</h3><pre class="line-numbers language-SQL"><code class="language-SQL">drop table SC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-录入学生信息表Student"><a href="#5-录入学生信息表Student" class="headerlink" title="5 录入学生信息表Student"></a>5 录入学生信息表Student</h3><pre class="line-numbers language-SQL"><code class="language-SQL">insertinto StudentValues  ('202001001','张小玲','女',19,'电子信息'),        ('202001008','张玲','女',20,'电子信息'),        ('202002001','张强','男',21,'计算机'),        ('202002003','张峰','男',21,'电子信息'),        ('202002005','刘梅','女',17,'计算机'),        ('201902001','王一','男',22,'计算机'),        ('201903005','郑丽','女',18,'网络工程'),        ('202101003','沈艳','女',19,'电子信息'),        ('202103001','赵丽红','女',20,'网络工程'),        ('202104001','李宏伟','男',19,'通信工程'),        ('202104005','刘景鹏','男',21,'通信工程')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-录入课程信息表Course"><a href="#6-录入课程信息表Course" class="headerlink" title="6 录入课程信息表Course"></a>6 录入课程信息表Course</h3><pre class="line-numbers language-SQL"><code class="language-SQL">insertinto CourseValues   ('1','数据库','5',4),         ('2','高等数学',NULL,2),         ('3','信息系统','1',4),         ('4','操作系统','6',3),         ('5','数据结构','7',4),         ('6','数据处理',NULL,2),         ('7','C语言','6',5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-录入选课信息表SC"><a href="#7-录入选课信息表SC" class="headerlink" title="7  录入选课信息表SC"></a>7  录入选课信息表SC</h3><pre class="line-numbers language-SQL"><code class="language-SQL">insertinto SCValues   ('202001001','1',NULL),         ('202001001','2',95),         ('202001001','4',NULL),         ('202001001','7',87),         ('202001008','4',65),         ('202001008','2',59),         ('202002001','3',63),         ('202002001','7',74),         ('202002001','2',84),         ('202002003','4',58),         ('202002003','2',76),         ('202002003','1',89),         ('202002005','3',77),         ('202002005','2',69),         ('201902001','5',83),         ('201902001','1',62),         ('201903005','3',43),         ('201903005','7',64),         ('202101003','4',87),         ('202104001','3',97),         ('202104001','5',65)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Markdown语法写文章</title>
      <link href="/2022/03/25/shi-yong-markdown-yu-fa-xie-wen-zhang/"/>
      <url>/2022/03/25/shi-yong-markdown-yu-fa-xie-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>学会用$Markdown语法$写博客文章是非常重要的,本文主要对$Markdown语法$常见操作的使用进行编写(有时候自己也会忘记一些语法，可通过该博客查看回忆).</p></blockquote><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h3><p>标题的语法如下:</p><!-- ```none# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题``` --><p>在$Markdown$中标题使用<code>#</code>号表示,一个<code>#</code>代表一级标题,一共有六种不同字体大小(第$i$级标题的$i$越大,字体越小)的标题.</p><p><img src="https://s2.loli.net/2022/03/28/FlERbBcyMarSJ6p.png" alt="图1  6种不同标题的效果展示"></p><h3 id="2-段落"><a href="#2-段落" class="headerlink" title="2 段落"></a>2 段落</h3><p>在$Markdown$中每写一个段落需要换行一次,没有空格两个以上并且按下回车键(换行),这一段文字就自成一段.(<b><font color="Green">一般写完一段就空一行接着写下一段</font></b>).</p><p><img src="https://s2.loli.net/2022/03/28/HwBqOVcP7MmNZL1.png" alt="图2  段落之间的写法的效果展示"></p><h3 id="3-字体"><a href="#3-字体" class="headerlink" title="3 字体"></a>3 字体</h3><p>在$Markdown$中字体有<b><font color="Red">斜体和粗体</font></b>,字体的语法如下:</p><!-- ```none*斜体文本*_斜体文本_**加粗文本**__加粗文本__***粗斜体字体***___粗斜体字体___``` --><p>不建议采用使用<b><font color="Blue">下划线</font></b>版本,下划线会连在一起,不好区分数量,故一般采用以下三种写法:</p><!-- ```none*斜体文本***加粗文本*****粗斜体字体***``` --><p><img src="https://s2.loli.net/2022/03/28/WJiIkbzSo9lxgwe.png" alt="图3  斜体和粗体的效果展示"></p><!-- <font color=Red>此地方为内容</font> --><h3 id="4-分割符"><a href="#4-分割符" class="headerlink" title="4 分割符"></a>4 分割符</h3><p>分隔线在一行中，使用<b><font color="Red">三个以上</font></b>的<strong>星号、减号、下划线</strong>来建立(可以隔开),分隔符的语法如下:</p><!-- ```none**** * * * *____ _ _ _ _ _-------- - - -``` --><p><img src="https://s2.loli.net/2022/03/28/yX7LGFpb9HgPrxs.png" alt="图4  分隔符的效果展示"></p><h3 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5 删除线"></a>5 删除线</h3><p>删除线是给文本加上删除线,在文本两端加上两个波浪线<code>~</code>即可.(<font color="Red">由于编译器的原因,图片左边的自动添上了删除线效果</font>),删除线的语法如下:</p><!-- ```none~~删除的文字~~``` --><p><img src="https://s2.loli.net/2022/03/28/TwNeypsPIRudrkB.png" alt="图5  删除线的效果展示"></p><h3 id="6-下划线"><a href="#6-下划线" class="headerlink" title="6 下划线"></a>6 下划线</h3><p>在$Markdown$没有下划线的语法,可利用$Html$的语法实现下划线,下划线的语法如下:</p><!-- ```none<u>下划线的文字</u>``` --><p><img src="https://s2.loli.net/2022/03/28/GwdMYDW6rti7qJL.png" alt="图6  下划线的效果展示"></p><h3 id="7-列表"><a href="#7-列表" class="headerlink" title="7 列表"></a>7 列表</h3><p>列表可分为两种:<b><font color="Red">有序列表</font></b>和<b><font color="Blue">无序列表</font></b>.</p><h4 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h4><p>无序列表可使用<font color="Green">星号<code>*</code>,加号<code>+</code>,减号<code>-</code></font>的三种方式(<font color="Purple">内容与符号中间用空格隔开</font>),无序列表的语法如下:</p><!-- ```none* 第一项* 第二项* 第三项- 第四项- 第五项- 第六项  + 第七项+ 第八项+ 第九项``` --><p><img src="https://s2.loli.net/2022/03/29/HwR1TLjWaYzpiGZ.png" alt="图7.1 无序列表的效果展示"></p><h4 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h4><p>有序列表使用<font color="Orange">数字+<code>.</code>+空格+内容</font>的方式,有序列表的语法如下:</p><!-- ```none1. 步骤一:xxxxxx2. 步骤二:yyyyyy3. 步骤三:zzzzzz``` --><p><img src="https://s2.loli.net/2022/03/29/8EgUjLnQNdYGuDS.png" alt="图7.2 有序列表的效果展示"></p><h4 id="7-3-列表嵌套"><a href="#7-3-列表嵌套" class="headerlink" title="7.3 列表嵌套"></a>7.3 列表嵌套</h4><p>有序列表和无序列表(或者无序列表和无序列表)可以一起使用,只需要在子列表的选项前添加四个空格,列表嵌套的语法如下:</p><!-- ```none1. 第一项：    * 子列表1    - 子列表22. 第二项：    - 子列表1    - 子列表2* 嵌套第一层    * 嵌套第二层        * 嵌套第三层            * 嵌套第四层                * 嵌套第五层 ``` --><p><img src="https://s2.loli.net/2022/03/29/edFqsuRc1NTV8a7.png" alt="7.3 列表嵌套的效果展示"></p><h3 id="8-区块"><a href="#8-区块" class="headerlink" title="8 区块"></a>8 区块</h3><p>区块的作用是用来引用的,可以引用链接或者一段文字,在段落的开头使用<code>&gt;</code>符号,中间使用空格隔开内容，区块的语法如下:</p><!-- ```none> 这是我要引用的第一段内容> 这是我要引用的第二段内容> 这是我接着第二段的空间引用的第三段内容``` --><p><img src="https://s2.loli.net/2022/03/29/foizLuap3ICgy92.png" alt="图8.1 区块的效果展示"></p><p>区块也可以<font color="BluRed">嵌套使用</font>,嵌套的第$i$层就有$i$个<code>&gt;</code>的符号.</p><!-- ```none> 区块嵌套第一层1.0>> 区块嵌套第二层1.0>>> 区块嵌套第三层>>>>>>> 区块嵌套第四层>>>> 区块嵌套第二层2.0 > > 区块嵌套第一层2.0``` --><p><img src="https://s2.loli.net/2022/03/29/qQNKuR1lmEJIAFz.png" alt="图8.2  区块嵌套的效果展示"></p><h3 id="9-代码块"><a href="#9-代码块" class="headerlink" title="9 代码块"></a>9 代码块</h3><p>代码块可以展示不同语言的编程代码并实现不同的高亮效果.上下使用三个点进行包裹,可在最顶上写上代码的语言类型,代码块的语法如下:</p><!-- ```cpp    ```cpp        #include<iostream>        #include<cstring>        #include<algorithm>        using namespace std;        int main()        {            cout <! "hello world" <! endl;            return 0;        }    `````` --><p><img src="https://s2.loli.net/2022/03/30/OJpI6sbSYcwUdHx.png" alt="图9  代码块的效果展示"></p><h3 id="10-链接"><a href="#10-链接" class="headerlink" title="10 链接"></a>10 链接</h3><p>使用链接的两种方法:</p><ul><li>直接链接,适用于短的链接,不太用于自定义取名</li><li>使用$markdown$语法插入</li></ul><p>链接的语法格式如下(这里以百度为例):</p><!-- ```none  //方法一:直接链接  // # <链接地址>  //方法二:  // # [这是链接的名称](链接地址)``` --><p><img src="https://s2.loli.net/2022/03/30/m7soFwfeX2rlNtL.png" alt="图10  链接的效果展示"></p><h3 id="11-图片"><a href="#11-图片" class="headerlink" title="11 图片"></a>11 图片</h3><p>插入图片的可以选择本地的图片或者<a href="https://sm.ms/">图床</a>超链接,图片的语法如下:</p><!-- ```none![图片描述](图片链接或地址)``` --><h3 id="12-表格"><a href="#12-表格" class="headerlink" title="12 表格"></a>12 表格</h3><p>在$Markdown$中可插入表格,表格的语法如下(此处为了美观所以比较对齐):</p><!-- ```none|  姓名   | 学号               ||  --     | --                ||  Lisa   | 95001             ||  Bob    | 95566322222222222 || 我的名字 | 5487652           ||  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |``` --><!--  --><p><img src="https://s2.loli.net/2022/03/30/PCHdVgTO39cUSWh.png" alt="图12.1 表格的效果展示"></p><p>表格也可以设置自动对齐规则:</p><ul><li>居右: <code>-:</code></li><li>居左: <code>:-</code></li><li>居中: <code>:-:</code></li></ul><p>表格对齐的语法如下:</p><!-- ```none| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 200单元格 | 400单元格 | 单元格5000 || 单元格 | 单元格 | 单元格 |``` --><p><img src="https://s2.loli.net/2022/03/30/y1dkI8VenxA9mLr.png" alt="图12.2  表格对齐的效果展示"></p><h3 id="13-转义字符"><a href="#13-转义字符" class="headerlink" title="13 转义字符"></a>13 转义字符</h3><p>由于Markdown中用了一些字符作为语法,如果想要使用输出字符此时需要<b><font color="Red">反斜线<code>\</code></font></b>来达到效果,其中英文句点看不出区别,转义字符的语法如下:</p><!-- ```none\   反斜线   \\`   反引号   \`*   星号     \*_   下划线   \_{}  花括号   \{}   []  方括号   \[]()  小括号   \()#   井字号   \#+   加号     \+-   减号     \-.   英文句点  \.!   感叹号   \!```  --><p><img src="https://s2.loli.net/2022/04/01/bfh8KsrTdc9XWk5.png" alt="图13 转义的效果展示"></p><h3 id="14-其他高级语法"><a href="#14-其他高级语法" class="headerlink" title="14 其他高级语法"></a>14 其他高级语法</h3><h4 id="14-1-数学公式"><a href="#14-1-数学公式" class="headerlink" title="14.1 数学公式"></a>14.1 数学公式</h4><p>用$$中间插入使用的表达式</p><!-- ```none$\sum_{i=1}^{n} (i^2+i+1)$``` --><p>效果如右边所示:  $\sum_{i=1}^{n} (i^2+i+1)$</p><h4 id="14-2-html元素"><a href="#14-2-html元素" class="headerlink" title="14.2 html元素"></a>14.2 html元素</h4><!-- ```html<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd>``` --><p>效果如右边所示:<kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd></p>]]></content>
      
      
      <categories>
          
          <category> 博客初步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown语法 </tag>
            
            <tag> 博客文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
